
SD-2_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b128  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800b2f8  0800b2f8  0000c2f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b74c  0800b74c  0000d1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b74c  0800b74c  0000c74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b754  0800b754  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b754  0800b754  0000c754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b758  0800b758  0000c758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800b75c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  200001e0  0800b93c  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000884  0800b93c  0000d884  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001376f  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002669  00000000  00000000  0002097f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00022fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed8  00000000  00000000  000242c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000237fd  00000000  00000000  00025198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153ff  00000000  00000000  00048995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7461  00000000  00000000  0005dd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001351f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006238  00000000  00000000  00135238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0013b470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b2e0 	.word	0x0800b2e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800b2e0 	.word	0x0800b2e0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <platform_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af04      	add	r7, sp, #16
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	460b      	mov	r3, r1
 8000f22:	72fb      	strb	r3, [r7, #11]
 8000f24:	4613      	mov	r3, r2
 8000f26:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Write(handle, (STHS34PF80_I2C_ADDRESS_7BIT << 1), reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)bufp, len, 1000);
 8000f28:	7afb      	ldrb	r3, [r7, #11]
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f30:	9302      	str	r3, [sp, #8]
 8000f32:	893b      	ldrh	r3, [r7, #8]
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	21b4      	movs	r1, #180	@ 0xb4
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f002 fab8 	bl	80034b4 <HAL_I2C_Mem_Write>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <platform_read>:
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b088      	sub	sp, #32
 8000f52:	af04      	add	r7, sp, #16
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	72fb      	strb	r3, [r7, #11]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read(handle, (STHS34PF80_I2C_ADDRESS_7BIT << 1), reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8000f62:	7afb      	ldrb	r3, [r7, #11]
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	893b      	ldrh	r3, [r7, #8]
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	21b4      	movs	r1, #180	@ 0xb4
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f002 fb95 	bl	80036a8 <HAL_I2C_Mem_Read>
 8000f7e:	4603      	mov	r3, r0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <tx_com>:
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, tx_buffer, len, 1000);
 8000f94:	887a      	ldrh	r2, [r7, #2]
 8000f96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	4803      	ldr	r0, [pc, #12]	@ (8000fac <tx_com+0x24>)
 8000f9e:	f006 fb77 	bl	8007690 <HAL_UART_Transmit>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200002ec 	.word	0x200002ec

08000fb0 <platform_delay>:
static void platform_delay(uint32_t ms)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	return HAL_Delay(ms);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f001 fd85 	bl	8002ac8 <HAL_Delay>
}
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <map>:
{
	wakeup_thread = 1;
}

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 8000fc4:	b490      	push	{r4, r7}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4604      	mov	r4, r0
 8000fcc:	4608      	mov	r0, r1
 8000fce:	4611      	mov	r1, r2
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	80fb      	strh	r3, [r7, #6]
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80bb      	strh	r3, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	807b      	strh	r3, [r7, #2]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000fe2:	88fa      	ldrh	r2, [r7, #6]
 8000fe4:	88bb      	ldrh	r3, [r7, #4]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	8a39      	ldrh	r1, [r7, #16]
 8000fea:	883a      	ldrh	r2, [r7, #0]
 8000fec:	1a8a      	subs	r2, r1, r2
 8000fee:	fb03 f202 	mul.w	r2, r3, r2
 8000ff2:	8879      	ldrh	r1, [r7, #2]
 8000ff4:	88bb      	ldrh	r3, [r7, #4]
 8000ff6:	1acb      	subs	r3, r1, r3
 8000ff8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	883b      	ldrh	r3, [r7, #0]
 8001000:	4413      	add	r3, r2
 8001002:	b29b      	uxth	r3, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bc90      	pop	{r4, r7}
 800100c:	4770      	bx	lr
	...

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b08d      	sub	sp, #52	@ 0x34
 8001014:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001016:	f001 fce5 	bl	80029e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101a:	f000 f999 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101e:	f000 fb2b 	bl	8001678 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001022:	f000 fa03 	bl	800142c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001026:	f000 fafd 	bl	8001624 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800102a:	f000 fa2d 	bl	8001488 <MX_I2C2_Init>
  MX_TIM1_Init();
 800102e:	f000 fa59 	bl	80014e4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001032:	2100      	movs	r1, #0
 8001034:	48b4      	ldr	r0, [pc, #720]	@ (8001308 <main+0x2f8>)
 8001036:	f005 fca5 	bl	8006984 <HAL_TIM_PWM_Start>

	uint8_t whoami;
	sths34pf80_lpf_bandwidth_t lpf_m, lpf_p, lpf_p_m, lpf_a_t;

	/* Initialize mems driver interface */
	dev_ctx.write_reg = platform_write;
 800103a:	4bb4      	ldr	r3, [pc, #720]	@ (800130c <main+0x2fc>)
 800103c:	4ab4      	ldr	r2, [pc, #720]	@ (8001310 <main+0x300>)
 800103e:	601a      	str	r2, [r3, #0]
	dev_ctx.read_reg = platform_read;
 8001040:	4bb2      	ldr	r3, [pc, #712]	@ (800130c <main+0x2fc>)
 8001042:	4ab4      	ldr	r2, [pc, #720]	@ (8001314 <main+0x304>)
 8001044:	605a      	str	r2, [r3, #4]
	dev_ctx.mdelay = platform_delay;
 8001046:	4bb1      	ldr	r3, [pc, #708]	@ (800130c <main+0x2fc>)
 8001048:	4ab3      	ldr	r2, [pc, #716]	@ (8001318 <main+0x308>)
 800104a:	609a      	str	r2, [r3, #8]
	dev_ctx.handle = &hi2c1;
 800104c:	4baf      	ldr	r3, [pc, #700]	@ (800130c <main+0x2fc>)
 800104e:	4ab3      	ldr	r2, [pc, #716]	@ (800131c <main+0x30c>)
 8001050:	60da      	str	r2, [r3, #12]

	/* Initialize platform specific hardware */

	// Set CS to High
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001058:	48b1      	ldr	r0, [pc, #708]	@ (8001320 <main+0x310>)
 800105a:	f002 f89f 	bl	800319c <HAL_GPIO_WritePin>

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 800105e:	200a      	movs	r0, #10
 8001060:	f7ff ffa6 	bl	8000fb0 <platform_delay>

	/* Check device ID */
	sths34pf80_device_id_get(&dev_ctx, &whoami);
 8001064:	f107 030f 	add.w	r3, r7, #15
 8001068:	4619      	mov	r1, r3
 800106a:	48a8      	ldr	r0, [pc, #672]	@ (800130c <main+0x2fc>)
 800106c:	f000 fbfa 	bl	8001864 <sths34pf80_device_id_get>

	while(whoami != STHS34PF80_ID){
 8001070:	e010      	b.n	8001094 <main+0x84>
		HAL_UART_Transmit(&huart2, err_buf, 12, 1000);
 8001072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001076:	220c      	movs	r2, #12
 8001078:	49aa      	ldr	r1, [pc, #680]	@ (8001324 <main+0x314>)
 800107a:	48ab      	ldr	r0, [pc, #684]	@ (8001328 <main+0x318>)
 800107c:	f006 fb08 	bl	8007690 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001080:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001084:	f001 fd20 	bl	8002ac8 <HAL_Delay>
		sths34pf80_device_id_get(&dev_ctx, &whoami);
 8001088:	f107 030f 	add.w	r3, r7, #15
 800108c:	4619      	mov	r1, r3
 800108e:	489f      	ldr	r0, [pc, #636]	@ (800130c <main+0x2fc>)
 8001090:	f000 fbe8 	bl	8001864 <sths34pf80_device_id_get>
	while(whoami != STHS34PF80_ID){
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2bd3      	cmp	r3, #211	@ 0xd3
 8001098:	d1eb      	bne.n	8001072 <main+0x62>
	}
	snprintf((char *)tx_buffer, sizeof(tx_buffer), "Device Found! WHO_AM_I: 0x%02X\r\n", whoami);
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	4aa3      	ldr	r2, [pc, #652]	@ (800132c <main+0x31c>)
 800109e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010a2:	48a3      	ldr	r0, [pc, #652]	@ (8001330 <main+0x320>)
 80010a4:	f007 ffd4 	bl	8009050 <sniprintf>
	tx_com(tx_buffer, strlen((char const *)tx_buffer));
 80010a8:	48a1      	ldr	r0, [pc, #644]	@ (8001330 <main+0x320>)
 80010aa:	f7ff f901 	bl	80002b0 <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	489e      	ldr	r0, [pc, #632]	@ (8001330 <main+0x320>)
 80010b6:	f7ff ff67 	bl	8000f88 <tx_com>

	sths34pf80_avg_tobject_num_set(&dev_ctx, STHS34PF80_AVG_TMOS_32);
 80010ba:	2102      	movs	r1, #2
 80010bc:	4893      	ldr	r0, [pc, #588]	@ (800130c <main+0x2fc>)
 80010be:	f000 fbe2 	bl	8001886 <sths34pf80_avg_tobject_num_set>
	sths34pf80_avg_tambient_num_set(&dev_ctx, STHS34PF80_AVG_T_8);
 80010c2:	2100      	movs	r1, #0
 80010c4:	4891      	ldr	r0, [pc, #580]	@ (800130c <main+0x2fc>)
 80010c6:	f000 fc04 	bl	80018d2 <sths34pf80_avg_tambient_num_set>

	/* read filters */
	sths34pf80_lpf_m_bandwidth_get(&dev_ctx, &lpf_m);
 80010ca:	f107 030e 	add.w	r3, r7, #14
 80010ce:	4619      	mov	r1, r3
 80010d0:	488e      	ldr	r0, [pc, #568]	@ (800130c <main+0x2fc>)
 80010d2:	f000 fddf 	bl	8001c94 <sths34pf80_lpf_m_bandwidth_get>
	sths34pf80_lpf_p_bandwidth_get(&dev_ctx, &lpf_p);
 80010d6:	f107 030d 	add.w	r3, r7, #13
 80010da:	4619      	mov	r1, r3
 80010dc:	488b      	ldr	r0, [pc, #556]	@ (800130c <main+0x2fc>)
 80010de:	f000 feb7 	bl	8001e50 <sths34pf80_lpf_p_bandwidth_get>
	sths34pf80_lpf_p_m_bandwidth_get(&dev_ctx, &lpf_p_m);
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	4619      	mov	r1, r3
 80010e8:	4888      	ldr	r0, [pc, #544]	@ (800130c <main+0x2fc>)
 80010ea:	f000 fe1d 	bl	8001d28 <sths34pf80_lpf_p_m_bandwidth_get>
	sths34pf80_lpf_a_t_bandwidth_get(&dev_ctx, &lpf_a_t);
 80010ee:	f107 030b 	add.w	r3, r7, #11
 80010f2:	4619      	mov	r1, r3
 80010f4:	4885      	ldr	r0, [pc, #532]	@ (800130c <main+0x2fc>)
 80010f6:	f000 fe61 	bl	8001dbc <sths34pf80_lpf_a_t_bandwidth_get>

	snprintf((char *)tx_buffer, sizeof(tx_buffer),
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	4618      	mov	r0, r3
 80010fe:	7b7b      	ldrb	r3, [r7, #13]
 8001100:	7b3a      	ldrb	r2, [r7, #12]
 8001102:	7af9      	ldrb	r1, [r7, #11]
 8001104:	9102      	str	r1, [sp, #8]
 8001106:	9201      	str	r2, [sp, #4]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	4603      	mov	r3, r0
 800110c:	4a89      	ldr	r2, [pc, #548]	@ (8001334 <main+0x324>)
 800110e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001112:	4887      	ldr	r0, [pc, #540]	@ (8001330 <main+0x320>)
 8001114:	f007 ff9c 	bl	8009050 <sniprintf>
			"lpf_m: %02d, lpf_p: %02d, lpf_p_m: %02d, lpf_a_t: %02d\r\n",
			 lpf_m, lpf_p, lpf_p_m, lpf_a_t);

	tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8001118:	4885      	ldr	r0, [pc, #532]	@ (8001330 <main+0x320>)
 800111a:	f7ff f8c9 	bl	80002b0 <strlen>
 800111e:	4603      	mov	r3, r0
 8001120:	b29b      	uxth	r3, r3
 8001122:	4619      	mov	r1, r3
 8001124:	4882      	ldr	r0, [pc, #520]	@ (8001330 <main+0x320>)
 8001126:	f7ff ff2f 	bl	8000f88 <tx_com>

	/* Set BDU */
	sths34pf80_block_data_update_set(&dev_ctx, 1);
 800112a:	2101      	movs	r1, #1
 800112c:	4877      	ldr	r0, [pc, #476]	@ (800130c <main+0x2fc>)
 800112e:	f000 fcd9 	bl	8001ae4 <sths34pf80_block_data_update_set>

	sths34pf80_presence_threshold_set(&dev_ctx, 200);
 8001132:	21c8      	movs	r1, #200	@ 0xc8
 8001134:	4875      	ldr	r0, [pc, #468]	@ (800130c <main+0x2fc>)
 8001136:	f000 ffab 	bl	8002090 <sths34pf80_presence_threshold_set>
	sths34pf80_presence_hysteresis_set(&dev_ctx, 20);
 800113a:	2114      	movs	r1, #20
 800113c:	4873      	ldr	r0, [pc, #460]	@ (800130c <main+0x2fc>)
 800113e:	f001 f884 	bl	800224a <sths34pf80_presence_hysteresis_set>
	sths34pf80_motion_threshold_set(&dev_ctx, 300);
 8001142:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001146:	4871      	ldr	r0, [pc, #452]	@ (800130c <main+0x2fc>)
 8001148:	f000 fff1 	bl	800212e <sths34pf80_motion_threshold_set>
	sths34pf80_motion_hysteresis_set(&dev_ctx, 30);
 800114c:	211e      	movs	r1, #30
 800114e:	486f      	ldr	r0, [pc, #444]	@ (800130c <main+0x2fc>)
 8001150:	f001 f83c 	bl	80021cc <sths34pf80_motion_hysteresis_set>

	sths34pf80_algo_reset(&dev_ctx);
 8001154:	486d      	ldr	r0, [pc, #436]	@ (800130c <main+0x2fc>)
 8001156:	f001 f907 	bl	8002368 <sths34pf80_algo_reset>

	/* Set interrupt */
	sths34pf80_int_or_set(&dev_ctx, STHS34PF80_INT_PRESENCE);
 800115a:	2104      	movs	r1, #4
 800115c:	486b      	ldr	r0, [pc, #428]	@ (800130c <main+0x2fc>)
 800115e:	f000 feee 	bl	8001f3e <sths34pf80_int_or_set>
	sths34pf80_route_int_set(&dev_ctx, STHS34PF80_INT_OR);
 8001162:	2102      	movs	r1, #2
 8001164:	4869      	ldr	r0, [pc, #420]	@ (800130c <main+0x2fc>)
 8001166:	f000 febd 	bl	8001ee4 <sths34pf80_route_int_set>

	/* Set ODR */
	sths34pf80_odr_set(&dev_ctx, STHS34PF80_ODR_AT_30Hz);
 800116a:	2108      	movs	r1, #8
 800116c:	4867      	ldr	r0, [pc, #412]	@ (800130c <main+0x2fc>)
 800116e:	f000 fc5f 	bl	8001a30 <sths34pf80_odr_set>

	int16_t object_temp_raw;
	int16_t ambient_temp_raw;
	float ambient_temp_celsius;

	uint8_t motion = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	777b      	strb	r3, [r7, #29]
	uint8_t presence = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	773b      	strb	r3, [r7, #28]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* handle event in a "thread" alike code */

	  if (wakeup_thread)
 800117a:	4b6f      	ldr	r3, [pc, #444]	@ (8001338 <main+0x328>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0fb      	beq.n	800117a <main+0x16a>
	  {
		wakeup_thread = 0;
 8001182:	4b6d      	ldr	r3, [pc, #436]	@ (8001338 <main+0x328>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
		//motion = 0;
		//presence = 0;

		  sths34pf80_func_status_get(&dev_ctx, &func_status);
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	4619      	mov	r1, r3
 800118e:	485f      	ldr	r0, [pc, #380]	@ (800130c <main+0x2fc>)
 8001190:	f000 fd0f 	bl	8001bb2 <sths34pf80_func_status_get>

		  sths34pf80_tobject_raw_get(&dev_ctx, &object_temp_raw);
 8001194:	1dbb      	adds	r3, r7, #6
 8001196:	4619      	mov	r1, r3
 8001198:	485c      	ldr	r0, [pc, #368]	@ (800130c <main+0x2fc>)
 800119a:	f000 fd37 	bl	8001c0c <sths34pf80_tobject_raw_get>
		  sths34pf80_tambient_raw_get(&dev_ctx, &ambient_temp_raw);
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	485a      	ldr	r0, [pc, #360]	@ (800130c <main+0x2fc>)
 80011a4:	f000 fd54 	bl	8001c50 <sths34pf80_tambient_raw_get>

		  ambient_temp_celsius = (float)ambient_temp_raw / 100.0f;
 80011a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b4:	eddf 6a61 	vldr	s13, [pc, #388]	@ 800133c <main+0x32c>
 80011b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011bc:	edc7 7a06 	vstr	s15, [r7, #24]

		  	int16_t sensor_min = 200;  // Example: a reading below this is no one
 80011c0:	23c8      	movs	r3, #200	@ 0xc8
 80011c2:	82fb      	strh	r3, [r7, #22]
			uint16_t sensor_max = 22000; // Example: a reading above this is a large crowd
 80011c4:	f245 53f0 	movw	r3, #22000	@ 0x55f0
 80011c8:	82bb      	strh	r3, [r7, #20]
			uint16_t pwm_min = 0;       // 0% duty cycle
 80011ca:	2300      	movs	r3, #0
 80011cc:	827b      	strh	r3, [r7, #18]
			uint16_t pwm_max = 999;     // Max duty cycle (matches our Counter Period)
 80011ce:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80011d2:	823b      	strh	r3, [r7, #16]

			/* BUZZER OFFSET FROM USART */
			if (func_status.pres_flag)
 80011d4:	7a3b      	ldrb	r3, [r7, #8]
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d020      	beq.n	8001222 <main+0x212>
			{
			buzzer_strength = map(object_temp_raw, sensor_min, sensor_max, pwm_min, pwm_max);
 80011e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e4:	b298      	uxth	r0, r3
 80011e6:	8af9      	ldrh	r1, [r7, #22]
 80011e8:	8a7c      	ldrh	r4, [r7, #18]
 80011ea:	8aba      	ldrh	r2, [r7, #20]
 80011ec:	8a3b      	ldrh	r3, [r7, #16]
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	4623      	mov	r3, r4
 80011f2:	f7ff fee7 	bl	8000fc4 <map>
 80011f6:	4603      	mov	r3, r0
 80011f8:	83fb      	strh	r3, [r7, #30]
			if (buzzer_strength < pwm_min) buzzer_strength = pwm_min;
 80011fa:	8bfa      	ldrh	r2, [r7, #30]
 80011fc:	8a7b      	ldrh	r3, [r7, #18]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d201      	bcs.n	8001206 <main+0x1f6>
 8001202:	8a7b      	ldrh	r3, [r7, #18]
 8001204:	83fb      	strh	r3, [r7, #30]
			if (buzzer_strength > pwm_max) buzzer_strength = pwm_max;
 8001206:	8bfa      	ldrh	r2, [r7, #30]
 8001208:	8a3b      	ldrh	r3, [r7, #16]
 800120a:	429a      	cmp	r2, r3
 800120c:	d901      	bls.n	8001212 <main+0x202>
 800120e:	8a3b      	ldrh	r3, [r7, #16]
 8001210:	83fb      	strh	r3, [r7, #30]

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, buzzer_strength);
 8001212:	4b3d      	ldr	r3, [pc, #244]	@ (8001308 <main+0x2f8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	8bfa      	ldrh	r2, [r7, #30]
 8001218:	635a      	str	r2, [r3, #52]	@ 0x34
			platform_delay(BOOT_TIME);
 800121a:	200a      	movs	r0, #10
 800121c:	f7ff fec8 	bl	8000fb0 <platform_delay>
 8001220:	e006      	b.n	8001230 <main+0x220>
			}
			else
			{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001222:	4b39      	ldr	r3, [pc, #228]	@ (8001308 <main+0x2f8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2200      	movs	r2, #0
 8001228:	635a      	str	r2, [r3, #52]	@ 0x34
			platform_delay(BOOT_TIME);
 800122a:	200a      	movs	r0, #10
 800122c:	f7ff fec0 	bl	8000fb0 <platform_delay>
			}
			/* BUZZER OFFSET FROM USART */

		  if (func_status.pres_flag != presence)
 8001230:	7a3b      	ldrb	r3, [r7, #8]
 8001232:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	7f3b      	ldrb	r3, [r7, #28]
 800123c:	429a      	cmp	r2, r3
 800123e:	d040      	beq.n	80012c2 <main+0x2b2>
		  {
			presence = func_status.pres_flag;
 8001240:	7a3b      	ldrb	r3, [r7, #8]
 8001242:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	773b      	strb	r3, [r7, #28]

			if (presence)
 800124a:	7f3b      	ldrb	r3, [r7, #28]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d029      	beq.n	80012a4 <main+0x294>
			{
			  snprintf((char *)tx_buffer, sizeof(tx_buffer), "Start of Presence\r\n");
 8001250:	4a3b      	ldr	r2, [pc, #236]	@ (8001340 <main+0x330>)
 8001252:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001256:	4836      	ldr	r0, [pc, #216]	@ (8001330 <main+0x320>)
 8001258:	f007 fefa 	bl	8009050 <sniprintf>
			  tx_com(tx_buffer, strlen((char const *)tx_buffer));
 800125c:	4834      	ldr	r0, [pc, #208]	@ (8001330 <main+0x320>)
 800125e:	f7ff f827 	bl	80002b0 <strlen>
 8001262:	4603      	mov	r3, r0
 8001264:	b29b      	uxth	r3, r3
 8001266:	4619      	mov	r1, r3
 8001268:	4831      	ldr	r0, [pc, #196]	@ (8001330 <main+0x320>)
 800126a:	f7ff fe8d 	bl	8000f88 <tx_com>

				snprintf((char *)tx_buffer, sizeof(tx_buffer),
 800126e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001272:	461c      	mov	r4, r3
 8001274:	69b8      	ldr	r0, [r7, #24]
 8001276:	f7ff f987 	bl	8000588 <__aeabi_f2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	e9cd 2300 	strd	r2, r3, [sp]
 8001282:	4623      	mov	r3, r4
 8001284:	4a2f      	ldr	r2, [pc, #188]	@ (8001344 <main+0x334>)
 8001286:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800128a:	4829      	ldr	r0, [pc, #164]	@ (8001330 <main+0x320>)
 800128c:	f007 fee0 	bl	8009050 <sniprintf>
					  "--> IR Value: %d, Ambient Temp: %.2f C\r\n",
					  object_temp_raw, ambient_temp_celsius);

				tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8001290:	4827      	ldr	r0, [pc, #156]	@ (8001330 <main+0x320>)
 8001292:	f7ff f80d 	bl	80002b0 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b29b      	uxth	r3, r3
 800129a:	4619      	mov	r1, r3
 800129c:	4824      	ldr	r0, [pc, #144]	@ (8001330 <main+0x320>)
 800129e:	f7ff fe73 	bl	8000f88 <tx_com>
 80012a2:	e00e      	b.n	80012c2 <main+0x2b2>
			}
			else
			{
			  snprintf((char *)tx_buffer, sizeof(tx_buffer), "End of Presence\r\n");
 80012a4:	4a28      	ldr	r2, [pc, #160]	@ (8001348 <main+0x338>)
 80012a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012aa:	4821      	ldr	r0, [pc, #132]	@ (8001330 <main+0x320>)
 80012ac:	f007 fed0 	bl	8009050 <sniprintf>
			  tx_com(tx_buffer, strlen((char const *)tx_buffer));
 80012b0:	481f      	ldr	r0, [pc, #124]	@ (8001330 <main+0x320>)
 80012b2:	f7fe fffd 	bl	80002b0 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4619      	mov	r1, r3
 80012bc:	481c      	ldr	r0, [pc, #112]	@ (8001330 <main+0x320>)
 80012be:	f7ff fe63 	bl	8000f88 <tx_com>
			}
		  }

		  if (func_status.mot_flag != motion)
 80012c2:	7a3b      	ldrb	r3, [r7, #8]
 80012c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	7f7b      	ldrb	r3, [r7, #29]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	f43f af53 	beq.w	800117a <main+0x16a>
		  {
			motion = func_status.mot_flag;
 80012d4:	7a3b      	ldrb	r3, [r7, #8]
 80012d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	777b      	strb	r3, [r7, #29]

			if (motion)
 80012de:	7f7b      	ldrb	r3, [r7, #29]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f43f af4a 	beq.w	800117a <main+0x16a>
			{
			  snprintf((char *)tx_buffer, sizeof(tx_buffer), "Motion Detected!\r\n");
 80012e6:	4a19      	ldr	r2, [pc, #100]	@ (800134c <main+0x33c>)
 80012e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012ec:	4810      	ldr	r0, [pc, #64]	@ (8001330 <main+0x320>)
 80012ee:	f007 feaf 	bl	8009050 <sniprintf>
			  tx_com(tx_buffer, strlen((char const *)tx_buffer));
 80012f2:	480f      	ldr	r0, [pc, #60]	@ (8001330 <main+0x320>)
 80012f4:	f7fe ffdc 	bl	80002b0 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4619      	mov	r1, r3
 80012fe:	480c      	ldr	r0, [pc, #48]	@ (8001330 <main+0x320>)
 8001300:	f7ff fe42 	bl	8000f88 <tx_com>
	  if (wakeup_thread)
 8001304:	e739      	b.n	800117a <main+0x16a>
 8001306:	bf00      	nop
 8001308:	200002a4 	.word	0x200002a4
 800130c:	2000071c 	.word	0x2000071c
 8001310:	08000f15 	.word	0x08000f15
 8001314:	08000f4f 	.word	0x08000f4f
 8001318:	08000fb1 	.word	0x08000fb1
 800131c:	200001fc 	.word	0x200001fc
 8001320:	40020800 	.word	0x40020800
 8001324:	20000000 	.word	0x20000000
 8001328:	200002ec 	.word	0x200002ec
 800132c:	0800b2f8 	.word	0x0800b2f8
 8001330:	20000334 	.word	0x20000334
 8001334:	0800b31c 	.word	0x0800b31c
 8001338:	2000072c 	.word	0x2000072c
 800133c:	42c80000 	.word	0x42c80000
 8001340:	0800b358 	.word	0x0800b358
 8001344:	0800b36c 	.word	0x0800b36c
 8001348:	0800b398 	.word	0x0800b398
 800134c:	0800b3ac 	.word	0x0800b3ac

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b094      	sub	sp, #80	@ 0x50
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	2234      	movs	r2, #52	@ 0x34
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f007 feef 	bl	8009142 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	4b2a      	ldr	r3, [pc, #168]	@ (8001424 <SystemClock_Config+0xd4>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	4a29      	ldr	r2, [pc, #164]	@ (8001424 <SystemClock_Config+0xd4>)
 800137e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001382:	6413      	str	r3, [r2, #64]	@ 0x40
 8001384:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <SystemClock_Config+0xd4>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001390:	2300      	movs	r3, #0
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <SystemClock_Config+0xd8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800139c:	4a22      	ldr	r2, [pc, #136]	@ (8001428 <SystemClock_Config+0xd8>)
 800139e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <SystemClock_Config+0xd8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b8:	2310      	movs	r3, #16
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013bc:	2302      	movs	r3, #2
 80013be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013c4:	2310      	movs	r3, #16
 80013c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013ce:	2304      	movs	r3, #4
 80013d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4618      	mov	r0, r3
 80013e0:	f004 ff8a 	bl	80062f8 <HAL_RCC_OscConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013ea:	f000 f9f9 	bl	80017e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ee:	230f      	movs	r3, #15
 80013f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f2:	2302      	movs	r3, #2
 80013f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	2102      	movs	r1, #2
 800140a:	4618      	mov	r0, r3
 800140c:	f004 fc2a 	bl	8005c64 <HAL_RCC_ClockConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001416:	f000 f9e3 	bl	80017e0 <Error_Handler>
  }
}
 800141a:	bf00      	nop
 800141c:	3750      	adds	r7, #80	@ 0x50
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000

0800142c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001430:	4b12      	ldr	r3, [pc, #72]	@ (800147c <MX_I2C1_Init+0x50>)
 8001432:	4a13      	ldr	r2, [pc, #76]	@ (8001480 <MX_I2C1_Init+0x54>)
 8001434:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <MX_I2C1_Init+0x50>)
 8001438:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <MX_I2C1_Init+0x58>)
 800143a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <MX_I2C1_Init+0x50>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 180;
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <MX_I2C1_Init+0x50>)
 8001444:	22b4      	movs	r2, #180	@ 0xb4
 8001446:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_I2C1_Init+0x50>)
 800144a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800144e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001450:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <MX_I2C1_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_I2C1_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800145c:	4b07      	ldr	r3, [pc, #28]	@ (800147c <MX_I2C1_Init+0x50>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <MX_I2C1_Init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001468:	4804      	ldr	r0, [pc, #16]	@ (800147c <MX_I2C1_Init+0x50>)
 800146a:	f001 fec9 	bl	8003200 <HAL_I2C_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001474:	f000 f9b4 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200001fc 	.word	0x200001fc
 8001480:	40005400 	.word	0x40005400
 8001484:	000186a0 	.word	0x000186a0

08001488 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_I2C2_Init+0x50>)
 800148e:	4a13      	ldr	r2, [pc, #76]	@ (80014dc <MX_I2C2_Init+0x54>)
 8001490:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <MX_I2C2_Init+0x50>)
 8001494:	4a12      	ldr	r2, [pc, #72]	@ (80014e0 <MX_I2C2_Init+0x58>)
 8001496:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001498:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <MX_I2C2_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 164;
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <MX_I2C2_Init+0x50>)
 80014a0:	22a4      	movs	r2, #164	@ 0xa4
 80014a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <MX_I2C2_Init+0x50>)
 80014a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <MX_I2C2_Init+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <MX_I2C2_Init+0x50>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b8:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <MX_I2C2_Init+0x50>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <MX_I2C2_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <MX_I2C2_Init+0x50>)
 80014c6:	f001 fe9b 	bl	8003200 <HAL_I2C_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014d0:	f000 f986 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000250 	.word	0x20000250
 80014dc:	40005800 	.word	0x40005800
 80014e0:	000186a0 	.word	0x000186a0

080014e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b096      	sub	sp, #88	@ 0x58
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	615a      	str	r2, [r3, #20]
 8001514:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2220      	movs	r2, #32
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f007 fe10 	bl	8009142 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001522:	4b3e      	ldr	r3, [pc, #248]	@ (800161c <MX_TIM1_Init+0x138>)
 8001524:	4a3e      	ldr	r2, [pc, #248]	@ (8001620 <MX_TIM1_Init+0x13c>)
 8001526:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001528:	4b3c      	ldr	r3, [pc, #240]	@ (800161c <MX_TIM1_Init+0x138>)
 800152a:	2253      	movs	r2, #83	@ 0x53
 800152c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152e:	4b3b      	ldr	r3, [pc, #236]	@ (800161c <MX_TIM1_Init+0x138>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001534:	4b39      	ldr	r3, [pc, #228]	@ (800161c <MX_TIM1_Init+0x138>)
 8001536:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800153a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b37      	ldr	r3, [pc, #220]	@ (800161c <MX_TIM1_Init+0x138>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001542:	4b36      	ldr	r3, [pc, #216]	@ (800161c <MX_TIM1_Init+0x138>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b34      	ldr	r3, [pc, #208]	@ (800161c <MX_TIM1_Init+0x138>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800154e:	4833      	ldr	r0, [pc, #204]	@ (800161c <MX_TIM1_Init+0x138>)
 8001550:	f005 f970 	bl	8006834 <HAL_TIM_Base_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800155a:	f000 f941 	bl	80017e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001562:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001564:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001568:	4619      	mov	r1, r3
 800156a:	482c      	ldr	r0, [pc, #176]	@ (800161c <MX_TIM1_Init+0x138>)
 800156c:	f005 fb94 	bl	8006c98 <HAL_TIM_ConfigClockSource>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001576:	f000 f933 	bl	80017e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800157a:	4828      	ldr	r0, [pc, #160]	@ (800161c <MX_TIM1_Init+0x138>)
 800157c:	f005 f9a9 	bl	80068d2 <HAL_TIM_PWM_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001586:	f000 f92b 	bl	80017e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001592:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001596:	4619      	mov	r1, r3
 8001598:	4820      	ldr	r0, [pc, #128]	@ (800161c <MX_TIM1_Init+0x138>)
 800159a:	f005 ff5b 	bl	8007454 <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015a4:	f000 f91c 	bl	80017e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a8:	2360      	movs	r3, #96	@ 0x60
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4813      	ldr	r0, [pc, #76]	@ (800161c <MX_TIM1_Init+0x138>)
 80015ce:	f005 faa1 	bl	8006b14 <HAL_TIM_PWM_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015d8:	f000 f902 	bl	80017e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4807      	ldr	r0, [pc, #28]	@ (800161c <MX_TIM1_Init+0x138>)
 8001600:	f005 ffa4 	bl	800754c <HAL_TIMEx_ConfigBreakDeadTime>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800160a:	f000 f8e9 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800160e:	4803      	ldr	r0, [pc, #12]	@ (800161c <MX_TIM1_Init+0x138>)
 8001610:	f000 ffec 	bl	80025ec <HAL_TIM_MspPostInit>

}
 8001614:	bf00      	nop
 8001616:	3758      	adds	r7, #88	@ 0x58
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200002a4 	.word	0x200002a4
 8001620:	40010000 	.word	0x40010000

08001624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 800162a:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <MX_USART2_UART_Init+0x50>)
 800162c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 8001630:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 800165c:	f005 ffc8 	bl	80075f0 <HAL_UART_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001666:	f000 f8bb 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200002ec 	.word	0x200002ec
 8001674:	40004400 	.word	0x40004400

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	@ 0x28
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b46      	ldr	r3, [pc, #280]	@ (80017ac <MX_GPIO_Init+0x134>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a45      	ldr	r2, [pc, #276]	@ (80017ac <MX_GPIO_Init+0x134>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b43      	ldr	r3, [pc, #268]	@ (80017ac <MX_GPIO_Init+0x134>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b3f      	ldr	r3, [pc, #252]	@ (80017ac <MX_GPIO_Init+0x134>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a3e      	ldr	r2, [pc, #248]	@ (80017ac <MX_GPIO_Init+0x134>)
 80016b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b3c      	ldr	r3, [pc, #240]	@ (80017ac <MX_GPIO_Init+0x134>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b38      	ldr	r3, [pc, #224]	@ (80017ac <MX_GPIO_Init+0x134>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a37      	ldr	r2, [pc, #220]	@ (80017ac <MX_GPIO_Init+0x134>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b35      	ldr	r3, [pc, #212]	@ (80017ac <MX_GPIO_Init+0x134>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	4b31      	ldr	r3, [pc, #196]	@ (80017ac <MX_GPIO_Init+0x134>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a30      	ldr	r2, [pc, #192]	@ (80017ac <MX_GPIO_Init+0x134>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b2e      	ldr	r3, [pc, #184]	@ (80017ac <MX_GPIO_Init+0x134>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2120      	movs	r1, #32
 8001702:	482b      	ldr	r0, [pc, #172]	@ (80017b0 <MX_GPIO_Init+0x138>)
 8001704:	f001 fd4a 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS__1_GPIO_Port, CS__1_Pin, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800170e:	4829      	ldr	r0, [pc, #164]	@ (80017b4 <MX_GPIO_Init+0x13c>)
 8001710:	f001 fd44 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001714:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800171a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4822      	ldr	r0, [pc, #136]	@ (80017b4 <MX_GPIO_Init+0x13c>)
 800172c:	f001 fba2 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001730:	2301      	movs	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001734:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	481a      	ldr	r0, [pc, #104]	@ (80017b0 <MX_GPIO_Init+0x138>)
 8001746:	f001 fb95 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800174a:	2320      	movs	r3, #32
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4813      	ldr	r0, [pc, #76]	@ (80017b0 <MX_GPIO_Init+0x138>)
 8001762:	f001 fb87 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS__1_Pin */
  GPIO_InitStruct.Pin = CS__1_Pin;
 8001766:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS__1_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <MX_GPIO_Init+0x13c>)
 8001780:	f001 fb78 	bl	8002e74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	2006      	movs	r0, #6
 800178a:	f001 fa9c 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800178e:	2006      	movs	r0, #6
 8001790:	f001 fab5 	bl	8002cfe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	2028      	movs	r0, #40	@ 0x28
 800179a:	f001 fa94 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800179e:	2028      	movs	r0, #40	@ 0x28
 80017a0:	f001 faad 	bl	8002cfe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	@ 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000
 80017b4:	40020800 	.word	0x40020800

080017b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  External Line Detection Callback.
  * @param  GPIO_Pin: The Pin that triggered the interrupt.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
  // This line correctly checks if the interrupt came from PIN #0.
  if (GPIO_Pin == GPIO_PIN_0)
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d102      	bne.n	80017ce <HAL_GPIO_EXTI_Callback+0x16>
  {
    // Since you configured PA0 as EXTI0, this code will now run
    // when the sensor's INT pin sends a signal.
    wakeup_thread = 1;
 80017c8:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <HAL_GPIO_EXTI_Callback+0x24>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
  }
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	2000072c 	.word	0x2000072c

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <Error_Handler+0x8>

080017ec <sths34pf80_read_reg>:
  *
  */
int32_t __weak sths34pf80_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	461a      	mov	r2, r3
 80017f8:	460b      	mov	r3, r1
 80017fa:	72fb      	strb	r3, [r7, #11]
 80017fc:	4613      	mov	r3, r2
 80017fe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <sths34pf80_read_reg+0x20>
  {
    return -1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	e009      	b.n	8001820 <sths34pf80_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	685c      	ldr	r4, [r3, #4]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	68d8      	ldr	r0, [r3, #12]
 8001814:	893b      	ldrh	r3, [r7, #8]
 8001816:	7af9      	ldrb	r1, [r7, #11]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	47a0      	blx	r4
 800181c:	6178      	str	r0, [r7, #20]

  return ret;
 800181e:	697b      	ldr	r3, [r7, #20]
}
 8001820:	4618      	mov	r0, r3
 8001822:	371c      	adds	r7, #28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd90      	pop	{r4, r7, pc}

08001828 <sths34pf80_write_reg>:
  *
  */
int32_t __weak sths34pf80_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	461a      	mov	r2, r3
 8001834:	460b      	mov	r3, r1
 8001836:	72fb      	strb	r3, [r7, #11]
 8001838:	4613      	mov	r3, r2
 800183a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <sths34pf80_write_reg+0x20>
  {
    return -1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	e009      	b.n	800185c <sths34pf80_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681c      	ldr	r4, [r3, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	68d8      	ldr	r0, [r3, #12]
 8001850:	893b      	ldrh	r3, [r7, #8]
 8001852:	7af9      	ldrb	r1, [r7, #11]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	47a0      	blx	r4
 8001858:	6178      	str	r0, [r7, #20]

  return ret;
 800185a:	697b      	ldr	r3, [r7, #20]
}
 800185c:	4618      	mov	r0, r3
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd90      	pop	{r4, r7, pc}

08001864 <sths34pf80_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_WHO_AM_I, val, 1);
 800186e:	2301      	movs	r3, #1
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	210f      	movs	r1, #15
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ffb9 	bl	80017ec <sths34pf80_read_reg>
 800187a:	60f8      	str	r0, [r7, #12]

  return ret;
 800187c:	68fb      	ldr	r3, [r7, #12]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <sths34pf80_avg_tobject_num_set>:
  * @param  val      AVG_TMOS_2, AVG_TMOS_8, AVG_TMOS_32, AVG_TMOS_128, AVG_TMOS_256, AVG_TMOS_512, AVG_TMOS_1024, AVG_TMOS_2048,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_avg_tobject_num_set(const stmdev_ctx_t *ctx, sths34pf80_avg_tobject_num_t val)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	70fb      	strb	r3, [r7, #3]
  sths34pf80_avg_trim_t avg_trim;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 8001892:	f107 0208 	add.w	r2, r7, #8
 8001896:	2301      	movs	r3, #1
 8001898:	2110      	movs	r1, #16
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffa6 	bl	80017ec <sths34pf80_read_reg>
 80018a0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10f      	bne.n	80018c8 <sths34pf80_avg_tobject_num_set+0x42>
  {
    avg_trim.avg_tmos = ((uint8_t)val & 0x7U);
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	7a3b      	ldrb	r3, [r7, #8]
 80018b2:	f362 0302 	bfi	r3, r2, #0, #3
 80018b6:	723b      	strb	r3, [r7, #8]
    ret = sths34pf80_write_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 80018b8:	f107 0208 	add.w	r2, r7, #8
 80018bc:	2301      	movs	r3, #1
 80018be:	2110      	movs	r1, #16
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ffb1 	bl	8001828 <sths34pf80_write_reg>
 80018c6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80018c8:	68fb      	ldr	r3, [r7, #12]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <sths34pf80_avg_tambient_num_set>:
  * @param  val      AVG_T_8, AVG_T_4, AVG_T_2, AVG_T_1,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_avg_tambient_num_set(const stmdev_ctx_t *ctx, sths34pf80_avg_tambient_num_t val)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	70fb      	strb	r3, [r7, #3]
  sths34pf80_avg_trim_t avg_trim;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 80018de:	f107 0208 	add.w	r2, r7, #8
 80018e2:	2301      	movs	r3, #1
 80018e4:	2110      	movs	r1, #16
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff80 	bl	80017ec <sths34pf80_read_reg>
 80018ec:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10f      	bne.n	8001914 <sths34pf80_avg_tambient_num_set+0x42>
  {
    avg_trim.avg_t = ((uint8_t)val & 0x3U);
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	7a3b      	ldrb	r3, [r7, #8]
 80018fe:	f362 1305 	bfi	r3, r2, #4, #2
 8001902:	723b      	strb	r3, [r7, #8]
    ret = sths34pf80_write_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 8001904:	f107 0208 	add.w	r2, r7, #8
 8001908:	2301      	movs	r3, #1
 800190a:	2110      	movs	r1, #16
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff8b 	bl	8001828 <sths34pf80_write_reg>
 8001912:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001914:	68fb      	ldr	r3, [r7, #12]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <sths34pf80_safe_power_down>:
  * @param  ctrl1    Pointer to CTRL1 register
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
static int32_t sths34pf80_safe_power_down(const stmdev_ctx_t *ctx, sths34pf80_ctrl1_t *ctrl1)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
  sths34pf80_func_status_t func_status;
  sths34pf80_drdy_status_t status;
  int32_t ret;

  /* if sensor is already in power-down then do nothing */
  if (ctrl1->odr == 0U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <sths34pf80_safe_power_down+0x1c>
  {
    return 0;
 8001936:	2300      	movs	r3, #0
 8001938:	e048      	b.n	80019cc <sths34pf80_safe_power_down+0xae>
  }

  /* reset the DRDY bit */
  ret = sths34pf80_read_reg(ctx, STHS34PF80_FUNC_STATUS, (uint8_t *)&func_status, 1);
 800193a:	f107 0210 	add.w	r2, r7, #16
 800193e:	2301      	movs	r3, #1
 8001940:	2125      	movs	r1, #37	@ 0x25
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ff52 	bl	80017ec <sths34pf80_read_reg>
 8001948:	6178      	str	r0, [r7, #20]

  /* wait DRDY bit go to '1'. Maximum wait may be up to 4 sec (0.25 Hz) */
  uint16_t retry = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	827b      	strh	r3, [r7, #18]
  do
  {
    ret += sths34pf80_drdy_status_get(ctx, &status);
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	4619      	mov	r1, r3
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f911 	bl	8001b7c <sths34pf80_drdy_status_get>
 800195a:	4602      	mov	r2, r0
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	4413      	add	r3, r2
 8001960:	617b      	str	r3, [r7, #20]
    ctx->mdelay(1);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2001      	movs	r0, #1
 8001968:	4798      	blx	r3
  } while (status.drdy == 0U && retry++ < 4000U);
 800196a:	7b3b      	ldrb	r3, [r7, #12]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d105      	bne.n	8001982 <sths34pf80_safe_power_down+0x64>
 8001976:	8a7b      	ldrh	r3, [r7, #18]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	827a      	strh	r2, [r7, #18]
 800197c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001980:	d3e5      	bcc.n	800194e <sths34pf80_safe_power_down+0x30>

  if (ret != 0 || retry >= 4000U)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d103      	bne.n	8001990 <sths34pf80_safe_power_down+0x72>
 8001988:	8a7b      	ldrh	r3, [r7, #18]
 800198a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800198e:	d302      	bcc.n	8001996 <sths34pf80_safe_power_down+0x78>
  {
    return -1;
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
 8001994:	e01a      	b.n	80019cc <sths34pf80_safe_power_down+0xae>
  };

  /* perform power-down */
  ctrl1->odr = 0U;
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	7813      	ldrb	r3, [r2, #0]
 800199a:	f023 030f 	bic.w	r3, r3, #15
 800199e:	7013      	strb	r3, [r2, #0]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)ctrl1, 1);
 80019a0:	2301      	movs	r3, #1
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	2120      	movs	r1, #32
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff3e 	bl	8001828 <sths34pf80_write_reg>
 80019ac:	4602      	mov	r2, r0
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	4413      	add	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]

  /* reset the DRDY bit */
  ret += sths34pf80_read_reg(ctx, STHS34PF80_FUNC_STATUS, (uint8_t *)&func_status, 1);
 80019b4:	f107 0210 	add.w	r2, r7, #16
 80019b8:	2301      	movs	r3, #1
 80019ba:	2125      	movs	r1, #37	@ 0x25
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff15 	bl	80017ec <sths34pf80_read_reg>
 80019c2:	4602      	mov	r2, r0
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	4413      	add	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]

  return ret;
 80019ca:	697b      	ldr	r3, [r7, #20]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <sths34pf80_odr_safe_set>:
  *
  */
static int32_t sths34pf80_odr_safe_set(const stmdev_ctx_t *ctx,
                                       sths34pf80_ctrl1_t *ctrl1,
                                       uint8_t odr_new)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	4613      	mov	r3, r2
 80019e0:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  /* perform power-down transition in a safe way. */
  ret = sths34pf80_safe_power_down(ctx, ctrl1);
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff ff9a 	bl	800191e <sths34pf80_safe_power_down>
 80019ea:	6178      	str	r0, [r7, #20]

  if (odr_new > 0U)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d019      	beq.n	8001a26 <sths34pf80_odr_safe_set+0x52>
  {
    /*
     * Do a clean reset algo procedure everytime odr is changed to an
     * operative state.
     */
    ret += sths34pf80_reset_algo_bit_set(ctx);
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 fc68 	bl	80022c8 <sths34pf80_reset_algo_bit_set>
 80019f8:	4602      	mov	r2, r0
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	4413      	add	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]

    /* set new odr */
    ctrl1->odr = (odr_new & 0xfU);
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	b2d9      	uxtb	r1, r3
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	7813      	ldrb	r3, [r2, #0]
 8001a0c:	f361 0303 	bfi	r3, r1, #0, #4
 8001a10:	7013      	strb	r3, [r2, #0]
    ret += sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)ctrl1, 1);
 8001a12:	2301      	movs	r3, #1
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	2120      	movs	r1, #32
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7ff ff05 	bl	8001828 <sths34pf80_write_reg>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001a26:	697b      	ldr	r3, [r7, #20]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <sths34pf80_odr_set>:
  * @param  val      ODR_OFF, ODR_AT_0Hz25, ODR_AT_0Hz50, ODR_1Hz, ODR_2Hz, ODR_4Hz, ODR_8Hz, ODR_15Hz, ODR_30Hz,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_odr_set(const stmdev_ctx_t *ctx, sths34pf80_odr_t val)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl1_t ctrl1;
  sths34pf80_avg_trim_t avg_trim;
  sths34pf80_odr_t max_odr = STHS34PF80_ODR_AT_30Hz;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	75fb      	strb	r3, [r7, #23]
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8001a40:	f107 020c 	add.w	r2, r7, #12
 8001a44:	2301      	movs	r3, #1
 8001a46:	2120      	movs	r1, #32
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff fecf 	bl	80017ec <sths34pf80_read_reg>
 8001a4e:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d12e      	bne.n	8001ab4 <sths34pf80_odr_set+0x84>
  {
    ret = sths34pf80_read_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 8001a56:	f107 0208 	add.w	r2, r7, #8
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fec4 	bl	80017ec <sths34pf80_read_reg>
 8001a64:	6138      	str	r0, [r7, #16]

    switch (avg_trim.avg_tmos)
 8001a66:	7a3b      	ldrb	r3, [r7, #8]
 8001a68:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	3b03      	subs	r3, #3
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d80d      	bhi.n	8001a90 <sths34pf80_odr_set+0x60>
 8001a74:	a201      	add	r2, pc, #4	@ (adr r2, 8001a7c <sths34pf80_odr_set+0x4c>)
 8001a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7a:	bf00      	nop
 8001a7c:	08001a97 	.word	0x08001a97
 8001a80:	08001a9d 	.word	0x08001a9d
 8001a84:	08001aa3 	.word	0x08001aa3
 8001a88:	08001aa9 	.word	0x08001aa9
 8001a8c:	08001aaf 	.word	0x08001aaf
    {
      default:
      case STHS34PF80_AVG_TMOS_2:
      case STHS34PF80_AVG_TMOS_8:
      case STHS34PF80_AVG_TMOS_32:
        max_odr = STHS34PF80_ODR_AT_30Hz;
 8001a90:	2308      	movs	r3, #8
 8001a92:	75fb      	strb	r3, [r7, #23]
        break;
 8001a94:	e00e      	b.n	8001ab4 <sths34pf80_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_128:
        max_odr = STHS34PF80_ODR_AT_8Hz;
 8001a96:	2306      	movs	r3, #6
 8001a98:	75fb      	strb	r3, [r7, #23]
        break;
 8001a9a:	e00b      	b.n	8001ab4 <sths34pf80_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_256:
        max_odr = STHS34PF80_ODR_AT_4Hz;
 8001a9c:	2305      	movs	r3, #5
 8001a9e:	75fb      	strb	r3, [r7, #23]
        break;
 8001aa0:	e008      	b.n	8001ab4 <sths34pf80_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_512:
        max_odr = STHS34PF80_ODR_AT_2Hz;
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	75fb      	strb	r3, [r7, #23]
        break;
 8001aa6:	e005      	b.n	8001ab4 <sths34pf80_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_1024:
        max_odr = STHS34PF80_ODR_AT_1Hz;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	75fb      	strb	r3, [r7, #23]
        break;
 8001aac:	e002      	b.n	8001ab4 <sths34pf80_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_2048:
        max_odr = STHS34PF80_ODR_AT_0Hz50;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	75fb      	strb	r3, [r7, #23]
        break;
 8001ab2:	bf00      	nop
    }
  }

  if (ret == 0)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10e      	bne.n	8001ad8 <sths34pf80_odr_set+0xa8>
  {
    if (val > max_odr)
 8001aba:	78fa      	ldrb	r2, [r7, #3]
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d902      	bls.n	8001ac8 <sths34pf80_odr_set+0x98>
    {
      return -1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	e008      	b.n	8001ada <sths34pf80_odr_set+0xaa>
    }

    ret = sths34pf80_odr_safe_set(ctx, &ctrl1, (uint8_t)val);
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff7f 	bl	80019d4 <sths34pf80_odr_safe_set>
 8001ad6:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8001ad8:	693b      	ldr	r3, [r7, #16]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop

08001ae4 <sths34pf80_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl1_t ctrl1;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8001af0:	f107 0208 	add.w	r2, r7, #8
 8001af4:	2301      	movs	r3, #1
 8001af6:	2120      	movs	r1, #32
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff fe77 	bl	80017ec <sths34pf80_read_reg>
 8001afe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10f      	bne.n	8001b26 <sths34pf80_block_data_update_set+0x42>
  {
    ctrl1.bdu = val;
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	7a3b      	ldrb	r3, [r7, #8]
 8001b10:	f362 1304 	bfi	r3, r2, #4, #1
 8001b14:	723b      	strb	r3, [r7, #8]
    ret = sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8001b16:	f107 0208 	add.w	r2, r7, #8
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	2120      	movs	r1, #32
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fe82 	bl	8001828 <sths34pf80_write_reg>
 8001b24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <sths34pf80_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, STRED_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_mem_bank_set(const stmdev_ctx_t *ctx, sths34pf80_mem_bank_t val)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl2_t ctrl2;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL2, (uint8_t *)&ctrl2, 1);
 8001b3c:	f107 0208 	add.w	r2, r7, #8
 8001b40:	2301      	movs	r3, #1
 8001b42:	2121      	movs	r1, #33	@ 0x21
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff fe51 	bl	80017ec <sths34pf80_read_reg>
 8001b4a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10f      	bne.n	8001b72 <sths34pf80_mem_bank_set+0x42>
  {
    ctrl2.func_cfg_access = ((uint8_t)val & 0x1U);
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	7a3b      	ldrb	r3, [r7, #8]
 8001b5c:	f362 1304 	bfi	r3, r2, #4, #1
 8001b60:	723b      	strb	r3, [r7, #8]
    ret = sths34pf80_write_reg(ctx, STHS34PF80_CTRL2, (uint8_t *)&ctrl2, 1);
 8001b62:	f107 0208 	add.w	r2, r7, #8
 8001b66:	2301      	movs	r3, #1
 8001b68:	2121      	movs	r1, #33	@ 0x21
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fe5c 	bl	8001828 <sths34pf80_write_reg>
 8001b70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <sths34pf80_drdy_status_get>:
  * @param  val      status of drdy bit (TAMB, TOBJ, TAMB_SHOCK, TPRESENCE, TMOTION).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_drdy_status_get(const stmdev_ctx_t *ctx, sths34pf80_drdy_status_t *val)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  sths34pf80_status_t status;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_STATUS, (uint8_t *)&status, 1);
 8001b86:	f107 0208 	add.w	r2, r7, #8
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	2123      	movs	r1, #35	@ 0x23
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fe2c 	bl	80017ec <sths34pf80_read_reg>
 8001b94:	60f8      	str	r0, [r7, #12]

  val->drdy = status.drdy;
 8001b96:	7a3b      	ldrb	r3, [r7, #8]
 8001b98:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001b9c:	b2d9      	uxtb	r1, r3
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	7813      	ldrb	r3, [r2, #0]
 8001ba2:	f361 0300 	bfi	r3, r1, #0, #1
 8001ba6:	7013      	strb	r3, [r2, #0]

  return ret;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <sths34pf80_func_status_get>:
  * @param  val      status of internal functions.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_func_status_get(const stmdev_ctx_t *ctx, sths34pf80_func_status_t *val)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
  sths34pf80_func_status_t func_status;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_FUNC_STATUS, (uint8_t *)&func_status, 1);
 8001bbc:	f107 0208 	add.w	r2, r7, #8
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	2125      	movs	r1, #37	@ 0x25
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff fe11 	bl	80017ec <sths34pf80_read_reg>
 8001bca:	60f8      	str	r0, [r7, #12]

  val->tamb_shock_flag = func_status.tamb_shock_flag;
 8001bcc:	7a3b      	ldrb	r3, [r7, #8]
 8001bce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001bd2:	b2d9      	uxtb	r1, r3
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	7813      	ldrb	r3, [r2, #0]
 8001bd8:	f361 0300 	bfi	r3, r1, #0, #1
 8001bdc:	7013      	strb	r3, [r2, #0]
  val->mot_flag = func_status.mot_flag;
 8001bde:	7a3b      	ldrb	r3, [r7, #8]
 8001be0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001be4:	b2d9      	uxtb	r1, r3
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	7813      	ldrb	r3, [r2, #0]
 8001bea:	f361 0341 	bfi	r3, r1, #1, #1
 8001bee:	7013      	strb	r3, [r2, #0]
  val->pres_flag = func_status.pres_flag;
 8001bf0:	7a3b      	ldrb	r3, [r7, #8]
 8001bf2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001bf6:	b2d9      	uxtb	r1, r3
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	7813      	ldrb	r3, [r2, #0]
 8001bfc:	f361 0382 	bfi	r3, r1, #2, #1
 8001c00:	7013      	strb	r3, [r2, #0]

  return ret;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <sths34pf80_tobject_raw_get>:
  * @param  val      Object temperature output register.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tobject_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_TOBJECT_L, &buff[0], 2);
 8001c16:	f107 0208 	add.w	r2, r7, #8
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	2126      	movs	r1, #38	@ 0x26
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fde4 	bl	80017ec <sths34pf80_read_reg>
 8001c24:	60f8      	str	r0, [r7, #12]

  *val = (int16_t)buff[1];
 8001c26:	7a7b      	ldrb	r3, [r7, #9]
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	7a3a      	ldrb	r2, [r7, #8]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	b21a      	sxth	r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	801a      	strh	r2, [r3, #0]

  return ret;
 8001c46:	68fb      	ldr	r3, [r7, #12]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <sths34pf80_tambient_raw_get>:
  * @param  val      Ambient temperature output register.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tambient_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_TAMBIENT_L, &buff[0], 2);
 8001c5a:	f107 0208 	add.w	r2, r7, #8
 8001c5e:	2302      	movs	r3, #2
 8001c60:	2128      	movs	r1, #40	@ 0x28
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fdc2 	bl	80017ec <sths34pf80_read_reg>
 8001c68:	60f8      	str	r0, [r7, #12]

  *val = (int16_t)buff[1];
 8001c6a:	7a7b      	ldrb	r3, [r7, #9]
 8001c6c:	b21a      	sxth	r2, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	7a3a      	ldrb	r2, [r7, #8]
 8001c80:	4413      	add	r3, r2
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	b21a      	sxth	r2, r3
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	801a      	strh	r2, [r3, #0]

  return ret;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <sths34pf80_lpf_m_bandwidth_get>:
  * @param  val      LPF_ODR_DIV_9, LPF_ODR_DIV_20, LPF_ODR_DIV_50, LPF_ODR_DIV_100, LPF_ODR_DIV_200, LPF_ODR_DIV_400, LPF_ODR_DIV_800,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_lpf_m_bandwidth_get(const stmdev_ctx_t *ctx, sths34pf80_lpf_bandwidth_t *val)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  sths34pf80_lpf1_t lpf1;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_LPF1, (uint8_t *)&lpf1, 1);
 8001c9e:	f107 0208 	add.w	r2, r7, #8
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	210c      	movs	r1, #12
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fda0 	bl	80017ec <sths34pf80_read_reg>
 8001cac:	60f8      	str	r0, [r7, #12]

  switch ((lpf1.lpf_m))
 8001cae:	7a3b      	ldrb	r3, [r7, #8]
 8001cb0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d82c      	bhi.n	8001d14 <sths34pf80_lpf_m_bandwidth_get+0x80>
 8001cba:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc0 <sths34pf80_lpf_m_bandwidth_get+0x2c>)
 8001cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc0:	08001cdd 	.word	0x08001cdd
 8001cc4:	08001ce5 	.word	0x08001ce5
 8001cc8:	08001ced 	.word	0x08001ced
 8001ccc:	08001cf5 	.word	0x08001cf5
 8001cd0:	08001cfd 	.word	0x08001cfd
 8001cd4:	08001d05 	.word	0x08001d05
 8001cd8:	08001d0d 	.word	0x08001d0d
  {
    case STHS34PF80_LPF_ODR_DIV_9:
      *val = STHS34PF80_LPF_ODR_DIV_9;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
      break;
 8001ce2:	e01b      	b.n	8001d1c <sths34pf80_lpf_m_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_20:
      *val = STHS34PF80_LPF_ODR_DIV_20;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
      break;
 8001cea:	e017      	b.n	8001d1c <sths34pf80_lpf_m_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_50:
      *val = STHS34PF80_LPF_ODR_DIV_50;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	701a      	strb	r2, [r3, #0]
      break;
 8001cf2:	e013      	b.n	8001d1c <sths34pf80_lpf_m_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_100:
      *val = STHS34PF80_LPF_ODR_DIV_100;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	701a      	strb	r2, [r3, #0]
      break;
 8001cfa:	e00f      	b.n	8001d1c <sths34pf80_lpf_m_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_200:
      *val = STHS34PF80_LPF_ODR_DIV_200;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2204      	movs	r2, #4
 8001d00:	701a      	strb	r2, [r3, #0]
      break;
 8001d02:	e00b      	b.n	8001d1c <sths34pf80_lpf_m_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_400:
      *val = STHS34PF80_LPF_ODR_DIV_400;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2205      	movs	r2, #5
 8001d08:	701a      	strb	r2, [r3, #0]
      break;
 8001d0a:	e007      	b.n	8001d1c <sths34pf80_lpf_m_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_800:
      *val = STHS34PF80_LPF_ODR_DIV_800;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2206      	movs	r2, #6
 8001d10:	701a      	strb	r2, [r3, #0]
      break;
 8001d12:	e003      	b.n	8001d1c <sths34pf80_lpf_m_bandwidth_get+0x88>

    default:
      *val = STHS34PF80_LPF_ODR_DIV_9;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
      break;
 8001d1a:	bf00      	nop
  }
  return ret;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop

08001d28 <sths34pf80_lpf_p_m_bandwidth_get>:
  * @param  val      LPF_ODR_DIV_9, LPF_ODR_DIV_20, LPF_ODR_DIV_50, LPF_ODR_DIV_100, LPF_ODR_DIV_200, LPF_ODR_DIV_400, LPF_ODR_DIV_800,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_lpf_p_m_bandwidth_get(const stmdev_ctx_t *ctx, sths34pf80_lpf_bandwidth_t *val)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  sths34pf80_lpf1_t lpf1;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_LPF1, (uint8_t *)&lpf1, 1);
 8001d32:	f107 0208 	add.w	r2, r7, #8
 8001d36:	2301      	movs	r3, #1
 8001d38:	210c      	movs	r1, #12
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fd56 	bl	80017ec <sths34pf80_read_reg>
 8001d40:	60f8      	str	r0, [r7, #12]

  switch ((lpf1.lpf_p_m))
 8001d42:	7a3b      	ldrb	r3, [r7, #8]
 8001d44:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d82c      	bhi.n	8001da8 <sths34pf80_lpf_p_m_bandwidth_get+0x80>
 8001d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d54 <sths34pf80_lpf_p_m_bandwidth_get+0x2c>)
 8001d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d54:	08001d71 	.word	0x08001d71
 8001d58:	08001d79 	.word	0x08001d79
 8001d5c:	08001d81 	.word	0x08001d81
 8001d60:	08001d89 	.word	0x08001d89
 8001d64:	08001d91 	.word	0x08001d91
 8001d68:	08001d99 	.word	0x08001d99
 8001d6c:	08001da1 	.word	0x08001da1
  {
    case STHS34PF80_LPF_ODR_DIV_9:
      *val = STHS34PF80_LPF_ODR_DIV_9;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
      break;
 8001d76:	e01b      	b.n	8001db0 <sths34pf80_lpf_p_m_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_20:
      *val = STHS34PF80_LPF_ODR_DIV_20;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
      break;
 8001d7e:	e017      	b.n	8001db0 <sths34pf80_lpf_p_m_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_50:
      *val = STHS34PF80_LPF_ODR_DIV_50;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2202      	movs	r2, #2
 8001d84:	701a      	strb	r2, [r3, #0]
      break;
 8001d86:	e013      	b.n	8001db0 <sths34pf80_lpf_p_m_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_100:
      *val = STHS34PF80_LPF_ODR_DIV_100;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	701a      	strb	r2, [r3, #0]
      break;
 8001d8e:	e00f      	b.n	8001db0 <sths34pf80_lpf_p_m_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_200:
      *val = STHS34PF80_LPF_ODR_DIV_200;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2204      	movs	r2, #4
 8001d94:	701a      	strb	r2, [r3, #0]
      break;
 8001d96:	e00b      	b.n	8001db0 <sths34pf80_lpf_p_m_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_400:
      *val = STHS34PF80_LPF_ODR_DIV_400;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2205      	movs	r2, #5
 8001d9c:	701a      	strb	r2, [r3, #0]
      break;
 8001d9e:	e007      	b.n	8001db0 <sths34pf80_lpf_p_m_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_800:
      *val = STHS34PF80_LPF_ODR_DIV_800;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2206      	movs	r2, #6
 8001da4:	701a      	strb	r2, [r3, #0]
      break;
 8001da6:	e003      	b.n	8001db0 <sths34pf80_lpf_p_m_bandwidth_get+0x88>

    default:
      *val = STHS34PF80_LPF_ODR_DIV_9;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
      break;
 8001dae:	bf00      	nop
  }
  return ret;
 8001db0:	68fb      	ldr	r3, [r7, #12]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop

08001dbc <sths34pf80_lpf_a_t_bandwidth_get>:
  * @param  val      LPF_ODR_DIV_9, LPF_ODR_DIV_20, LPF_ODR_DIV_50, LPF_ODR_DIV_100, LPF_ODR_DIV_200, LPF_ODR_DIV_400, LPF_ODR_DIV_800,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_lpf_a_t_bandwidth_get(const stmdev_ctx_t *ctx, sths34pf80_lpf_bandwidth_t *val)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  sths34pf80_lpf2_t lpf2;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_LPF2, (uint8_t *)&lpf2, 1);
 8001dc6:	f107 0208 	add.w	r2, r7, #8
 8001dca:	2301      	movs	r3, #1
 8001dcc:	210d      	movs	r1, #13
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff fd0c 	bl	80017ec <sths34pf80_read_reg>
 8001dd4:	60f8      	str	r0, [r7, #12]

  switch ((lpf2.lpf_a_t))
 8001dd6:	7a3b      	ldrb	r3, [r7, #8]
 8001dd8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d82c      	bhi.n	8001e3c <sths34pf80_lpf_a_t_bandwidth_get+0x80>
 8001de2:	a201      	add	r2, pc, #4	@ (adr r2, 8001de8 <sths34pf80_lpf_a_t_bandwidth_get+0x2c>)
 8001de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de8:	08001e05 	.word	0x08001e05
 8001dec:	08001e0d 	.word	0x08001e0d
 8001df0:	08001e15 	.word	0x08001e15
 8001df4:	08001e1d 	.word	0x08001e1d
 8001df8:	08001e25 	.word	0x08001e25
 8001dfc:	08001e2d 	.word	0x08001e2d
 8001e00:	08001e35 	.word	0x08001e35
  {
    case STHS34PF80_LPF_ODR_DIV_9:
      *val = STHS34PF80_LPF_ODR_DIV_9;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
      break;
 8001e0a:	e01b      	b.n	8001e44 <sths34pf80_lpf_a_t_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_20:
      *val = STHS34PF80_LPF_ODR_DIV_20;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
      break;
 8001e12:	e017      	b.n	8001e44 <sths34pf80_lpf_a_t_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_50:
      *val = STHS34PF80_LPF_ODR_DIV_50;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	2202      	movs	r2, #2
 8001e18:	701a      	strb	r2, [r3, #0]
      break;
 8001e1a:	e013      	b.n	8001e44 <sths34pf80_lpf_a_t_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_100:
      *val = STHS34PF80_LPF_ODR_DIV_100;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2203      	movs	r2, #3
 8001e20:	701a      	strb	r2, [r3, #0]
      break;
 8001e22:	e00f      	b.n	8001e44 <sths34pf80_lpf_a_t_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_200:
      *val = STHS34PF80_LPF_ODR_DIV_200;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2204      	movs	r2, #4
 8001e28:	701a      	strb	r2, [r3, #0]
      break;
 8001e2a:	e00b      	b.n	8001e44 <sths34pf80_lpf_a_t_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_400:
      *val = STHS34PF80_LPF_ODR_DIV_400;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2205      	movs	r2, #5
 8001e30:	701a      	strb	r2, [r3, #0]
      break;
 8001e32:	e007      	b.n	8001e44 <sths34pf80_lpf_a_t_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_800:
      *val = STHS34PF80_LPF_ODR_DIV_800;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	2206      	movs	r2, #6
 8001e38:	701a      	strb	r2, [r3, #0]
      break;
 8001e3a:	e003      	b.n	8001e44 <sths34pf80_lpf_a_t_bandwidth_get+0x88>

    default:
      *val = STHS34PF80_LPF_ODR_DIV_9;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
      break;
 8001e42:	bf00      	nop
  }
  return ret;
 8001e44:	68fb      	ldr	r3, [r7, #12]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop

08001e50 <sths34pf80_lpf_p_bandwidth_get>:
  * @param  val      LPF_ODR_DIV_9, LPF_ODR_DIV_20, LPF_ODR_DIV_50, LPF_ODR_DIV_100, LPF_ODR_DIV_200, LPF_ODR_DIV_400, LPF_ODR_DIV_800,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_lpf_p_bandwidth_get(const stmdev_ctx_t *ctx, sths34pf80_lpf_bandwidth_t *val)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  sths34pf80_lpf2_t lpf2;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_LPF2, (uint8_t *)&lpf2, 1);
 8001e5a:	f107 0208 	add.w	r2, r7, #8
 8001e5e:	2301      	movs	r3, #1
 8001e60:	210d      	movs	r1, #13
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fcc2 	bl	80017ec <sths34pf80_read_reg>
 8001e68:	60f8      	str	r0, [r7, #12]

  switch ((lpf2.lpf_p))
 8001e6a:	7a3b      	ldrb	r3, [r7, #8]
 8001e6c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d82c      	bhi.n	8001ed0 <sths34pf80_lpf_p_bandwidth_get+0x80>
 8001e76:	a201      	add	r2, pc, #4	@ (adr r2, 8001e7c <sths34pf80_lpf_p_bandwidth_get+0x2c>)
 8001e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7c:	08001e99 	.word	0x08001e99
 8001e80:	08001ea1 	.word	0x08001ea1
 8001e84:	08001ea9 	.word	0x08001ea9
 8001e88:	08001eb1 	.word	0x08001eb1
 8001e8c:	08001eb9 	.word	0x08001eb9
 8001e90:	08001ec1 	.word	0x08001ec1
 8001e94:	08001ec9 	.word	0x08001ec9
  {
    case STHS34PF80_LPF_ODR_DIV_9:
      *val = STHS34PF80_LPF_ODR_DIV_9;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
      break;
 8001e9e:	e01b      	b.n	8001ed8 <sths34pf80_lpf_p_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_20:
      *val = STHS34PF80_LPF_ODR_DIV_20;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
      break;
 8001ea6:	e017      	b.n	8001ed8 <sths34pf80_lpf_p_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_50:
      *val = STHS34PF80_LPF_ODR_DIV_50;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	701a      	strb	r2, [r3, #0]
      break;
 8001eae:	e013      	b.n	8001ed8 <sths34pf80_lpf_p_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_100:
      *val = STHS34PF80_LPF_ODR_DIV_100;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	701a      	strb	r2, [r3, #0]
      break;
 8001eb6:	e00f      	b.n	8001ed8 <sths34pf80_lpf_p_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_200:
      *val = STHS34PF80_LPF_ODR_DIV_200;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	701a      	strb	r2, [r3, #0]
      break;
 8001ebe:	e00b      	b.n	8001ed8 <sths34pf80_lpf_p_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_400:
      *val = STHS34PF80_LPF_ODR_DIV_400;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2205      	movs	r2, #5
 8001ec4:	701a      	strb	r2, [r3, #0]
      break;
 8001ec6:	e007      	b.n	8001ed8 <sths34pf80_lpf_p_bandwidth_get+0x88>

    case STHS34PF80_LPF_ODR_DIV_800:
      *val = STHS34PF80_LPF_ODR_DIV_800;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2206      	movs	r2, #6
 8001ecc:	701a      	strb	r2, [r3, #0]
      break;
 8001ece:	e003      	b.n	8001ed8 <sths34pf80_lpf_p_bandwidth_get+0x88>

    default:
      *val = STHS34PF80_LPF_ODR_DIV_9;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
      break;
 8001ed6:	bf00      	nop
  }
  return ret;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop

08001ee4 <sths34pf80_route_int_set>:
  * @param  val      INT_HIZ, INT_DRDY, INT_OR,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_route_int_set(const stmdev_ctx_t *ctx, sths34pf80_route_int_t val)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl3_t ctrl3;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL3, (uint8_t *)&ctrl3, 1);
 8001ef0:	f107 0208 	add.w	r2, r7, #8
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	2122      	movs	r1, #34	@ 0x22
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff fc77 	bl	80017ec <sths34pf80_read_reg>
 8001efe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d116      	bne.n	8001f34 <sths34pf80_route_int_set+0x50>
  {
    ctrl3.ien = ((uint8_t)val & 0x3U);
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	7a3b      	ldrb	r3, [r7, #8]
 8001f10:	f362 0301 	bfi	r3, r2, #0, #2
 8001f14:	723b      	strb	r3, [r7, #8]
    if (val == STHS34PF80_INT_OR)
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d103      	bne.n	8001f24 <sths34pf80_route_int_set+0x40>
    {
      ctrl3.int_latched = 0; /* guarantee that latched is zero in INT_OR case */
 8001f1c:	7a3b      	ldrb	r3, [r7, #8]
 8001f1e:	f023 0304 	bic.w	r3, r3, #4
 8001f22:	723b      	strb	r3, [r7, #8]
    }
    ret = sths34pf80_write_reg(ctx, STHS34PF80_CTRL3, (uint8_t *)&ctrl3, 1);
 8001f24:	f107 0208 	add.w	r2, r7, #8
 8001f28:	2301      	movs	r3, #1
 8001f2a:	2122      	movs	r1, #34	@ 0x22
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff fc7b 	bl	8001828 <sths34pf80_write_reg>
 8001f32:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001f34:	68fb      	ldr	r3, [r7, #12]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <sths34pf80_int_or_set>:
  * @param  val      INT_NONE, INT_TSHOCK, INT_MOTION, INT_TSHOCK_MOTION, INT_PRESENCE, INT_TSHOCK_PRESENCE, INT_MOTION_PRESENCE, INT_ALL,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_int_or_set(const stmdev_ctx_t *ctx, sths34pf80_int_or_t val)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	460b      	mov	r3, r1
 8001f48:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl3_t ctrl3;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL3, (uint8_t *)&ctrl3, 1);
 8001f4a:	f107 0208 	add.w	r2, r7, #8
 8001f4e:	2301      	movs	r3, #1
 8001f50:	2122      	movs	r1, #34	@ 0x22
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff fc4a 	bl	80017ec <sths34pf80_read_reg>
 8001f58:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10f      	bne.n	8001f80 <sths34pf80_int_or_set+0x42>
  {
    ctrl3.int_msk = ((uint8_t)val & 0x7U);
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	7a3b      	ldrb	r3, [r7, #8]
 8001f6a:	f362 03c5 	bfi	r3, r2, #3, #3
 8001f6e:	723b      	strb	r3, [r7, #8]
    ret = sths34pf80_write_reg(ctx, STHS34PF80_CTRL3, (uint8_t *)&ctrl3, 1);
 8001f70:	f107 0208 	add.w	r2, r7, #8
 8001f74:	2301      	movs	r3, #1
 8001f76:	2122      	movs	r1, #34	@ 0x22
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fc55 	bl	8001828 <sths34pf80_write_reg>
 8001f7e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001f80:	68fb      	ldr	r3, [r7, #12]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <sths34pf80_func_cfg_write>:
  * @param  len      embedded register data len
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_func_cfg_write(const stmdev_ctx_t *ctx, uint8_t addr, uint8_t *data, uint8_t len)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b088      	sub	sp, #32
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	461a      	mov	r2, r3
 8001f96:	460b      	mov	r3, r1
 8001f98:	72fb      	strb	r3, [r7, #11]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	72bb      	strb	r3, [r7, #10]
  sths34pf80_ctrl1_t ctrl1;
  uint8_t odr;
  sths34pf80_page_rw_t page_rw = {0};
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	753b      	strb	r3, [r7, #20]
  int32_t ret;
  uint8_t i;

  /* Save current odr and enter PD mode */
  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8001fa2:	f107 0218 	add.w	r2, r7, #24
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	2120      	movs	r1, #32
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f7ff fc1e 	bl	80017ec <sths34pf80_read_reg>
 8001fb0:	61f8      	str	r0, [r7, #28]
  odr = ctrl1.odr;
 8001fb2:	7e3b      	ldrb	r3, [r7, #24]
 8001fb4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	76bb      	strb	r3, [r7, #26]
  ret += sths34pf80_odr_safe_set(ctx, &ctrl1, 0);
 8001fbc:	f107 0318 	add.w	r3, r7, #24
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f7ff fd05 	bl	80019d4 <sths34pf80_odr_safe_set>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	4413      	add	r3, r2
 8001fd0:	61fb      	str	r3, [r7, #28]

  /* Enable access to embedded functions register */
  ret += sths34pf80_mem_bank_set(ctx, STHS34PF80_EMBED_FUNC_MEM_BANK);
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f7ff fdab 	bl	8001b30 <sths34pf80_mem_bank_set>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	4413      	add	r3, r2
 8001fe0:	61fb      	str	r3, [r7, #28]

  /* Enable write mode */
  page_rw.func_cfg_write = 1;
 8001fe2:	7d3b      	ldrb	r3, [r7, #20]
 8001fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fe8:	753b      	strb	r3, [r7, #20]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_PAGE_RW, (uint8_t *)&page_rw, 1);
 8001fea:	f107 0214 	add.w	r2, r7, #20
 8001fee:	2301      	movs	r3, #1
 8001ff0:	2111      	movs	r1, #17
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff fc18 	bl	8001828 <sths34pf80_write_reg>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	61fb      	str	r3, [r7, #28]

  /* Select register address (it will autoincrement when writing) */
  ret += sths34pf80_write_reg(ctx, STHS34PF80_FUNC_CFG_ADDR, &addr, 1);
 8002000:	f107 020b 	add.w	r2, r7, #11
 8002004:	2301      	movs	r3, #1
 8002006:	2108      	movs	r1, #8
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f7ff fc0d 	bl	8001828 <sths34pf80_write_reg>
 800200e:	4602      	mov	r2, r0
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	4413      	add	r3, r2
 8002014:	61fb      	str	r3, [r7, #28]

  for (i = 0; i < len; i++)
 8002016:	2300      	movs	r3, #0
 8002018:	76fb      	strb	r3, [r7, #27]
 800201a:	e00e      	b.n	800203a <sths34pf80_func_cfg_write+0xb0>
  {
    /* Write data */
    ret += sths34pf80_write_reg(ctx, STHS34PF80_FUNC_CFG_DATA, &data[i], 1);
 800201c:	7efb      	ldrb	r3, [r7, #27]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	441a      	add	r2, r3
 8002022:	2301      	movs	r3, #1
 8002024:	2109      	movs	r1, #9
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f7ff fbfe 	bl	8001828 <sths34pf80_write_reg>
 800202c:	4602      	mov	r2, r0
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4413      	add	r3, r2
 8002032:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < len; i++)
 8002034:	7efb      	ldrb	r3, [r7, #27]
 8002036:	3301      	adds	r3, #1
 8002038:	76fb      	strb	r3, [r7, #27]
 800203a:	7efa      	ldrb	r2, [r7, #27]
 800203c:	7abb      	ldrb	r3, [r7, #10]
 800203e:	429a      	cmp	r2, r3
 8002040:	d3ec      	bcc.n	800201c <sths34pf80_func_cfg_write+0x92>
  }

  /* Disable write mode */
  page_rw.func_cfg_write = 0;
 8002042:	7d3b      	ldrb	r3, [r7, #20]
 8002044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002048:	753b      	strb	r3, [r7, #20]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_PAGE_RW, (uint8_t *)&page_rw, 1);
 800204a:	f107 0214 	add.w	r2, r7, #20
 800204e:	2301      	movs	r3, #1
 8002050:	2111      	movs	r1, #17
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f7ff fbe8 	bl	8001828 <sths34pf80_write_reg>
 8002058:	4602      	mov	r2, r0
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	4413      	add	r3, r2
 800205e:	61fb      	str	r3, [r7, #28]

  /* Disable access to embedded functions register */
  ret += sths34pf80_mem_bank_set(ctx, STHS34PF80_MAIN_MEM_BANK);
 8002060:	2100      	movs	r1, #0
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff fd64 	bl	8001b30 <sths34pf80_mem_bank_set>
 8002068:	4602      	mov	r2, r0
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	4413      	add	r3, r2
 800206e:	61fb      	str	r3, [r7, #28]

  /* Set saved odr back */
  ret += sths34pf80_odr_safe_set(ctx, &ctrl1, odr);
 8002070:	7eba      	ldrb	r2, [r7, #26]
 8002072:	f107 0318 	add.w	r3, r7, #24
 8002076:	4619      	mov	r1, r3
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7ff fcab 	bl	80019d4 <sths34pf80_odr_safe_set>
 800207e:	4602      	mov	r2, r0
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	4413      	add	r3, r2
 8002084:	61fb      	str	r3, [r7, #28]

  return ret;
 8002086:	69fb      	ldr	r3, [r7, #28]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3720      	adds	r7, #32
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <sths34pf80_presence_threshold_set>:
  * @param  val      presence threshold level
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_presence_threshold_set(const stmdev_ctx_t *ctx, uint16_t val)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
  sths34pf80_ctrl1_t ctrl1;
  uint8_t odr;
  uint8_t buff[2];
  int32_t ret;

  if ((val & 0x8000U) != 0x0U)
 800209c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	da02      	bge.n	80020aa <sths34pf80_presence_threshold_set+0x1a>
  {
    /* threshold values are on 15 bits */
    return -1;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
 80020a8:	e03d      	b.n	8002126 <sths34pf80_presence_threshold_set+0x96>
  }

  /* Save current odr and enter PD mode */
  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 80020aa:	f107 0210 	add.w	r2, r7, #16
 80020ae:	2301      	movs	r3, #1
 80020b0:	2120      	movs	r1, #32
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fb9a 	bl	80017ec <sths34pf80_read_reg>
 80020b8:	6178      	str	r0, [r7, #20]
  odr = ctrl1.odr;
 80020ba:	7c3b      	ldrb	r3, [r7, #16]
 80020bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	74fb      	strb	r3, [r7, #19]
  ret += sths34pf80_odr_safe_set(ctx, &ctrl1, 0);
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	2200      	movs	r2, #0
 80020ca:	4619      	mov	r1, r3
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff fc81 	bl	80019d4 <sths34pf80_odr_safe_set>
 80020d2:	4602      	mov	r2, r0
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	4413      	add	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]

  buff[1] = (uint8_t)(val / 256U);
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	b29b      	uxth	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	737b      	strb	r3, [r7, #13]
  buff[0] = (uint8_t)(val - (buff[1] * 256U));
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	733b      	strb	r3, [r7, #12]
  ret += sths34pf80_func_cfg_write(ctx, STHS34PF80_PRESENCE_THS, &buff[0], 2);
 80020ea:	f107 020c 	add.w	r2, r7, #12
 80020ee:	2302      	movs	r3, #2
 80020f0:	2120      	movs	r1, #32
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ff49 	bl	8001f8a <sths34pf80_func_cfg_write>
 80020f8:	4602      	mov	r2, r0
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	4413      	add	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]

  ret += sths34pf80_reset_algo_bit_set(ctx);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f8e1 	bl	80022c8 <sths34pf80_reset_algo_bit_set>
 8002106:	4602      	mov	r2, r0
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	4413      	add	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

  /* Set saved odr back */
  ret += sths34pf80_odr_safe_set(ctx, &ctrl1, odr);
 800210e:	7cfa      	ldrb	r2, [r7, #19]
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	4619      	mov	r1, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fc5c 	bl	80019d4 <sths34pf80_odr_safe_set>
 800211c:	4602      	mov	r2, r0
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	4413      	add	r3, r2
 8002122:	617b      	str	r3, [r7, #20]

  return ret;
 8002124:	697b      	ldr	r3, [r7, #20]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <sths34pf80_motion_threshold_set>:
  * @param  val      motion threshold level
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_motion_threshold_set(const stmdev_ctx_t *ctx, uint16_t val)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	807b      	strh	r3, [r7, #2]
  sths34pf80_ctrl1_t ctrl1;
  uint8_t odr;
  uint8_t buff[2];
  int32_t ret;

  if ((val & 0x8000U) != 0x0U)
 800213a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800213e:	2b00      	cmp	r3, #0
 8002140:	da02      	bge.n	8002148 <sths34pf80_motion_threshold_set+0x1a>
  {
    /* threshold values are on 15 bits */
    return -1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	e03d      	b.n	80021c4 <sths34pf80_motion_threshold_set+0x96>
  }

  /* Save current odr and enter PD mode */
  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8002148:	f107 0210 	add.w	r2, r7, #16
 800214c:	2301      	movs	r3, #1
 800214e:	2120      	movs	r1, #32
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fb4b 	bl	80017ec <sths34pf80_read_reg>
 8002156:	6178      	str	r0, [r7, #20]
  odr = ctrl1.odr;
 8002158:	7c3b      	ldrb	r3, [r7, #16]
 800215a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800215e:	b2db      	uxtb	r3, r3
 8002160:	74fb      	strb	r3, [r7, #19]
  ret += sths34pf80_odr_safe_set(ctx, &ctrl1, 0);
 8002162:	f107 0310 	add.w	r3, r7, #16
 8002166:	2200      	movs	r2, #0
 8002168:	4619      	mov	r1, r3
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff fc32 	bl	80019d4 <sths34pf80_odr_safe_set>
 8002170:	4602      	mov	r2, r0
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	4413      	add	r3, r2
 8002176:	617b      	str	r3, [r7, #20]

  buff[1] = (uint8_t)(val / 256U);
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	b29b      	uxth	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	737b      	strb	r3, [r7, #13]
  buff[0] = (uint8_t)(val - (buff[1] * 256U));
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	733b      	strb	r3, [r7, #12]
  ret += sths34pf80_func_cfg_write(ctx, STHS34PF80_MOTION_THS, &buff[0], 2);
 8002188:	f107 020c 	add.w	r2, r7, #12
 800218c:	2302      	movs	r3, #2
 800218e:	2122      	movs	r1, #34	@ 0x22
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fefa 	bl	8001f8a <sths34pf80_func_cfg_write>
 8002196:	4602      	mov	r2, r0
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	4413      	add	r3, r2
 800219c:	617b      	str	r3, [r7, #20]

  ret += sths34pf80_reset_algo_bit_set(ctx);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f892 	bl	80022c8 <sths34pf80_reset_algo_bit_set>
 80021a4:	4602      	mov	r2, r0
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	4413      	add	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]

  /* Set saved odr back */
  ret += sths34pf80_odr_safe_set(ctx, &ctrl1, odr);
 80021ac:	7cfa      	ldrb	r2, [r7, #19]
 80021ae:	f107 0310 	add.w	r3, r7, #16
 80021b2:	4619      	mov	r1, r3
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff fc0d 	bl	80019d4 <sths34pf80_odr_safe_set>
 80021ba:	4602      	mov	r2, r0
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	4413      	add	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

  return ret;
 80021c2:	697b      	ldr	r3, [r7, #20]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <sths34pf80_motion_hysteresis_set>:
  * @param  val      Motion hysteresis value
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_motion_hysteresis_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl1_t ctrl1;
  uint8_t odr;
  int32_t ret;

  /* Save current odr and enter PD mode */
  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 80021d8:	f107 0208 	add.w	r2, r7, #8
 80021dc:	2301      	movs	r3, #1
 80021de:	2120      	movs	r1, #32
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fb03 	bl	80017ec <sths34pf80_read_reg>
 80021e6:	60f8      	str	r0, [r7, #12]
  odr = ctrl1.odr;
 80021e8:	7a3b      	ldrb	r3, [r7, #8]
 80021ea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	72fb      	strb	r3, [r7, #11]
  ret += sths34pf80_odr_safe_set(ctx, &ctrl1, 0);
 80021f2:	f107 0308 	add.w	r3, r7, #8
 80021f6:	2200      	movs	r2, #0
 80021f8:	4619      	mov	r1, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fbea 	bl	80019d4 <sths34pf80_odr_safe_set>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4413      	add	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

  ret += sths34pf80_func_cfg_write(ctx, STHS34PF80_HYST_MOTION, &val, 1);
 8002208:	1cfa      	adds	r2, r7, #3
 800220a:	2301      	movs	r3, #1
 800220c:	2126      	movs	r1, #38	@ 0x26
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff febb 	bl	8001f8a <sths34pf80_func_cfg_write>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4413      	add	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]

  ret += sths34pf80_reset_algo_bit_set(ctx);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f853 	bl	80022c8 <sths34pf80_reset_algo_bit_set>
 8002222:	4602      	mov	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  /* Set saved odr back */
  ret += sths34pf80_odr_safe_set(ctx, &ctrl1, odr);
 800222a:	7afa      	ldrb	r2, [r7, #11]
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff fbce 	bl	80019d4 <sths34pf80_odr_safe_set>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4413      	add	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]

  return ret;
 8002240:	68fb      	ldr	r3, [r7, #12]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <sths34pf80_presence_hysteresis_set>:
  * @param  val      Presence hysteresis value
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_presence_hysteresis_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b084      	sub	sp, #16
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	460b      	mov	r3, r1
 8002254:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl1_t ctrl1;
  uint8_t odr;
  int32_t ret;

  /* Save current odr and enter PD mode */
  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8002256:	f107 0208 	add.w	r2, r7, #8
 800225a:	2301      	movs	r3, #1
 800225c:	2120      	movs	r1, #32
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff fac4 	bl	80017ec <sths34pf80_read_reg>
 8002264:	60f8      	str	r0, [r7, #12]
  odr = ctrl1.odr;
 8002266:	7a3b      	ldrb	r3, [r7, #8]
 8002268:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800226c:	b2db      	uxtb	r3, r3
 800226e:	72fb      	strb	r3, [r7, #11]
  ret += sths34pf80_odr_safe_set(ctx, &ctrl1, 0);
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	2200      	movs	r2, #0
 8002276:	4619      	mov	r1, r3
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff fbab 	bl	80019d4 <sths34pf80_odr_safe_set>
 800227e:	4602      	mov	r2, r0
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  ret += sths34pf80_func_cfg_write(ctx, STHS34PF80_HYST_PRESENCE, &val, 1);
 8002286:	1cfa      	adds	r2, r7, #3
 8002288:	2301      	movs	r3, #1
 800228a:	2127      	movs	r1, #39	@ 0x27
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff fe7c 	bl	8001f8a <sths34pf80_func_cfg_write>
 8002292:	4602      	mov	r2, r0
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4413      	add	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  ret += sths34pf80_reset_algo_bit_set(ctx);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f814 	bl	80022c8 <sths34pf80_reset_algo_bit_set>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4413      	add	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Set saved odr back */
  ret += sths34pf80_odr_safe_set(ctx, &ctrl1, odr);
 80022a8:	7afa      	ldrb	r2, [r7, #11]
 80022aa:	f107 0308 	add.w	r3, r7, #8
 80022ae:	4619      	mov	r1, r3
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff fb8f 	bl	80019d4 <sths34pf80_odr_safe_set>
 80022b6:	4602      	mov	r2, r0
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]

  return ret;
 80022be:	68fb      	ldr	r3, [r7, #12]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <sths34pf80_reset_algo_bit_set>:

/*
 * Internal routine to reset algo bit
 */
static int32_t sths34pf80_reset_algo_bit_set(const stmdev_ctx_t *ctx)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  sths34pf80_page_rw_t page_rw = {0};
 80022d0:	2300      	movs	r3, #0
 80022d2:	743b      	strb	r3, [r7, #16]
  int32_t ret;

  /* Enable access to embedded functions register */
  ret = sths34pf80_mem_bank_set(ctx, STHS34PF80_EMBED_FUNC_MEM_BANK);
 80022d4:	2101      	movs	r1, #1
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fc2a 	bl	8001b30 <sths34pf80_mem_bank_set>
 80022dc:	6178      	str	r0, [r7, #20]

  /* Enable write mode */
  page_rw.func_cfg_write = 1;
 80022de:	7c3b      	ldrb	r3, [r7, #16]
 80022e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022e4:	743b      	strb	r3, [r7, #16]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_PAGE_RW, (uint8_t *)&page_rw, 1);
 80022e6:	f107 0210 	add.w	r2, r7, #16
 80022ea:	2301      	movs	r3, #1
 80022ec:	2111      	movs	r1, #17
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff fa9a 	bl	8001828 <sths34pf80_write_reg>
 80022f4:	4602      	mov	r2, r0
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	4413      	add	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

  /* Select register address (it will autoincrement when writing) */
  uint8_t addr = STHS34PF80_RESET_ALGO;
 80022fc:	232a      	movs	r3, #42	@ 0x2a
 80022fe:	73fb      	strb	r3, [r7, #15]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_FUNC_CFG_ADDR, &addr, 1);
 8002300:	f107 020f 	add.w	r2, r7, #15
 8002304:	2301      	movs	r3, #1
 8002306:	2108      	movs	r1, #8
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff fa8d 	bl	8001828 <sths34pf80_write_reg>
 800230e:	4602      	mov	r2, r0
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	4413      	add	r3, r2
 8002314:	617b      	str	r3, [r7, #20]

  /* Write data */
  uint8_t data = 0x01;
 8002316:	2301      	movs	r3, #1
 8002318:	73bb      	strb	r3, [r7, #14]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_FUNC_CFG_DATA, &data, 1);
 800231a:	f107 020e 	add.w	r2, r7, #14
 800231e:	2301      	movs	r3, #1
 8002320:	2109      	movs	r1, #9
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fa80 	bl	8001828 <sths34pf80_write_reg>
 8002328:	4602      	mov	r2, r0
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	4413      	add	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

  /* Disable write mode */
  page_rw.func_cfg_write = 0;
 8002330:	7c3b      	ldrb	r3, [r7, #16]
 8002332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002336:	743b      	strb	r3, [r7, #16]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_PAGE_RW, (uint8_t *)&page_rw, 1);
 8002338:	f107 0210 	add.w	r2, r7, #16
 800233c:	2301      	movs	r3, #1
 800233e:	2111      	movs	r1, #17
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff fa71 	bl	8001828 <sths34pf80_write_reg>
 8002346:	4602      	mov	r2, r0
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	4413      	add	r3, r2
 800234c:	617b      	str	r3, [r7, #20]

  /* Disable access to embedded functions register */
  ret += sths34pf80_mem_bank_set(ctx, STHS34PF80_MAIN_MEM_BANK);
 800234e:	2100      	movs	r1, #0
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff fbed 	bl	8001b30 <sths34pf80_mem_bank_set>
 8002356:	4602      	mov	r2, r0
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	4413      	add	r3, r2
 800235c:	617b      	str	r3, [r7, #20]

  return ret;
 800235e:	697b      	ldr	r3, [r7, #20]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <sths34pf80_algo_reset>:
  * @param  val      reset algo structure
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_algo_reset(const stmdev_ctx_t *ctx)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  sths34pf80_ctrl1_t ctrl1;
  uint8_t odr;
  int32_t ret;

  /* Save current odr and enter PD mode */
  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8002370:	f107 0208 	add.w	r2, r7, #8
 8002374:	2301      	movs	r3, #1
 8002376:	2120      	movs	r1, #32
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff fa37 	bl	80017ec <sths34pf80_read_reg>
 800237e:	60f8      	str	r0, [r7, #12]
  odr = ctrl1.odr;
 8002380:	7a3b      	ldrb	r3, [r7, #8]
 8002382:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002386:	b2db      	uxtb	r3, r3
 8002388:	72fb      	strb	r3, [r7, #11]
  ret += sths34pf80_safe_power_down(ctx, &ctrl1);
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	4619      	mov	r1, r3
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff fac4 	bl	800191e <sths34pf80_safe_power_down>
 8002396:	4602      	mov	r2, r0
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]

  ret += sths34pf80_reset_algo_bit_set(ctx);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ff92 	bl	80022c8 <sths34pf80_reset_algo_bit_set>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4413      	add	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Set saved odr back */
  ctrl1.odr = odr;
 80023ac:	7afb      	ldrb	r3, [r7, #11]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	7a3b      	ldrb	r3, [r7, #8]
 80023b6:	f362 0303 	bfi	r3, r2, #0, #4
 80023ba:	723b      	strb	r3, [r7, #8]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 80023bc:	f107 0208 	add.w	r2, r7, #8
 80023c0:	2301      	movs	r3, #1
 80023c2:	2120      	movs	r1, #32
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff fa2f 	bl	8001828 <sths34pf80_write_reg>
 80023ca:	4602      	mov	r2, r0
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

  return ret;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	4b10      	ldr	r3, [pc, #64]	@ (8002428 <HAL_MspInit+0x4c>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002428 <HAL_MspInit+0x4c>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002428 <HAL_MspInit+0x4c>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <HAL_MspInit+0x4c>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	4a08      	ldr	r2, [pc, #32]	@ (8002428 <HAL_MspInit+0x4c>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800240c:	6413      	str	r3, [r2, #64]	@ 0x40
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_MspInit+0x4c>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800241a:	2007      	movs	r0, #7
 800241c:	f000 fc48 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40023800 	.word	0x40023800

0800242c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08c      	sub	sp, #48	@ 0x30
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a52      	ldr	r2, [pc, #328]	@ (8002594 <HAL_I2C_MspInit+0x168>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d13c      	bne.n	80024c8 <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	4b51      	ldr	r3, [pc, #324]	@ (8002598 <HAL_I2C_MspInit+0x16c>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	4a50      	ldr	r2, [pc, #320]	@ (8002598 <HAL_I2C_MspInit+0x16c>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	6313      	str	r3, [r2, #48]	@ 0x30
 800245e:	4b4e      	ldr	r3, [pc, #312]	@ (8002598 <HAL_I2C_MspInit+0x16c>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800246a:	23c0      	movs	r3, #192	@ 0xc0
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246e:	2312      	movs	r3, #18
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002472:	2301      	movs	r3, #1
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002476:	2303      	movs	r3, #3
 8002478:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800247a:	2304      	movs	r3, #4
 800247c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247e:	f107 031c 	add.w	r3, r7, #28
 8002482:	4619      	mov	r1, r3
 8002484:	4845      	ldr	r0, [pc, #276]	@ (800259c <HAL_I2C_MspInit+0x170>)
 8002486:	f000 fcf5 	bl	8002e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	4b42      	ldr	r3, [pc, #264]	@ (8002598 <HAL_I2C_MspInit+0x16c>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	4a41      	ldr	r2, [pc, #260]	@ (8002598 <HAL_I2C_MspInit+0x16c>)
 8002494:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002498:	6413      	str	r3, [r2, #64]	@ 0x40
 800249a:	4b3f      	ldr	r3, [pc, #252]	@ (8002598 <HAL_I2C_MspInit+0x16c>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	201f      	movs	r0, #31
 80024ac:	f000 fc0b 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80024b0:	201f      	movs	r0, #31
 80024b2:	f000 fc24 	bl	8002cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	2020      	movs	r0, #32
 80024bc:	f000 fc03 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80024c0:	2020      	movs	r0, #32
 80024c2:	f000 fc1c 	bl	8002cfe <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024c6:	e060      	b.n	800258a <HAL_I2C_MspInit+0x15e>
  else if(hi2c->Instance==I2C2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a34      	ldr	r2, [pc, #208]	@ (80025a0 <HAL_I2C_MspInit+0x174>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d15b      	bne.n	800258a <HAL_I2C_MspInit+0x15e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	4b30      	ldr	r3, [pc, #192]	@ (8002598 <HAL_I2C_MspInit+0x16c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	4a2f      	ldr	r2, [pc, #188]	@ (8002598 <HAL_I2C_MspInit+0x16c>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002598 <HAL_I2C_MspInit+0x16c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b29      	ldr	r3, [pc, #164]	@ (8002598 <HAL_I2C_MspInit+0x16c>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	4a28      	ldr	r2, [pc, #160]	@ (8002598 <HAL_I2C_MspInit+0x16c>)
 80024f8:	f043 0304 	orr.w	r3, r3, #4
 80024fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fe:	4b26      	ldr	r3, [pc, #152]	@ (8002598 <HAL_I2C_MspInit+0x16c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800250a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800250e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002510:	2312      	movs	r3, #18
 8002512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002514:	2301      	movs	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800251c:	2304      	movs	r3, #4
 800251e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002520:	f107 031c 	add.w	r3, r7, #28
 8002524:	4619      	mov	r1, r3
 8002526:	481d      	ldr	r0, [pc, #116]	@ (800259c <HAL_I2C_MspInit+0x170>)
 8002528:	f000 fca4 	bl	8002e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800252c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002532:	2312      	movs	r3, #18
 8002534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002536:	2301      	movs	r3, #1
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253a:	2303      	movs	r3, #3
 800253c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800253e:	2304      	movs	r3, #4
 8002540:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002542:	f107 031c 	add.w	r3, r7, #28
 8002546:	4619      	mov	r1, r3
 8002548:	4816      	ldr	r0, [pc, #88]	@ (80025a4 <HAL_I2C_MspInit+0x178>)
 800254a:	f000 fc93 	bl	8002e74 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <HAL_I2C_MspInit+0x16c>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	4a10      	ldr	r2, [pc, #64]	@ (8002598 <HAL_I2C_MspInit+0x16c>)
 8002558:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800255c:	6413      	str	r3, [r2, #64]	@ 0x40
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <HAL_I2C_MspInit+0x16c>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	2021      	movs	r0, #33	@ 0x21
 8002570:	f000 fba9 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002574:	2021      	movs	r0, #33	@ 0x21
 8002576:	f000 fbc2 	bl	8002cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	2022      	movs	r0, #34	@ 0x22
 8002580:	f000 fba1 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002584:	2022      	movs	r0, #34	@ 0x22
 8002586:	f000 fbba 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 800258a:	bf00      	nop
 800258c:	3730      	adds	r7, #48	@ 0x30
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40005400 	.word	0x40005400
 8002598:	40023800 	.word	0x40023800
 800259c:	40020400 	.word	0x40020400
 80025a0:	40005800 	.word	0x40005800
 80025a4:	40020800 	.word	0x40020800

080025a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0b      	ldr	r2, [pc, #44]	@ (80025e4 <HAL_TIM_Base_MspInit+0x3c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10d      	bne.n	80025d6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <HAL_TIM_Base_MspInit+0x40>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c2:	4a09      	ldr	r2, [pc, #36]	@ (80025e8 <HAL_TIM_Base_MspInit+0x40>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ca:	4b07      	ldr	r3, [pc, #28]	@ (80025e8 <HAL_TIM_Base_MspInit+0x40>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40010000 	.word	0x40010000
 80025e8:	40023800 	.word	0x40023800

080025ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a12      	ldr	r2, [pc, #72]	@ (8002654 <HAL_TIM_MspPostInit+0x68>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d11e      	bne.n	800264c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <HAL_TIM_MspPostInit+0x6c>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	4a10      	ldr	r2, [pc, #64]	@ (8002658 <HAL_TIM_MspPostInit+0x6c>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6313      	str	r3, [r2, #48]	@ 0x30
 800261e:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <HAL_TIM_MspPostInit+0x6c>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800262a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800262e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800263c:	2301      	movs	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002640:	f107 030c 	add.w	r3, r7, #12
 8002644:	4619      	mov	r1, r3
 8002646:	4805      	ldr	r0, [pc, #20]	@ (800265c <HAL_TIM_MspPostInit+0x70>)
 8002648:	f000 fc14 	bl	8002e74 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800264c:	bf00      	nop
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40010000 	.word	0x40010000
 8002658:	40023800 	.word	0x40023800
 800265c:	40020000 	.word	0x40020000

08002660 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	@ 0x28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1d      	ldr	r2, [pc, #116]	@ (80026f4 <HAL_UART_MspInit+0x94>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d133      	bne.n	80026ea <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	4b1c      	ldr	r3, [pc, #112]	@ (80026f8 <HAL_UART_MspInit+0x98>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	4a1b      	ldr	r2, [pc, #108]	@ (80026f8 <HAL_UART_MspInit+0x98>)
 800268c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002690:	6413      	str	r3, [r2, #64]	@ 0x40
 8002692:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <HAL_UART_MspInit+0x98>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <HAL_UART_MspInit+0x98>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	4a14      	ldr	r2, [pc, #80]	@ (80026f8 <HAL_UART_MspInit+0x98>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ae:	4b12      	ldr	r3, [pc, #72]	@ (80026f8 <HAL_UART_MspInit+0x98>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026ba:	230c      	movs	r3, #12
 80026bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c6:	2303      	movs	r3, #3
 80026c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ca:	2307      	movs	r3, #7
 80026cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4619      	mov	r1, r3
 80026d4:	4809      	ldr	r0, [pc, #36]	@ (80026fc <HAL_UART_MspInit+0x9c>)
 80026d6:	f000 fbcd 	bl	8002e74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	2026      	movs	r0, #38	@ 0x26
 80026e0:	f000 faf1 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026e4:	2026      	movs	r0, #38	@ 0x26
 80026e6:	f000 fb0a 	bl	8002cfe <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80026ea:	bf00      	nop
 80026ec:	3728      	adds	r7, #40	@ 0x28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40004400 	.word	0x40004400
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020000 	.word	0x40020000

08002700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <NMI_Handler+0x4>

08002708 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <HardFault_Handler+0x4>

08002710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <MemManage_Handler+0x4>

08002718 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800271c:	bf00      	nop
 800271e:	e7fd      	b.n	800271c <BusFault_Handler+0x4>

08002720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <UsageFault_Handler+0x4>

08002728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002756:	f000 f997 	bl	8002a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}

0800275e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002762:	2001      	movs	r0, #1
 8002764:	f000 fd34 	bl	80031d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	bd80      	pop	{r7, pc}

0800276c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002770:	4802      	ldr	r0, [pc, #8]	@ (800277c <I2C1_EV_IRQHandler+0x10>)
 8002772:	f001 f9cb 	bl	8003b0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200001fc 	.word	0x200001fc

08002780 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002784:	4802      	ldr	r0, [pc, #8]	@ (8002790 <I2C1_ER_IRQHandler+0x10>)
 8002786:	f001 fb32 	bl	8003dee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200001fc 	.word	0x200001fc

08002794 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002798:	4802      	ldr	r0, [pc, #8]	@ (80027a4 <I2C2_EV_IRQHandler+0x10>)
 800279a:	f001 f9b7 	bl	8003b0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000250 	.word	0x20000250

080027a8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80027ac:	4802      	ldr	r0, [pc, #8]	@ (80027b8 <I2C2_ER_IRQHandler+0x10>)
 80027ae:	f001 fb1e 	bl	8003dee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000250 	.word	0x20000250

080027bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027c0:	4802      	ldr	r0, [pc, #8]	@ (80027cc <USART2_IRQHandler+0x10>)
 80027c2:	f004 fff1 	bl	80077a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200002ec 	.word	0x200002ec

080027d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80027d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80027d8:	f000 fcfa 	bl	80031d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <_kill>:

int _kill(int pid, int sig)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027fa:	f006 fcf5 	bl	80091e8 <__errno>
 80027fe:	4603      	mov	r3, r0
 8002800:	2216      	movs	r2, #22
 8002802:	601a      	str	r2, [r3, #0]
  return -1;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_exit>:

void _exit (int status)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002818:	f04f 31ff 	mov.w	r1, #4294967295
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ffe7 	bl	80027f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002822:	bf00      	nop
 8002824:	e7fd      	b.n	8002822 <_exit+0x12>

08002826 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e00a      	b.n	800284e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002838:	f3af 8000 	nop.w
 800283c:	4601      	mov	r1, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	60ba      	str	r2, [r7, #8]
 8002844:	b2ca      	uxtb	r2, r1
 8002846:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3301      	adds	r3, #1
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	429a      	cmp	r2, r3
 8002854:	dbf0      	blt.n	8002838 <_read+0x12>
  }

  return len;
 8002856:	687b      	ldr	r3, [r7, #4]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e009      	b.n	8002886 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	60ba      	str	r2, [r7, #8]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3301      	adds	r3, #1
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	429a      	cmp	r2, r3
 800288c:	dbf1      	blt.n	8002872 <_write+0x12>
  }
  return len;
 800288e:	687b      	ldr	r3, [r7, #4]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <_close>:

int _close(int file)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028c0:	605a      	str	r2, [r3, #4]
  return 0;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <_isatty>:

int _isatty(int file)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028d8:	2301      	movs	r3, #1
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b085      	sub	sp, #20
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002908:	4a14      	ldr	r2, [pc, #80]	@ (800295c <_sbrk+0x5c>)
 800290a:	4b15      	ldr	r3, [pc, #84]	@ (8002960 <_sbrk+0x60>)
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002914:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <_sbrk+0x64>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800291c:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <_sbrk+0x64>)
 800291e:	4a12      	ldr	r2, [pc, #72]	@ (8002968 <_sbrk+0x68>)
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002922:	4b10      	ldr	r3, [pc, #64]	@ (8002964 <_sbrk+0x64>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	429a      	cmp	r2, r3
 800292e:	d207      	bcs.n	8002940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002930:	f006 fc5a 	bl	80091e8 <__errno>
 8002934:	4603      	mov	r3, r0
 8002936:	220c      	movs	r2, #12
 8002938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295
 800293e:	e009      	b.n	8002954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002940:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <_sbrk+0x64>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002946:	4b07      	ldr	r3, [pc, #28]	@ (8002964 <_sbrk+0x64>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	4a05      	ldr	r2, [pc, #20]	@ (8002964 <_sbrk+0x64>)
 8002950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002952:	68fb      	ldr	r3, [r7, #12]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20020000 	.word	0x20020000
 8002960:	00000400 	.word	0x00000400
 8002964:	20000730 	.word	0x20000730
 8002968:	20000888 	.word	0x20000888

0800296c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002970:	4b06      	ldr	r3, [pc, #24]	@ (800298c <SystemInit+0x20>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002976:	4a05      	ldr	r2, [pc, #20]	@ (800298c <SystemInit+0x20>)
 8002978:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800297c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002990:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002994:	f7ff ffea 	bl	800296c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002998:	480c      	ldr	r0, [pc, #48]	@ (80029cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800299a:	490d      	ldr	r1, [pc, #52]	@ (80029d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800299c:	4a0d      	ldr	r2, [pc, #52]	@ (80029d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800299e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029a0:	e002      	b.n	80029a8 <LoopCopyDataInit>

080029a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029a6:	3304      	adds	r3, #4

080029a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029ac:	d3f9      	bcc.n	80029a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ae:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029b0:	4c0a      	ldr	r4, [pc, #40]	@ (80029dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80029b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b4:	e001      	b.n	80029ba <LoopFillZerobss>

080029b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b8:	3204      	adds	r2, #4

080029ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029bc:	d3fb      	bcc.n	80029b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80029be:	f006 fc19 	bl	80091f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029c2:	f7fe fb25 	bl	8001010 <main>
  bx  lr    
 80029c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029d0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80029d4:	0800b75c 	.word	0x0800b75c
  ldr r2, =_sbss
 80029d8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80029dc:	20000884 	.word	0x20000884

080029e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029e0:	e7fe      	b.n	80029e0 <ADC_IRQHandler>
	...

080029e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a24 <HAL_Init+0x40>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002a24 <HAL_Init+0x40>)
 80029ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <HAL_Init+0x40>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002a24 <HAL_Init+0x40>)
 80029fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a00:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <HAL_Init+0x40>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a07      	ldr	r2, [pc, #28]	@ (8002a24 <HAL_Init+0x40>)
 8002a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a0c:	2003      	movs	r0, #3
 8002a0e:	f000 f94f 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a12:	2000      	movs	r0, #0
 8002a14:	f000 f808 	bl	8002a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a18:	f7ff fce0 	bl	80023dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40023c00 	.word	0x40023c00

08002a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a30:	4b12      	ldr	r3, [pc, #72]	@ (8002a7c <HAL_InitTick+0x54>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b12      	ldr	r3, [pc, #72]	@ (8002a80 <HAL_InitTick+0x58>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f967 	bl	8002d1a <HAL_SYSTICK_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00e      	b.n	8002a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b0f      	cmp	r3, #15
 8002a5a:	d80a      	bhi.n	8002a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	f000 f92f 	bl	8002cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a68:	4a06      	ldr	r2, [pc, #24]	@ (8002a84 <HAL_InitTick+0x5c>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e000      	b.n	8002a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	2000000c 	.word	0x2000000c
 8002a80:	20000014 	.word	0x20000014
 8002a84:	20000010 	.word	0x20000010

08002a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <HAL_IncTick+0x20>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <HAL_IncTick+0x24>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4413      	add	r3, r2
 8002a98:	4a04      	ldr	r2, [pc, #16]	@ (8002aac <HAL_IncTick+0x24>)
 8002a9a:	6013      	str	r3, [r2, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000014 	.word	0x20000014
 8002aac:	20000734 	.word	0x20000734

08002ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	@ (8002ac4 <HAL_GetTick+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000734 	.word	0x20000734

08002ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ad0:	f7ff ffee 	bl	8002ab0 <HAL_GetTick>
 8002ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d005      	beq.n	8002aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <HAL_Delay+0x44>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4413      	add	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aee:	bf00      	nop
 8002af0:	f7ff ffde 	bl	8002ab0 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d8f7      	bhi.n	8002af0 <HAL_Delay+0x28>
  {
  }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000014 	.word	0x20000014

08002b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b20:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b42:	4a04      	ldr	r2, [pc, #16]	@ (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	60d3      	str	r3, [r2, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b5c:	4b04      	ldr	r3, [pc, #16]	@ (8002b70 <__NVIC_GetPriorityGrouping+0x18>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	f003 0307 	and.w	r3, r3, #7
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	db0b      	blt.n	8002b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	4907      	ldr	r1, [pc, #28]	@ (8002bac <__NVIC_EnableIRQ+0x38>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2001      	movs	r0, #1
 8002b96:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db0a      	blt.n	8002bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	490c      	ldr	r1, [pc, #48]	@ (8002bfc <__NVIC_SetPriority+0x4c>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd8:	e00a      	b.n	8002bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4908      	ldr	r1, [pc, #32]	@ (8002c00 <__NVIC_SetPriority+0x50>)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	3b04      	subs	r3, #4
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	440b      	add	r3, r1
 8002bee:	761a      	strb	r2, [r3, #24]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000e100 	.word	0xe000e100
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	@ 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f1c3 0307 	rsb	r3, r3, #7
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	bf28      	it	cs
 8002c22:	2304      	movcs	r3, #4
 8002c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d902      	bls.n	8002c34 <NVIC_EncodePriority+0x30>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3b03      	subs	r3, #3
 8002c32:	e000      	b.n	8002c36 <NVIC_EncodePriority+0x32>
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	401a      	ands	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	43d9      	mvns	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	4313      	orrs	r3, r2
         );
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3724      	adds	r7, #36	@ 0x24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c7c:	d301      	bcc.n	8002c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00f      	b.n	8002ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c82:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <SysTick_Config+0x40>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	f7ff ff8e 	bl	8002bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c94:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <SysTick_Config+0x40>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9a:	4b04      	ldr	r3, [pc, #16]	@ (8002cac <SysTick_Config+0x40>)
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010

08002cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ff29 	bl	8002b10 <__NVIC_SetPriorityGrouping>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd8:	f7ff ff3e 	bl	8002b58 <__NVIC_GetPriorityGrouping>
 8002cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f7ff ff8e 	bl	8002c04 <NVIC_EncodePriority>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff5d 	bl	8002bb0 <__NVIC_SetPriority>
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff31 	bl	8002b74 <__NVIC_EnableIRQ>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ffa2 	bl	8002c6c <SysTick_Config>
 8002d28:	4603      	mov	r3, r0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d40:	f7ff feb6 	bl	8002ab0 <HAL_GetTick>
 8002d44:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d008      	beq.n	8002d64 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2280      	movs	r2, #128	@ 0x80
 8002d56:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e052      	b.n	8002e0a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0216 	bic.w	r2, r2, #22
 8002d72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d82:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <HAL_DMA_Abort+0x62>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d007      	beq.n	8002da4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0208 	bic.w	r2, r2, #8
 8002da2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0201 	bic.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db4:	e013      	b.n	8002dde <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002db6:	f7ff fe7b 	bl	8002ab0 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b05      	cmp	r3, #5
 8002dc2:	d90c      	bls.n	8002dde <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2203      	movs	r2, #3
 8002dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e015      	b.n	8002e0a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1e4      	bne.n	8002db6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df0:	223f      	movs	r2, #63	@ 0x3f
 8002df2:	409a      	lsls	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d004      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2280      	movs	r2, #128	@ 0x80
 8002e2a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e00c      	b.n	8002e4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2205      	movs	r2, #5
 8002e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e64:	b2db      	uxtb	r3, r3
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	@ 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e165      	b.n	800315c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e90:	2201      	movs	r2, #1
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	f040 8154 	bne.w	8003156 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d005      	beq.n	8002ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d130      	bne.n	8002f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002efc:	2201      	movs	r2, #1
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 0201 	and.w	r2, r3, #1
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d017      	beq.n	8002f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	2203      	movs	r2, #3
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d123      	bne.n	8002fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	08da      	lsrs	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3208      	adds	r2, #8
 8002f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	220f      	movs	r2, #15
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3208      	adds	r2, #8
 8002fb2:	69b9      	ldr	r1, [r7, #24]
 8002fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0203 	and.w	r2, r3, #3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80ae 	beq.w	8003156 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	4b5d      	ldr	r3, [pc, #372]	@ (8003174 <HAL_GPIO_Init+0x300>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003002:	4a5c      	ldr	r2, [pc, #368]	@ (8003174 <HAL_GPIO_Init+0x300>)
 8003004:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003008:	6453      	str	r3, [r2, #68]	@ 0x44
 800300a:	4b5a      	ldr	r3, [pc, #360]	@ (8003174 <HAL_GPIO_Init+0x300>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003016:	4a58      	ldr	r2, [pc, #352]	@ (8003178 <HAL_GPIO_Init+0x304>)
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	089b      	lsrs	r3, r3, #2
 800301c:	3302      	adds	r3, #2
 800301e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	220f      	movs	r2, #15
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a4f      	ldr	r2, [pc, #316]	@ (800317c <HAL_GPIO_Init+0x308>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d025      	beq.n	800308e <HAL_GPIO_Init+0x21a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a4e      	ldr	r2, [pc, #312]	@ (8003180 <HAL_GPIO_Init+0x30c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01f      	beq.n	800308a <HAL_GPIO_Init+0x216>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4d      	ldr	r2, [pc, #308]	@ (8003184 <HAL_GPIO_Init+0x310>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d019      	beq.n	8003086 <HAL_GPIO_Init+0x212>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a4c      	ldr	r2, [pc, #304]	@ (8003188 <HAL_GPIO_Init+0x314>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d013      	beq.n	8003082 <HAL_GPIO_Init+0x20e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a4b      	ldr	r2, [pc, #300]	@ (800318c <HAL_GPIO_Init+0x318>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00d      	beq.n	800307e <HAL_GPIO_Init+0x20a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a4a      	ldr	r2, [pc, #296]	@ (8003190 <HAL_GPIO_Init+0x31c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <HAL_GPIO_Init+0x206>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a49      	ldr	r2, [pc, #292]	@ (8003194 <HAL_GPIO_Init+0x320>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_GPIO_Init+0x202>
 8003072:	2306      	movs	r3, #6
 8003074:	e00c      	b.n	8003090 <HAL_GPIO_Init+0x21c>
 8003076:	2307      	movs	r3, #7
 8003078:	e00a      	b.n	8003090 <HAL_GPIO_Init+0x21c>
 800307a:	2305      	movs	r3, #5
 800307c:	e008      	b.n	8003090 <HAL_GPIO_Init+0x21c>
 800307e:	2304      	movs	r3, #4
 8003080:	e006      	b.n	8003090 <HAL_GPIO_Init+0x21c>
 8003082:	2303      	movs	r3, #3
 8003084:	e004      	b.n	8003090 <HAL_GPIO_Init+0x21c>
 8003086:	2302      	movs	r3, #2
 8003088:	e002      	b.n	8003090 <HAL_GPIO_Init+0x21c>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_GPIO_Init+0x21c>
 800308e:	2300      	movs	r3, #0
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	f002 0203 	and.w	r2, r2, #3
 8003096:	0092      	lsls	r2, r2, #2
 8003098:	4093      	lsls	r3, r2
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030a0:	4935      	ldr	r1, [pc, #212]	@ (8003178 <HAL_GPIO_Init+0x304>)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	3302      	adds	r3, #2
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003198 <HAL_GPIO_Init+0x324>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030d2:	4a31      	ldr	r2, [pc, #196]	@ (8003198 <HAL_GPIO_Init+0x324>)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030d8:	4b2f      	ldr	r3, [pc, #188]	@ (8003198 <HAL_GPIO_Init+0x324>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030fc:	4a26      	ldr	r2, [pc, #152]	@ (8003198 <HAL_GPIO_Init+0x324>)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003102:	4b25      	ldr	r3, [pc, #148]	@ (8003198 <HAL_GPIO_Init+0x324>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003126:	4a1c      	ldr	r2, [pc, #112]	@ (8003198 <HAL_GPIO_Init+0x324>)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800312c:	4b1a      	ldr	r3, [pc, #104]	@ (8003198 <HAL_GPIO_Init+0x324>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003150:	4a11      	ldr	r2, [pc, #68]	@ (8003198 <HAL_GPIO_Init+0x324>)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3301      	adds	r3, #1
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b0f      	cmp	r3, #15
 8003160:	f67f ae96 	bls.w	8002e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	3724      	adds	r7, #36	@ 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	40013800 	.word	0x40013800
 800317c:	40020000 	.word	0x40020000
 8003180:	40020400 	.word	0x40020400
 8003184:	40020800 	.word	0x40020800
 8003188:	40020c00 	.word	0x40020c00
 800318c:	40021000 	.word	0x40021000
 8003190:	40021400 	.word	0x40021400
 8003194:	40021800 	.word	0x40021800
 8003198:	40013c00 	.word	0x40013c00

0800319c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	807b      	strh	r3, [r7, #2]
 80031a8:	4613      	mov	r3, r2
 80031aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031ac:	787b      	ldrb	r3, [r7, #1]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031b2:	887a      	ldrh	r2, [r7, #2]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031b8:	e003      	b.n	80031c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031ba:	887b      	ldrh	r3, [r7, #2]
 80031bc:	041a      	lsls	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	619a      	str	r2, [r3, #24]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031da:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d006      	beq.n	80031f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031e6:	4a05      	ldr	r2, [pc, #20]	@ (80031fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe fae2 	bl	80017b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40013c00 	.word	0x40013c00

08003200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e12b      	b.n	800346a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff f900 	bl	800242c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2224      	movs	r2, #36	@ 0x24
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003252:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003262:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003264:	f002 fdf0 	bl	8005e48 <HAL_RCC_GetPCLK1Freq>
 8003268:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4a81      	ldr	r2, [pc, #516]	@ (8003474 <HAL_I2C_Init+0x274>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d807      	bhi.n	8003284 <HAL_I2C_Init+0x84>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a80      	ldr	r2, [pc, #512]	@ (8003478 <HAL_I2C_Init+0x278>)
 8003278:	4293      	cmp	r3, r2
 800327a:	bf94      	ite	ls
 800327c:	2301      	movls	r3, #1
 800327e:	2300      	movhi	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e006      	b.n	8003292 <HAL_I2C_Init+0x92>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4a7d      	ldr	r2, [pc, #500]	@ (800347c <HAL_I2C_Init+0x27c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	bf94      	ite	ls
 800328c:	2301      	movls	r3, #1
 800328e:	2300      	movhi	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0e7      	b.n	800346a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4a78      	ldr	r2, [pc, #480]	@ (8003480 <HAL_I2C_Init+0x280>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	0c9b      	lsrs	r3, r3, #18
 80032a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003474 <HAL_I2C_Init+0x274>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d802      	bhi.n	80032d4 <HAL_I2C_Init+0xd4>
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	3301      	adds	r3, #1
 80032d2:	e009      	b.n	80032e8 <HAL_I2C_Init+0xe8>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	4a69      	ldr	r2, [pc, #420]	@ (8003484 <HAL_I2C_Init+0x284>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	3301      	adds	r3, #1
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80032fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	495c      	ldr	r1, [pc, #368]	@ (8003474 <HAL_I2C_Init+0x274>)
 8003304:	428b      	cmp	r3, r1
 8003306:	d819      	bhi.n	800333c <HAL_I2C_Init+0x13c>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1e59      	subs	r1, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	fbb1 f3f3 	udiv	r3, r1, r3
 8003316:	1c59      	adds	r1, r3, #1
 8003318:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800331c:	400b      	ands	r3, r1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <HAL_I2C_Init+0x138>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1e59      	subs	r1, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003330:	3301      	adds	r3, #1
 8003332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003336:	e051      	b.n	80033dc <HAL_I2C_Init+0x1dc>
 8003338:	2304      	movs	r3, #4
 800333a:	e04f      	b.n	80033dc <HAL_I2C_Init+0x1dc>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d111      	bne.n	8003368 <HAL_I2C_Init+0x168>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1e58      	subs	r0, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	440b      	add	r3, r1
 8003352:	fbb0 f3f3 	udiv	r3, r0, r3
 8003356:	3301      	adds	r3, #1
 8003358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	e012      	b.n	800338e <HAL_I2C_Init+0x18e>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1e58      	subs	r0, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6859      	ldr	r1, [r3, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	0099      	lsls	r1, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	fbb0 f3f3 	udiv	r3, r0, r3
 800337e:	3301      	adds	r3, #1
 8003380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_Init+0x196>
 8003392:	2301      	movs	r3, #1
 8003394:	e022      	b.n	80033dc <HAL_I2C_Init+0x1dc>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10e      	bne.n	80033bc <HAL_I2C_Init+0x1bc>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1e58      	subs	r0, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6859      	ldr	r1, [r3, #4]
 80033a6:	460b      	mov	r3, r1
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	440b      	add	r3, r1
 80033ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b0:	3301      	adds	r3, #1
 80033b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ba:	e00f      	b.n	80033dc <HAL_I2C_Init+0x1dc>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e58      	subs	r0, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	0099      	lsls	r1, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	6809      	ldr	r1, [r1, #0]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800340a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6911      	ldr	r1, [r2, #16]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68d2      	ldr	r2, [r2, #12]
 8003416:	4311      	orrs	r1, r2
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	430b      	orrs	r3, r1
 800341e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	000186a0 	.word	0x000186a0
 8003478:	001e847f 	.word	0x001e847f
 800347c:	003d08ff 	.word	0x003d08ff
 8003480:	431bde83 	.word	0x431bde83
 8003484:	10624dd3 	.word	0x10624dd3

08003488 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800349a:	2b80      	cmp	r3, #128	@ 0x80
 800349c:	d103      	bne.n	80034a6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2200      	movs	r2, #0
 80034a4:	611a      	str	r2, [r3, #16]
  }
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	4608      	mov	r0, r1
 80034be:	4611      	mov	r1, r2
 80034c0:	461a      	mov	r2, r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	817b      	strh	r3, [r7, #10]
 80034c6:	460b      	mov	r3, r1
 80034c8:	813b      	strh	r3, [r7, #8]
 80034ca:	4613      	mov	r3, r2
 80034cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034ce:	f7ff faef 	bl	8002ab0 <HAL_GetTick>
 80034d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b20      	cmp	r3, #32
 80034de:	f040 80d9 	bne.w	8003694 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	2319      	movs	r3, #25
 80034e8:	2201      	movs	r2, #1
 80034ea:	496d      	ldr	r1, [pc, #436]	@ (80036a0 <HAL_I2C_Mem_Write+0x1ec>)
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f002 f935 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
 80034fa:	e0cc      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_I2C_Mem_Write+0x56>
 8003506:	2302      	movs	r3, #2
 8003508:	e0c5      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d007      	beq.n	8003530 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800353e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2221      	movs	r2, #33	@ 0x21
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2240      	movs	r2, #64	@ 0x40
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a3a      	ldr	r2, [r7, #32]
 800355a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003560:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a4d      	ldr	r2, [pc, #308]	@ (80036a4 <HAL_I2C_Mem_Write+0x1f0>)
 8003570:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003572:	88f8      	ldrh	r0, [r7, #6]
 8003574:	893a      	ldrh	r2, [r7, #8]
 8003576:	8979      	ldrh	r1, [r7, #10]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	4603      	mov	r3, r0
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f001 fec4 	bl	8005310 <I2C_RequestMemoryWrite>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d052      	beq.n	8003634 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e081      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f002 f9fa 	bl	8005990 <I2C_WaitOnTXEFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00d      	beq.n	80035be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d107      	bne.n	80035ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e06b      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	781a      	ldrb	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d11b      	bne.n	8003634 <HAL_I2C_Mem_Write+0x180>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	d017      	beq.n	8003634 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1aa      	bne.n	8003592 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f002 f9ed 	bl	8005a20 <I2C_WaitOnBTFFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	2b04      	cmp	r3, #4
 8003652:	d107      	bne.n	8003664 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003662:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e016      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
  }
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	00100002 	.word	0x00100002
 80036a4:	ffff0000 	.word	0xffff0000

080036a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08c      	sub	sp, #48	@ 0x30
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	4608      	mov	r0, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	817b      	strh	r3, [r7, #10]
 80036ba:	460b      	mov	r3, r1
 80036bc:	813b      	strh	r3, [r7, #8]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036c2:	f7ff f9f5 	bl	8002ab0 <HAL_GetTick>
 80036c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	f040 8214 	bne.w	8003afe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	2319      	movs	r3, #25
 80036dc:	2201      	movs	r2, #1
 80036de:	497b      	ldr	r1, [pc, #492]	@ (80038cc <HAL_I2C_Mem_Read+0x224>)
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f002 f83b 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
 80036ee:	e207      	b.n	8003b00 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_I2C_Mem_Read+0x56>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e200      	b.n	8003b00 <HAL_I2C_Mem_Read+0x458>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b01      	cmp	r3, #1
 8003712:	d007      	beq.n	8003724 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003732:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2222      	movs	r2, #34	@ 0x22
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2240      	movs	r2, #64	@ 0x40
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800374e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003754:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4a5b      	ldr	r2, [pc, #364]	@ (80038d0 <HAL_I2C_Mem_Read+0x228>)
 8003764:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003766:	88f8      	ldrh	r0, [r7, #6]
 8003768:	893a      	ldrh	r2, [r7, #8]
 800376a:	8979      	ldrh	r1, [r7, #10]
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	4603      	mov	r3, r0
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f001 fe60 	bl	800543c <I2C_RequestMemoryRead>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e1bc      	b.n	8003b00 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	d113      	bne.n	80037b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378e:	2300      	movs	r3, #0
 8003790:	623b      	str	r3, [r7, #32]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	623b      	str	r3, [r7, #32]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	623b      	str	r3, [r7, #32]
 80037a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e190      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d11b      	bne.n	80037f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	e170      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d11b      	bne.n	8003836 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800380c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800381c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	e150      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800384c:	e144      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003852:	2b03      	cmp	r3, #3
 8003854:	f200 80f1 	bhi.w	8003a3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385c:	2b01      	cmp	r3, #1
 800385e:	d123      	bne.n	80038a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003862:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f002 f955 	bl	8005b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e145      	b.n	8003b00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038a6:	e117      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d14e      	bne.n	800394e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b6:	2200      	movs	r2, #0
 80038b8:	4906      	ldr	r1, [pc, #24]	@ (80038d4 <HAL_I2C_Mem_Read+0x22c>)
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f001 ff4e 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e11a      	b.n	8003b00 <HAL_I2C_Mem_Read+0x458>
 80038ca:	bf00      	nop
 80038cc:	00100002 	.word	0x00100002
 80038d0:	ffff0000 	.word	0xffff0000
 80038d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800394c:	e0c4      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800394e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003954:	2200      	movs	r2, #0
 8003956:	496c      	ldr	r1, [pc, #432]	@ (8003b08 <HAL_I2C_Mem_Read+0x460>)
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f001 feff 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0cb      	b.n	8003b00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b0:	2200      	movs	r2, #0
 80039b2:	4955      	ldr	r1, [pc, #340]	@ (8003b08 <HAL_I2C_Mem_Read+0x460>)
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f001 fed1 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e09d      	b.n	8003b00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a38:	e04e      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f002 f868 	bl	8005b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e058      	b.n	8003b00 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d124      	bne.n	8003ad8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d107      	bne.n	8003aa6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aa4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f47f aeb6 	bne.w	800384e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e000      	b.n	8003b00 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003afe:	2302      	movs	r3, #2
  }
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3728      	adds	r7, #40	@ 0x28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	00010004 	.word	0x00010004

08003b0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b2c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b34:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d003      	beq.n	8003b44 <HAL_I2C_EV_IRQHandler+0x38>
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b40      	cmp	r3, #64	@ 0x40
 8003b40:	f040 80c1 	bne.w	8003cc6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10d      	bne.n	8003b7a <HAL_I2C_EV_IRQHandler+0x6e>
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003b64:	d003      	beq.n	8003b6e <HAL_I2C_EV_IRQHandler+0x62>
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003b6c:	d101      	bne.n	8003b72 <HAL_I2C_EV_IRQHandler+0x66>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <HAL_I2C_EV_IRQHandler+0x68>
 8003b72:	2300      	movs	r3, #0
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	f000 8132 	beq.w	8003dde <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00c      	beq.n	8003b9e <HAL_I2C_EV_IRQHandler+0x92>
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	0a5b      	lsrs	r3, r3, #9
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d006      	beq.n	8003b9e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f002 f84b 	bl	8005c2c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fd9b 	bl	80046d2 <I2C_Master_SB>
 8003b9c:	e092      	b.n	8003cc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	08db      	lsrs	r3, r3, #3
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <HAL_I2C_EV_IRQHandler+0xb2>
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	0a5b      	lsrs	r3, r3, #9
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fe11 	bl	80047de <I2C_Master_ADD10>
 8003bbc:	e082      	b.n	8003cc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	085b      	lsrs	r3, r3, #1
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_I2C_EV_IRQHandler+0xd2>
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	0a5b      	lsrs	r3, r3, #9
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fe2b 	bl	8004832 <I2C_Master_ADDR>
 8003bdc:	e072      	b.n	8003cc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d03b      	beq.n	8003c62 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bf8:	f000 80f3 	beq.w	8003de2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	09db      	lsrs	r3, r3, #7
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00f      	beq.n	8003c28 <HAL_I2C_EV_IRQHandler+0x11c>
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	0a9b      	lsrs	r3, r3, #10
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d009      	beq.n	8003c28 <HAL_I2C_EV_IRQHandler+0x11c>
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	089b      	lsrs	r3, r3, #2
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d103      	bne.n	8003c28 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f9f3 	bl	800400c <I2C_MasterTransmit_TXE>
 8003c26:	e04d      	b.n	8003cc4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	089b      	lsrs	r3, r3, #2
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80d6 	beq.w	8003de2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	0a5b      	lsrs	r3, r3, #9
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80cf 	beq.w	8003de2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003c44:	7bbb      	ldrb	r3, [r7, #14]
 8003c46:	2b21      	cmp	r3, #33	@ 0x21
 8003c48:	d103      	bne.n	8003c52 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fa7a 	bl	8004144 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c50:	e0c7      	b.n	8003de2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
 8003c54:	2b40      	cmp	r3, #64	@ 0x40
 8003c56:	f040 80c4 	bne.w	8003de2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fae8 	bl	8004230 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c60:	e0bf      	b.n	8003de2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c70:	f000 80b7 	beq.w	8003de2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	099b      	lsrs	r3, r3, #6
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00f      	beq.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x194>
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	0a9b      	lsrs	r3, r3, #10
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d009      	beq.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x194>
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	089b      	lsrs	r3, r3, #2
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d103      	bne.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fb61 	bl	8004360 <I2C_MasterReceive_RXNE>
 8003c9e:	e011      	b.n	8003cc4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	089b      	lsrs	r3, r3, #2
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 809a 	beq.w	8003de2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	0a5b      	lsrs	r3, r3, #9
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 8093 	beq.w	8003de2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fc17 	bl	80044f0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cc2:	e08e      	b.n	8003de2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003cc4:	e08d      	b.n	8003de2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d004      	beq.n	8003cd8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e007      	b.n	8003ce8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d012      	beq.n	8003d1a <HAL_I2C_EV_IRQHandler+0x20e>
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	0a5b      	lsrs	r3, r3, #9
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00c      	beq.n	8003d1a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003d10:	69b9      	ldr	r1, [r7, #24]
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 ffdc 	bl	8004cd0 <I2C_Slave_ADDR>
 8003d18:	e066      	b.n	8003de8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_I2C_EV_IRQHandler+0x22e>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	0a5b      	lsrs	r3, r3, #9
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f001 f816 	bl	8004d64 <I2C_Slave_STOPF>
 8003d38:	e056      	b.n	8003de8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d3a:	7bbb      	ldrb	r3, [r7, #14]
 8003d3c:	2b21      	cmp	r3, #33	@ 0x21
 8003d3e:	d002      	beq.n	8003d46 <HAL_I2C_EV_IRQHandler+0x23a>
 8003d40:	7bbb      	ldrb	r3, [r7, #14]
 8003d42:	2b29      	cmp	r3, #41	@ 0x29
 8003d44:	d125      	bne.n	8003d92 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	09db      	lsrs	r3, r3, #7
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00f      	beq.n	8003d72 <HAL_I2C_EV_IRQHandler+0x266>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	0a9b      	lsrs	r3, r3, #10
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_I2C_EV_IRQHandler+0x266>
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d103      	bne.n	8003d72 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fef2 	bl	8004b54 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d70:	e039      	b.n	8003de6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d033      	beq.n	8003de6 <HAL_I2C_EV_IRQHandler+0x2da>
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	0a5b      	lsrs	r3, r3, #9
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d02d      	beq.n	8003de6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 ff1f 	bl	8004bce <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d90:	e029      	b.n	8003de6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	099b      	lsrs	r3, r3, #6
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00f      	beq.n	8003dbe <HAL_I2C_EV_IRQHandler+0x2b2>
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	0a9b      	lsrs	r3, r3, #10
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_I2C_EV_IRQHandler+0x2b2>
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	089b      	lsrs	r3, r3, #2
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d103      	bne.n	8003dbe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 ff2a 	bl	8004c10 <I2C_SlaveReceive_RXNE>
 8003dbc:	e014      	b.n	8003de8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	089b      	lsrs	r3, r3, #2
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00e      	beq.n	8003de8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	0a5b      	lsrs	r3, r3, #9
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 ff58 	bl	8004c8c <I2C_SlaveReceive_BTF>
 8003ddc:	e004      	b.n	8003de8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003dde:	bf00      	nop
 8003de0:	e002      	b.n	8003de8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003de6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b08a      	sub	sp, #40	@ 0x28
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e10:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	0a1b      	lsrs	r3, r3, #8
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00e      	beq.n	8003e3c <HAL_I2C_ER_IRQHandler+0x4e>
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	0a1b      	lsrs	r3, r3, #8
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d008      	beq.n	8003e3c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003e3a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	0a5b      	lsrs	r3, r3, #9
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00e      	beq.n	8003e66 <HAL_I2C_ER_IRQHandler+0x78>
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	f043 0302 	orr.w	r3, r3, #2
 8003e5a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003e64:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	0a9b      	lsrs	r3, r3, #10
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d03f      	beq.n	8003ef2 <HAL_I2C_ER_IRQHandler+0x104>
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	0a1b      	lsrs	r3, r3, #8
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d039      	beq.n	8003ef2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003e7e:	7efb      	ldrb	r3, [r7, #27]
 8003e80:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e90:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e96:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003e98:	7ebb      	ldrb	r3, [r7, #26]
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d112      	bne.n	8003ec4 <HAL_I2C_ER_IRQHandler+0xd6>
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10f      	bne.n	8003ec4 <HAL_I2C_ER_IRQHandler+0xd6>
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	2b21      	cmp	r3, #33	@ 0x21
 8003ea8:	d008      	beq.n	8003ebc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003eaa:	7cfb      	ldrb	r3, [r7, #19]
 8003eac:	2b29      	cmp	r3, #41	@ 0x29
 8003eae:	d005      	beq.n	8003ebc <HAL_I2C_ER_IRQHandler+0xce>
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	2b28      	cmp	r3, #40	@ 0x28
 8003eb4:	d106      	bne.n	8003ec4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b21      	cmp	r3, #33	@ 0x21
 8003eba:	d103      	bne.n	8003ec4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f001 f881 	bl	8004fc4 <I2C_Slave_AF>
 8003ec2:	e016      	b.n	8003ef2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ecc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	f043 0304 	orr.w	r3, r3, #4
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ed6:	7efb      	ldrb	r3, [r7, #27]
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d002      	beq.n	8003ee2 <HAL_I2C_ER_IRQHandler+0xf4>
 8003edc:	7efb      	ldrb	r3, [r7, #27]
 8003ede:	2b40      	cmp	r3, #64	@ 0x40
 8003ee0:	d107      	bne.n	8003ef2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	0adb      	lsrs	r3, r3, #11
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00e      	beq.n	8003f1c <HAL_I2C_ER_IRQHandler+0x12e>
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	0a1b      	lsrs	r3, r3, #8
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0c:	f043 0308 	orr.w	r3, r3, #8
 8003f10:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003f1a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d008      	beq.n	8003f34 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f001 f8bc 	bl	80050ac <I2C_ITError>
  }
}
 8003f34:	bf00      	nop
 8003f36:	3728      	adds	r7, #40	@ 0x28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	70fb      	strb	r3, [r7, #3]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800401a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004022:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402e:	2b00      	cmp	r3, #0
 8004030:	d150      	bne.n	80040d4 <I2C_MasterTransmit_TXE+0xc8>
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b21      	cmp	r3, #33	@ 0x21
 8004036:	d14d      	bne.n	80040d4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b08      	cmp	r3, #8
 800403c:	d01d      	beq.n	800407a <I2C_MasterTransmit_TXE+0x6e>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b20      	cmp	r3, #32
 8004042:	d01a      	beq.n	800407a <I2C_MasterTransmit_TXE+0x6e>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800404a:	d016      	beq.n	800407a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800405a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2211      	movs	r2, #17
 8004060:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff ff62 	bl	8003f3c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004078:	e060      	b.n	800413c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004088:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004098:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b40      	cmp	r3, #64	@ 0x40
 80040b2:	d107      	bne.n	80040c4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ff7d 	bl	8003fbc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040c2:	e03b      	b.n	800413c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff ff35 	bl	8003f3c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040d2:	e033      	b.n	800413c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	2b21      	cmp	r3, #33	@ 0x21
 80040d8:	d005      	beq.n	80040e6 <I2C_MasterTransmit_TXE+0xda>
 80040da:	7bbb      	ldrb	r3, [r7, #14]
 80040dc:	2b40      	cmp	r3, #64	@ 0x40
 80040de:	d12d      	bne.n	800413c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	2b22      	cmp	r3, #34	@ 0x22
 80040e4:	d12a      	bne.n	800413c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d108      	bne.n	8004102 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040fe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004100:	e01c      	b.n	800413c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b40      	cmp	r3, #64	@ 0x40
 800410c:	d103      	bne.n	8004116 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f88e 	bl	8004230 <I2C_MemoryTransmit_TXE_BTF>
}
 8004114:	e012      	b.n	800413c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	781a      	ldrb	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800413a:	e7ff      	b.n	800413c <I2C_MasterTransmit_TXE+0x130>
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b21      	cmp	r3, #33	@ 0x21
 800415c:	d164      	bne.n	8004228 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d012      	beq.n	800418e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	781a      	ldrb	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800418c:	e04c      	b.n	8004228 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d01d      	beq.n	80041d0 <I2C_MasterTransmit_BTF+0x8c>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b20      	cmp	r3, #32
 8004198:	d01a      	beq.n	80041d0 <I2C_MasterTransmit_BTF+0x8c>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041a0:	d016      	beq.n	80041d0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041b0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2211      	movs	r2, #17
 80041b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff feb7 	bl	8003f3c <HAL_I2C_MasterTxCpltCallback>
}
 80041ce:	e02b      	b.n	8004228 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b40      	cmp	r3, #64	@ 0x40
 8004208:	d107      	bne.n	800421a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff fed2 	bl	8003fbc <HAL_I2C_MemTxCpltCallback>
}
 8004218:	e006      	b.n	8004228 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff fe8a 	bl	8003f3c <HAL_I2C_MasterTxCpltCallback>
}
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800423e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004244:	2b00      	cmp	r3, #0
 8004246:	d11d      	bne.n	8004284 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d10b      	bne.n	8004268 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004254:	b2da      	uxtb	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004260:	1c9a      	adds	r2, r3, #2
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004266:	e077      	b.n	8004358 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800426c:	b29b      	uxth	r3, r3
 800426e:	121b      	asrs	r3, r3, #8
 8004270:	b2da      	uxtb	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004282:	e069      	b.n	8004358 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004288:	2b01      	cmp	r3, #1
 800428a:	d10b      	bne.n	80042a4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004290:	b2da      	uxtb	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80042a2:	e059      	b.n	8004358 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d152      	bne.n	8004352 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b22      	cmp	r3, #34	@ 0x22
 80042b0:	d10d      	bne.n	80042ce <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042c0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80042cc:	e044      	b.n	8004358 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d015      	beq.n	8004304 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2b21      	cmp	r3, #33	@ 0x21
 80042dc:	d112      	bne.n	8004304 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	781a      	ldrb	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004302:	e029      	b.n	8004358 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d124      	bne.n	8004358 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b21      	cmp	r3, #33	@ 0x21
 8004312:	d121      	bne.n	8004358 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004322:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004332:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff fe36 	bl	8003fbc <HAL_I2C_MemTxCpltCallback>
}
 8004350:	e002      	b.n	8004358 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff f898 	bl	8003488 <I2C_Flush_DR>
}
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b22      	cmp	r3, #34	@ 0x22
 8004372:	f040 80b9 	bne.w	80044e8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004380:	b29b      	uxth	r3, r3
 8004382:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b03      	cmp	r3, #3
 8004388:	d921      	bls.n	80043ce <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	f040 8096 	bne.w	80044e8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043ca:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80043cc:	e08c      	b.n	80044e8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d07f      	beq.n	80044d6 <I2C_MasterReceive_RXNE+0x176>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d002      	beq.n	80043e2 <I2C_MasterReceive_RXNE+0x82>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d179      	bne.n	80044d6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f001 fb64 	bl	8005ab0 <I2C_WaitOnSTOPRequestThroughIT>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d14c      	bne.n	8004488 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043fc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800440c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b40      	cmp	r3, #64	@ 0x40
 8004446:	d10a      	bne.n	800445e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff fdba 	bl	8003fd0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800445c:	e044      	b.n	80044e8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d002      	beq.n	8004472 <I2C_MasterReceive_RXNE+0x112>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b20      	cmp	r3, #32
 8004470:	d103      	bne.n	800447a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30
 8004478:	e002      	b.n	8004480 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2212      	movs	r2, #18
 800447e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff fd65 	bl	8003f50 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004486:	e02f      	b.n	80044e8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004496:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff fd88 	bl	8003fe4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044d4:	e008      	b.n	80044e8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044e4:	605a      	str	r2, [r3, #4]
}
 80044e6:	e7ff      	b.n	80044e8 <I2C_MasterReceive_RXNE+0x188>
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b04      	cmp	r3, #4
 8004506:	d11b      	bne.n	8004540 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004516:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800453e:	e0c4      	b.n	80046ca <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b03      	cmp	r3, #3
 8004548:	d129      	bne.n	800459e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004558:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b04      	cmp	r3, #4
 800455e:	d00a      	beq.n	8004576 <I2C_MasterReceive_BTF+0x86>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d007      	beq.n	8004576 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004574:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800459c:	e095      	b.n	80046ca <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d17d      	bne.n	80046a4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d002      	beq.n	80045b4 <I2C_MasterReceive_BTF+0xc4>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b10      	cmp	r3, #16
 80045b2:	d108      	bne.n	80045c6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	e016      	b.n	80045f4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d002      	beq.n	80045d2 <I2C_MasterReceive_BTF+0xe2>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d108      	bne.n	80045e4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	e007      	b.n	80045f4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800464e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b40      	cmp	r3, #64	@ 0x40
 8004662:	d10a      	bne.n	800467a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff fcac 	bl	8003fd0 <HAL_I2C_MemRxCpltCallback>
}
 8004678:	e027      	b.n	80046ca <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d002      	beq.n	800468e <I2C_MasterReceive_BTF+0x19e>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b20      	cmp	r3, #32
 800468c:	d103      	bne.n	8004696 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	@ 0x30
 8004694:	e002      	b.n	800469c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2212      	movs	r2, #18
 800469a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff fc57 	bl	8003f50 <HAL_I2C_MasterRxCpltCallback>
}
 80046a2:	e012      	b.n	80046ca <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691a      	ldr	r2, [r3, #16]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b40      	cmp	r3, #64	@ 0x40
 80046e4:	d117      	bne.n	8004716 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046fe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004700:	e067      	b.n	80047d2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	b2da      	uxtb	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	611a      	str	r2, [r3, #16]
}
 8004714:	e05d      	b.n	80047d2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800471e:	d133      	bne.n	8004788 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b21      	cmp	r3, #33	@ 0x21
 800472a:	d109      	bne.n	8004740 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004730:	b2db      	uxtb	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800473c:	611a      	str	r2, [r3, #16]
 800473e:	e008      	b.n	8004752 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	b2da      	uxtb	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004756:	2b00      	cmp	r3, #0
 8004758:	d004      	beq.n	8004764 <I2C_Master_SB+0x92>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800475e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d108      	bne.n	8004776 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004768:	2b00      	cmp	r3, #0
 800476a:	d032      	beq.n	80047d2 <I2C_Master_SB+0x100>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d02d      	beq.n	80047d2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004784:	605a      	str	r2, [r3, #4]
}
 8004786:	e024      	b.n	80047d2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10e      	bne.n	80047ae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004794:	b29b      	uxth	r3, r3
 8004796:	11db      	asrs	r3, r3, #7
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f003 0306 	and.w	r3, r3, #6
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f063 030f 	orn	r3, r3, #15
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	611a      	str	r2, [r3, #16]
}
 80047ac:	e011      	b.n	80047d2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d10d      	bne.n	80047d2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	11db      	asrs	r3, r3, #7
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f003 0306 	and.w	r3, r3, #6
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f063 030e 	orn	r3, r3, #14
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	611a      	str	r2, [r3, #16]
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d004      	beq.n	8004804 <I2C_Master_ADD10+0x26>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d108      	bne.n	8004816 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00c      	beq.n	8004826 <I2C_Master_ADD10+0x48>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004824:	605a      	str	r2, [r3, #4]
  }
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004832:	b480      	push	{r7}
 8004834:	b091      	sub	sp, #68	@ 0x44
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004840:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004848:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b22      	cmp	r3, #34	@ 0x22
 800485a:	f040 8169 	bne.w	8004b30 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10f      	bne.n	8004886 <I2C_Master_ADDR+0x54>
 8004866:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800486a:	2b40      	cmp	r3, #64	@ 0x40
 800486c:	d10b      	bne.n	8004886 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800486e:	2300      	movs	r3, #0
 8004870:	633b      	str	r3, [r7, #48]	@ 0x30
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	633b      	str	r3, [r7, #48]	@ 0x30
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	633b      	str	r3, [r7, #48]	@ 0x30
 8004882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004884:	e160      	b.n	8004b48 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800488a:	2b00      	cmp	r3, #0
 800488c:	d11d      	bne.n	80048ca <I2C_Master_ADDR+0x98>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004896:	d118      	bne.n	80048ca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004898:	2300      	movs	r3, #0
 800489a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048bc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80048c8:	e13e      	b.n	8004b48 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d113      	bne.n	80048fc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d4:	2300      	movs	r3, #0
 80048d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	e115      	b.n	8004b28 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b01      	cmp	r3, #1
 8004904:	f040 808a 	bne.w	8004a1c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800490e:	d137      	bne.n	8004980 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800491e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800492a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800492e:	d113      	bne.n	8004958 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800493e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004940:	2300      	movs	r3, #0
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	627b      	str	r3, [r7, #36]	@ 0x24
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	627b      	str	r3, [r7, #36]	@ 0x24
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	e0e7      	b.n	8004b28 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004958:	2300      	movs	r3, #0
 800495a:	623b      	str	r3, [r7, #32]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	623b      	str	r3, [r7, #32]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	623b      	str	r3, [r7, #32]
 800496c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e0d3      	b.n	8004b28 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004982:	2b08      	cmp	r3, #8
 8004984:	d02e      	beq.n	80049e4 <I2C_Master_ADDR+0x1b2>
 8004986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004988:	2b20      	cmp	r3, #32
 800498a:	d02b      	beq.n	80049e4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800498c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800498e:	2b12      	cmp	r3, #18
 8004990:	d102      	bne.n	8004998 <I2C_Master_ADDR+0x166>
 8004992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004994:	2b01      	cmp	r3, #1
 8004996:	d125      	bne.n	80049e4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499a:	2b04      	cmp	r3, #4
 800499c:	d00e      	beq.n	80049bc <I2C_Master_ADDR+0x18a>
 800499e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d00b      	beq.n	80049bc <I2C_Master_ADDR+0x18a>
 80049a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a6:	2b10      	cmp	r3, #16
 80049a8:	d008      	beq.n	80049bc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e007      	b.n	80049cc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049ca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049cc:	2300      	movs	r3, #0
 80049ce:	61fb      	str	r3, [r7, #28]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	61fb      	str	r3, [r7, #28]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	e0a1      	b.n	8004b28 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f4:	2300      	movs	r3, #0
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	61bb      	str	r3, [r7, #24]
 8004a08:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e085      	b.n	8004b28 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d14d      	bne.n	8004ac2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d016      	beq.n	8004a5a <I2C_Master_ADDR+0x228>
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d013      	beq.n	8004a5a <I2C_Master_ADDR+0x228>
 8004a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d010      	beq.n	8004a5a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a46:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	e007      	b.n	8004a6a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a68:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a78:	d117      	bne.n	8004aaa <I2C_Master_ADDR+0x278>
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a80:	d00b      	beq.n	8004a9a <I2C_Master_ADDR+0x268>
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d008      	beq.n	8004a9a <I2C_Master_ADDR+0x268>
 8004a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d005      	beq.n	8004a9a <I2C_Master_ADDR+0x268>
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d002      	beq.n	8004a9a <I2C_Master_ADDR+0x268>
 8004a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d107      	bne.n	8004aaa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004aa8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	e032      	b.n	8004b28 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ad0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004adc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ae0:	d117      	bne.n	8004b12 <I2C_Master_ADDR+0x2e0>
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ae8:	d00b      	beq.n	8004b02 <I2C_Master_ADDR+0x2d0>
 8004aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d008      	beq.n	8004b02 <I2C_Master_ADDR+0x2d0>
 8004af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d005      	beq.n	8004b02 <I2C_Master_ADDR+0x2d0>
 8004af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af8:	2b10      	cmp	r3, #16
 8004afa:	d002      	beq.n	8004b02 <I2C_Master_ADDR+0x2d0>
 8004afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afe:	2b20      	cmp	r3, #32
 8004b00:	d107      	bne.n	8004b12 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b2e:	e00b      	b.n	8004b48 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
}
 8004b46:	e7ff      	b.n	8004b48 <I2C_Master_ADDR+0x316>
 8004b48:	bf00      	nop
 8004b4a:	3744      	adds	r7, #68	@ 0x44
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d02b      	beq.n	8004bc6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b72:	781a      	ldrb	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d114      	bne.n	8004bc6 <I2C_SlaveTransmit_TXE+0x72>
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	2b29      	cmp	r3, #41	@ 0x29
 8004ba0:	d111      	bne.n	8004bc6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2221      	movs	r2, #33	@ 0x21
 8004bb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2228      	movs	r2, #40	@ 0x28
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff f9cf 	bl	8003f64 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d011      	beq.n	8004c04 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d02c      	beq.n	8004c84 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d114      	bne.n	8004c84 <I2C_SlaveReceive_RXNE+0x74>
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c5e:	d111      	bne.n	8004c84 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c6e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2222      	movs	r2, #34	@ 0x22
 8004c74:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2228      	movs	r2, #40	@ 0x28
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff f97a 	bl	8003f78 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d012      	beq.n	8004cc4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004cea:	2b28      	cmp	r3, #40	@ 0x28
 8004cec:	d127      	bne.n	8004d3e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cfc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	089b      	lsrs	r3, r3, #2
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	09db      	lsrs	r3, r3, #7
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d103      	bne.n	8004d22 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	81bb      	strh	r3, [r7, #12]
 8004d20:	e002      	b.n	8004d28 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d30:	89ba      	ldrh	r2, [r7, #12]
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	4619      	mov	r1, r3
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff f928 	bl	8003f8c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d3c:	e00e      	b.n	8004d5c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004d5c:	bf00      	nop
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d84:	2300      	movs	r3, #0
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0201 	orr.w	r2, r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004db0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dc0:	d172      	bne.n	8004ea8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	2b22      	cmp	r3, #34	@ 0x22
 8004dc6:	d002      	beq.n	8004dce <I2C_Slave_STOPF+0x6a>
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dcc:	d135      	bne.n	8004e3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dea:	f043 0204 	orr.w	r2, r3, #4
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe f825 	bl	8002e56 <HAL_DMA_GetState>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d049      	beq.n	8004ea6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e16:	4a69      	ldr	r2, [pc, #420]	@ (8004fbc <I2C_Slave_STOPF+0x258>)
 8004e18:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fd fff7 	bl	8002e12 <HAL_DMA_Abort_IT>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d03d      	beq.n	8004ea6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e34:	4610      	mov	r0, r2
 8004e36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e38:	e035      	b.n	8004ea6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e56:	f043 0204 	orr.w	r2, r3, #4
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fd ffef 	bl	8002e56 <HAL_DMA_GetState>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d014      	beq.n	8004ea8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e82:	4a4e      	ldr	r2, [pc, #312]	@ (8004fbc <I2C_Slave_STOPF+0x258>)
 8004e84:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fd ffc1 	bl	8002e12 <HAL_DMA_Abort_IT>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d008      	beq.n	8004ea8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4798      	blx	r3
 8004ea4:	e000      	b.n	8004ea8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ea6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d03e      	beq.n	8004f30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d112      	bne.n	8004ee6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef0:	2b40      	cmp	r3, #64	@ 0x40
 8004ef2:	d112      	bne.n	8004f1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f28:	f043 0204 	orr.w	r2, r3, #4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f8b7 	bl	80050ac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f3e:	e039      	b.n	8004fb4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f44:	d109      	bne.n	8004f5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2228      	movs	r2, #40	@ 0x28
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff f80f 	bl	8003f78 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b28      	cmp	r3, #40	@ 0x28
 8004f64:	d111      	bne.n	8004f8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a15      	ldr	r2, [pc, #84]	@ (8004fc0 <I2C_Slave_STOPF+0x25c>)
 8004f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff f810 	bl	8003fa8 <HAL_I2C_ListenCpltCallback>
}
 8004f88:	e014      	b.n	8004fb4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8e:	2b22      	cmp	r3, #34	@ 0x22
 8004f90:	d002      	beq.n	8004f98 <I2C_Slave_STOPF+0x234>
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	2b22      	cmp	r3, #34	@ 0x22
 8004f96:	d10d      	bne.n	8004fb4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fe ffe2 	bl	8003f78 <HAL_I2C_SlaveRxCpltCallback>
}
 8004fb4:	bf00      	nop
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	0800560d 	.word	0x0800560d
 8004fc0:	ffff0000 	.word	0xffff0000

08004fc4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d002      	beq.n	8004fe6 <I2C_Slave_AF+0x22>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d129      	bne.n	800503a <I2C_Slave_AF+0x76>
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	2b28      	cmp	r3, #40	@ 0x28
 8004fea:	d126      	bne.n	800503a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a2e      	ldr	r2, [pc, #184]	@ (80050a8 <I2C_Slave_AF+0xe4>)
 8004ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005000:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800500a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800501a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fe ffb8 	bl	8003fa8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005038:	e031      	b.n	800509e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	2b21      	cmp	r3, #33	@ 0x21
 800503e:	d129      	bne.n	8005094 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a19      	ldr	r2, [pc, #100]	@ (80050a8 <I2C_Slave_AF+0xe4>)
 8005044:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2221      	movs	r2, #33	@ 0x21
 800504a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800506a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005074:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005084:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fe f9fe 	bl	8003488 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7fe ff69 	bl	8003f64 <HAL_I2C_SlaveTxCpltCallback>
}
 8005092:	e004      	b.n	800509e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800509c:	615a      	str	r2, [r3, #20]
}
 800509e:	bf00      	nop
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	ffff0000 	.word	0xffff0000

080050ac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80050c4:	7bbb      	ldrb	r3, [r7, #14]
 80050c6:	2b10      	cmp	r3, #16
 80050c8:	d002      	beq.n	80050d0 <I2C_ITError+0x24>
 80050ca:	7bbb      	ldrb	r3, [r7, #14]
 80050cc:	2b40      	cmp	r3, #64	@ 0x40
 80050ce:	d10a      	bne.n	80050e6 <I2C_ITError+0x3a>
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	2b22      	cmp	r3, #34	@ 0x22
 80050d4:	d107      	bne.n	80050e6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050e4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050ec:	2b28      	cmp	r3, #40	@ 0x28
 80050ee:	d107      	bne.n	8005100 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2228      	movs	r2, #40	@ 0x28
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80050fe:	e015      	b.n	800512c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800510a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800510e:	d00a      	beq.n	8005126 <I2C_ITError+0x7a>
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	2b60      	cmp	r3, #96	@ 0x60
 8005114:	d007      	beq.n	8005126 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005136:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800513a:	d162      	bne.n	8005202 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800514a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005150:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	d020      	beq.n	800519c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800515e:	4a6a      	ldr	r2, [pc, #424]	@ (8005308 <I2C_ITError+0x25c>)
 8005160:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005166:	4618      	mov	r0, r3
 8005168:	f7fd fe53 	bl	8002e12 <HAL_DMA_Abort_IT>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8089 	beq.w	8005286 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0201 	bic.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005196:	4610      	mov	r0, r2
 8005198:	4798      	blx	r3
 800519a:	e074      	b.n	8005286 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a0:	4a59      	ldr	r2, [pc, #356]	@ (8005308 <I2C_ITError+0x25c>)
 80051a2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fd fe32 	bl	8002e12 <HAL_DMA_Abort_IT>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d068      	beq.n	8005286 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051be:	2b40      	cmp	r3, #64	@ 0x40
 80051c0:	d10b      	bne.n	80051da <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0201 	bic.w	r2, r2, #1
 80051e8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80051fc:	4610      	mov	r0, r2
 80051fe:	4798      	blx	r3
 8005200:	e041      	b.n	8005286 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b60      	cmp	r3, #96	@ 0x60
 800520c:	d125      	bne.n	800525a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005226:	2b40      	cmp	r3, #64	@ 0x40
 8005228:	d10b      	bne.n	8005242 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0201 	bic.w	r2, r2, #1
 8005250:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fe fed0 	bl	8003ff8 <HAL_I2C_AbortCpltCallback>
 8005258:	e015      	b.n	8005286 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005264:	2b40      	cmp	r3, #64	@ 0x40
 8005266:	d10b      	bne.n	8005280 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7fe feaf 	bl	8003fe4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10e      	bne.n	80052b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800529c:	2b00      	cmp	r3, #0
 800529e:	d109      	bne.n	80052b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d104      	bne.n	80052b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80052c2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d113      	bne.n	8005300 <I2C_ITError+0x254>
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	2b28      	cmp	r3, #40	@ 0x28
 80052dc:	d110      	bne.n	8005300 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a0a      	ldr	r2, [pc, #40]	@ (800530c <I2C_ITError+0x260>)
 80052e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fe fe54 	bl	8003fa8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	0800560d 	.word	0x0800560d
 800530c:	ffff0000 	.word	0xffff0000

08005310 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	4608      	mov	r0, r1
 800531a:	4611      	mov	r1, r2
 800531c:	461a      	mov	r2, r3
 800531e:	4603      	mov	r3, r0
 8005320:	817b      	strh	r3, [r7, #10]
 8005322:	460b      	mov	r3, r1
 8005324:	813b      	strh	r3, [r7, #8]
 8005326:	4613      	mov	r3, r2
 8005328:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005338:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	2200      	movs	r2, #0
 8005342:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fa08 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00d      	beq.n	800536e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800535c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005360:	d103      	bne.n	800536a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005368:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e05f      	b.n	800542e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800536e:	897b      	ldrh	r3, [r7, #10]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800537c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	6a3a      	ldr	r2, [r7, #32]
 8005382:	492d      	ldr	r1, [pc, #180]	@ (8005438 <I2C_RequestMemoryWrite+0x128>)
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 fa63 	bl	8005850 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e04c      	b.n	800542e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ac:	6a39      	ldr	r1, [r7, #32]
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 faee 	bl	8005990 <I2C_WaitOnTXEFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d107      	bne.n	80053d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e02b      	b.n	800542e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053d6:	88fb      	ldrh	r3, [r7, #6]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d105      	bne.n	80053e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053dc:	893b      	ldrh	r3, [r7, #8]
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	611a      	str	r2, [r3, #16]
 80053e6:	e021      	b.n	800542c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053e8:	893b      	ldrh	r3, [r7, #8]
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f8:	6a39      	ldr	r1, [r7, #32]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 fac8 	bl	8005990 <I2C_WaitOnTXEFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00d      	beq.n	8005422 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540a:	2b04      	cmp	r3, #4
 800540c:	d107      	bne.n	800541e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800541c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e005      	b.n	800542e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005422:	893b      	ldrh	r3, [r7, #8]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	00010002 	.word	0x00010002

0800543c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	4608      	mov	r0, r1
 8005446:	4611      	mov	r1, r2
 8005448:	461a      	mov	r2, r3
 800544a:	4603      	mov	r3, r0
 800544c:	817b      	strh	r3, [r7, #10]
 800544e:	460b      	mov	r3, r1
 8005450:	813b      	strh	r3, [r7, #8]
 8005452:	4613      	mov	r3, r2
 8005454:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005464:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005474:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	2200      	movs	r2, #0
 800547e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 f96a 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00d      	beq.n	80054aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800549c:	d103      	bne.n	80054a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e0aa      	b.n	8005600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054aa:	897b      	ldrh	r3, [r7, #10]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	6a3a      	ldr	r2, [r7, #32]
 80054be:	4952      	ldr	r1, [pc, #328]	@ (8005608 <I2C_RequestMemoryRead+0x1cc>)
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f9c5 	bl	8005850 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e097      	b.n	8005600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e8:	6a39      	ldr	r1, [r7, #32]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 fa50 	bl	8005990 <I2C_WaitOnTXEFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00d      	beq.n	8005512 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d107      	bne.n	800550e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800550c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e076      	b.n	8005600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d105      	bne.n	8005524 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005518:	893b      	ldrh	r3, [r7, #8]
 800551a:	b2da      	uxtb	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	611a      	str	r2, [r3, #16]
 8005522:	e021      	b.n	8005568 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005524:	893b      	ldrh	r3, [r7, #8]
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	b29b      	uxth	r3, r3
 800552a:	b2da      	uxtb	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005534:	6a39      	ldr	r1, [r7, #32]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fa2a 	bl	8005990 <I2C_WaitOnTXEFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00d      	beq.n	800555e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	2b04      	cmp	r3, #4
 8005548:	d107      	bne.n	800555a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005558:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e050      	b.n	8005600 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800555e:	893b      	ldrh	r3, [r7, #8]
 8005560:	b2da      	uxtb	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556a:	6a39      	ldr	r1, [r7, #32]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 fa0f 	bl	8005990 <I2C_WaitOnTXEFlagUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00d      	beq.n	8005594 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557c:	2b04      	cmp	r3, #4
 800557e:	d107      	bne.n	8005590 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800558e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e035      	b.n	8005600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f8d3 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00d      	beq.n	80055d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ca:	d103      	bne.n	80055d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e013      	b.n	8005600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055d8:	897b      	ldrh	r3, [r7, #10]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f043 0301 	orr.w	r3, r3, #1
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ea:	6a3a      	ldr	r2, [r7, #32]
 80055ec:	4906      	ldr	r1, [pc, #24]	@ (8005608 <I2C_RequestMemoryRead+0x1cc>)
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 f92e 	bl	8005850 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	00010002 	.word	0x00010002

0800560c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005624:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005626:	4b4b      	ldr	r3, [pc, #300]	@ (8005754 <I2C_DMAAbort+0x148>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	08db      	lsrs	r3, r3, #3
 800562c:	4a4a      	ldr	r2, [pc, #296]	@ (8005758 <I2C_DMAAbort+0x14c>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	0a1a      	lsrs	r2, r3, #8
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	00da      	lsls	r2, r3, #3
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564a:	f043 0220 	orr.w	r2, r3, #32
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005652:	e00a      	b.n	800566a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3b01      	subs	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005668:	d0ea      	beq.n	8005640 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005676:	2200      	movs	r2, #0
 8005678:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005686:	2200      	movs	r2, #0
 8005688:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005698:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2200      	movs	r2, #0
 800569e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ac:	2200      	movs	r2, #0
 80056ae:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056bc:	2200      	movs	r2, #0
 80056be:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0201 	bic.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b60      	cmp	r3, #96	@ 0x60
 80056da:	d10e      	bne.n	80056fa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2200      	movs	r2, #0
 80056f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056f2:	6978      	ldr	r0, [r7, #20]
 80056f4:	f7fe fc80 	bl	8003ff8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056f8:	e027      	b.n	800574a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056fa:	7cfb      	ldrb	r3, [r7, #19]
 80056fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005700:	2b28      	cmp	r3, #40	@ 0x28
 8005702:	d117      	bne.n	8005734 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005722:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2200      	movs	r2, #0
 8005728:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2228      	movs	r2, #40	@ 0x28
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005732:	e007      	b.n	8005744 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2220      	movs	r2, #32
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005744:	6978      	ldr	r0, [r7, #20]
 8005746:	f7fe fc4d 	bl	8003fe4 <HAL_I2C_ErrorCallback>
}
 800574a:	bf00      	nop
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	2000000c 	.word	0x2000000c
 8005758:	14f8b589 	.word	0x14f8b589

0800575c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	4613      	mov	r3, r2
 800576a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800576c:	e048      	b.n	8005800 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d044      	beq.n	8005800 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005776:	f7fd f99b 	bl	8002ab0 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d302      	bcc.n	800578c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d139      	bne.n	8005800 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	0c1b      	lsrs	r3, r3, #16
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b01      	cmp	r3, #1
 8005794:	d10d      	bne.n	80057b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	43da      	mvns	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4013      	ands	r3, r2
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	e00c      	b.n	80057cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	43da      	mvns	r2, r3
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	4013      	ands	r3, r2
 80057be:	b29b      	uxth	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	bf0c      	ite	eq
 80057c4:	2301      	moveq	r3, #1
 80057c6:	2300      	movne	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	461a      	mov	r2, r3
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d116      	bne.n	8005800 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ec:	f043 0220 	orr.w	r2, r3, #32
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e023      	b.n	8005848 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	0c1b      	lsrs	r3, r3, #16
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b01      	cmp	r3, #1
 8005808:	d10d      	bne.n	8005826 <I2C_WaitOnFlagUntilTimeout+0xca>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	43da      	mvns	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4013      	ands	r3, r2
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	bf0c      	ite	eq
 800581c:	2301      	moveq	r3, #1
 800581e:	2300      	movne	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	e00c      	b.n	8005840 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	43da      	mvns	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4013      	ands	r3, r2
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf0c      	ite	eq
 8005838:	2301      	moveq	r3, #1
 800583a:	2300      	movne	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	461a      	mov	r2, r3
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	429a      	cmp	r2, r3
 8005844:	d093      	beq.n	800576e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800585e:	e071      	b.n	8005944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800586a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800586e:	d123      	bne.n	80058b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800587e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005888:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a4:	f043 0204 	orr.w	r2, r3, #4
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e067      	b.n	8005988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058be:	d041      	beq.n	8005944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c0:	f7fd f8f6 	bl	8002ab0 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d302      	bcc.n	80058d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d136      	bne.n	8005944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	0c1b      	lsrs	r3, r3, #16
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d10c      	bne.n	80058fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	43da      	mvns	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4013      	ands	r3, r2
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	bf14      	ite	ne
 80058f2:	2301      	movne	r3, #1
 80058f4:	2300      	moveq	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	e00b      	b.n	8005912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	43da      	mvns	r2, r3
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4013      	ands	r3, r2
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	bf14      	ite	ne
 800590c:	2301      	movne	r3, #1
 800590e:	2300      	moveq	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d016      	beq.n	8005944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005930:	f043 0220 	orr.w	r2, r3, #32
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e021      	b.n	8005988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	0c1b      	lsrs	r3, r3, #16
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b01      	cmp	r3, #1
 800594c:	d10c      	bne.n	8005968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	43da      	mvns	r2, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4013      	ands	r3, r2
 800595a:	b29b      	uxth	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	bf14      	ite	ne
 8005960:	2301      	movne	r3, #1
 8005962:	2300      	moveq	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	e00b      	b.n	8005980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	43da      	mvns	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	4013      	ands	r3, r2
 8005974:	b29b      	uxth	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	bf14      	ite	ne
 800597a:	2301      	movne	r3, #1
 800597c:	2300      	moveq	r3, #0
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	f47f af6d 	bne.w	8005860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800599c:	e034      	b.n	8005a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 f915 	bl	8005bce <I2C_IsAcknowledgeFailed>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e034      	b.n	8005a18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d028      	beq.n	8005a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b6:	f7fd f87b 	bl	8002ab0 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d302      	bcc.n	80059cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d11d      	bne.n	8005a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d6:	2b80      	cmp	r3, #128	@ 0x80
 80059d8:	d016      	beq.n	8005a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f4:	f043 0220 	orr.w	r2, r3, #32
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e007      	b.n	8005a18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a12:	2b80      	cmp	r3, #128	@ 0x80
 8005a14:	d1c3      	bne.n	800599e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a2c:	e034      	b.n	8005a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f8cd 	bl	8005bce <I2C_IsAcknowledgeFailed>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e034      	b.n	8005aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	d028      	beq.n	8005a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a46:	f7fd f833 	bl	8002ab0 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d302      	bcc.n	8005a5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d11d      	bne.n	8005a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d016      	beq.n	8005a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a84:	f043 0220 	orr.w	r2, r3, #32
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e007      	b.n	8005aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d1c3      	bne.n	8005a2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005abc:	4b13      	ldr	r3, [pc, #76]	@ (8005b0c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	08db      	lsrs	r3, r3, #3
 8005ac2:	4a13      	ldr	r2, [pc, #76]	@ (8005b10 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	0a1a      	lsrs	r2, r3, #8
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d107      	bne.n	8005aee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae2:	f043 0220 	orr.w	r2, r3, #32
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e008      	b.n	8005b00 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005af8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005afc:	d0e9      	beq.n	8005ad2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	2000000c 	.word	0x2000000c
 8005b10:	14f8b589 	.word	0x14f8b589

08005b14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b20:	e049      	b.n	8005bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	2b10      	cmp	r3, #16
 8005b2e:	d119      	bne.n	8005b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0210 	mvn.w	r2, #16
 8005b38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e030      	b.n	8005bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b64:	f7fc ffa4 	bl	8002ab0 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d302      	bcc.n	8005b7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d11d      	bne.n	8005bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b84:	2b40      	cmp	r3, #64	@ 0x40
 8005b86:	d016      	beq.n	8005bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba2:	f043 0220 	orr.w	r2, r3, #32
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e007      	b.n	8005bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc0:	2b40      	cmp	r3, #64	@ 0x40
 8005bc2:	d1ae      	bne.n	8005b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005be4:	d11b      	bne.n	8005c1e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005bee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0a:	f043 0204 	orr.w	r2, r3, #4
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c38:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005c3c:	d103      	bne.n	8005c46 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c44:	e007      	b.n	8005c56 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005c4e:	d102      	bne.n	8005c56 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2208      	movs	r2, #8
 8005c54:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e0cc      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c78:	4b68      	ldr	r3, [pc, #416]	@ (8005e1c <HAL_RCC_ClockConfig+0x1b8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d90c      	bls.n	8005ca0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c86:	4b65      	ldr	r3, [pc, #404]	@ (8005e1c <HAL_RCC_ClockConfig+0x1b8>)
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8e:	4b63      	ldr	r3, [pc, #396]	@ (8005e1c <HAL_RCC_ClockConfig+0x1b8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d001      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0b8      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d020      	beq.n	8005cee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cb8:	4b59      	ldr	r3, [pc, #356]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	4a58      	ldr	r2, [pc, #352]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005cc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cd0:	4b53      	ldr	r3, [pc, #332]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	4a52      	ldr	r2, [pc, #328]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005cda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cdc:	4b50      	ldr	r3, [pc, #320]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	494d      	ldr	r1, [pc, #308]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d044      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d107      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d02:	4b47      	ldr	r3, [pc, #284]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d119      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e07f      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d003      	beq.n	8005d22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d107      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d22:	4b3f      	ldr	r3, [pc, #252]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d109      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e06f      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d32:	4b3b      	ldr	r3, [pc, #236]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e067      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d42:	4b37      	ldr	r3, [pc, #220]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f023 0203 	bic.w	r2, r3, #3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	4934      	ldr	r1, [pc, #208]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d54:	f7fc feac 	bl	8002ab0 <HAL_GetTick>
 8005d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5a:	e00a      	b.n	8005d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d5c:	f7fc fea8 	bl	8002ab0 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e04f      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d72:	4b2b      	ldr	r3, [pc, #172]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 020c 	and.w	r2, r3, #12
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d1eb      	bne.n	8005d5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d84:	4b25      	ldr	r3, [pc, #148]	@ (8005e1c <HAL_RCC_ClockConfig+0x1b8>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 030f 	and.w	r3, r3, #15
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d20c      	bcs.n	8005dac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d92:	4b22      	ldr	r3, [pc, #136]	@ (8005e1c <HAL_RCC_ClockConfig+0x1b8>)
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9a:	4b20      	ldr	r3, [pc, #128]	@ (8005e1c <HAL_RCC_ClockConfig+0x1b8>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d001      	beq.n	8005dac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e032      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d008      	beq.n	8005dca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005db8:	4b19      	ldr	r3, [pc, #100]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	4916      	ldr	r1, [pc, #88]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dd6:	4b12      	ldr	r3, [pc, #72]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	490e      	ldr	r1, [pc, #56]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005dea:	f000 f855 	bl	8005e98 <HAL_RCC_GetSysClockFreq>
 8005dee:	4602      	mov	r2, r0
 8005df0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	490a      	ldr	r1, [pc, #40]	@ (8005e24 <HAL_RCC_ClockConfig+0x1c0>)
 8005dfc:	5ccb      	ldrb	r3, [r1, r3]
 8005dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005e02:	4a09      	ldr	r2, [pc, #36]	@ (8005e28 <HAL_RCC_ClockConfig+0x1c4>)
 8005e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e06:	4b09      	ldr	r3, [pc, #36]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fc fe0c 	bl	8002a28 <HAL_InitTick>

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40023c00 	.word	0x40023c00
 8005e20:	40023800 	.word	0x40023800
 8005e24:	0800b3c0 	.word	0x0800b3c0
 8005e28:	2000000c 	.word	0x2000000c
 8005e2c:	20000010 	.word	0x20000010

08005e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e34:	4b03      	ldr	r3, [pc, #12]	@ (8005e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e36:	681b      	ldr	r3, [r3, #0]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	2000000c 	.word	0x2000000c

08005e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e4c:	f7ff fff0 	bl	8005e30 <HAL_RCC_GetHCLKFreq>
 8005e50:	4602      	mov	r2, r0
 8005e52:	4b05      	ldr	r3, [pc, #20]	@ (8005e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	0a9b      	lsrs	r3, r3, #10
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	4903      	ldr	r1, [pc, #12]	@ (8005e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e5e:	5ccb      	ldrb	r3, [r1, r3]
 8005e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40023800 	.word	0x40023800
 8005e6c:	0800b3d0 	.word	0x0800b3d0

08005e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e74:	f7ff ffdc 	bl	8005e30 <HAL_RCC_GetHCLKFreq>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	4b05      	ldr	r3, [pc, #20]	@ (8005e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	0b5b      	lsrs	r3, r3, #13
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	4903      	ldr	r1, [pc, #12]	@ (8005e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e86:	5ccb      	ldrb	r3, [r1, r3]
 8005e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40023800 	.word	0x40023800
 8005e94:	0800b3d0 	.word	0x0800b3d0

08005e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e9c:	b0ae      	sub	sp, #184	@ 0xb8
 8005e9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ebe:	4bcb      	ldr	r3, [pc, #812]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 030c 	and.w	r3, r3, #12
 8005ec6:	2b0c      	cmp	r3, #12
 8005ec8:	f200 8206 	bhi.w	80062d8 <HAL_RCC_GetSysClockFreq+0x440>
 8005ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed2:	bf00      	nop
 8005ed4:	08005f09 	.word	0x08005f09
 8005ed8:	080062d9 	.word	0x080062d9
 8005edc:	080062d9 	.word	0x080062d9
 8005ee0:	080062d9 	.word	0x080062d9
 8005ee4:	08005f11 	.word	0x08005f11
 8005ee8:	080062d9 	.word	0x080062d9
 8005eec:	080062d9 	.word	0x080062d9
 8005ef0:	080062d9 	.word	0x080062d9
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	080062d9 	.word	0x080062d9
 8005efc:	080062d9 	.word	0x080062d9
 8005f00:	080062d9 	.word	0x080062d9
 8005f04:	08006109 	.word	0x08006109
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f08:	4bb9      	ldr	r3, [pc, #740]	@ (80061f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f0e:	e1e7      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f10:	4bb8      	ldr	r3, [pc, #736]	@ (80061f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005f12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f16:	e1e3      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f18:	4bb4      	ldr	r3, [pc, #720]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f24:	4bb1      	ldr	r3, [pc, #708]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d071      	beq.n	8006014 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f30:	4bae      	ldr	r3, [pc, #696]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	099b      	lsrs	r3, r3, #6
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f3c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f56:	4622      	mov	r2, r4
 8005f58:	462b      	mov	r3, r5
 8005f5a:	f04f 0000 	mov.w	r0, #0
 8005f5e:	f04f 0100 	mov.w	r1, #0
 8005f62:	0159      	lsls	r1, r3, #5
 8005f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f68:	0150      	lsls	r0, r2, #5
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4621      	mov	r1, r4
 8005f70:	1a51      	subs	r1, r2, r1
 8005f72:	6439      	str	r1, [r7, #64]	@ 0x40
 8005f74:	4629      	mov	r1, r5
 8005f76:	eb63 0301 	sbc.w	r3, r3, r1
 8005f7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005f88:	4649      	mov	r1, r9
 8005f8a:	018b      	lsls	r3, r1, #6
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f92:	4641      	mov	r1, r8
 8005f94:	018a      	lsls	r2, r1, #6
 8005f96:	4641      	mov	r1, r8
 8005f98:	1a51      	subs	r1, r2, r1
 8005f9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8005fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	00cb      	lsls	r3, r1, #3
 8005fb4:	4641      	mov	r1, r8
 8005fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fba:	4641      	mov	r1, r8
 8005fbc:	00ca      	lsls	r2, r1, #3
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	189b      	adds	r3, r3, r2
 8005fc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fca:	462b      	mov	r3, r5
 8005fcc:	460a      	mov	r2, r1
 8005fce:	eb42 0303 	adc.w	r3, r2, r3
 8005fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	024b      	lsls	r3, r1, #9
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fea:	4621      	mov	r1, r4
 8005fec:	024a      	lsls	r2, r1, #9
 8005fee:	4610      	mov	r0, r2
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ffc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006000:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006004:	f7fa fdf0 	bl	8000be8 <__aeabi_uldivmod>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4613      	mov	r3, r2
 800600e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006012:	e067      	b.n	80060e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006014:	4b75      	ldr	r3, [pc, #468]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	099b      	lsrs	r3, r3, #6
 800601a:	2200      	movs	r2, #0
 800601c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006020:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006024:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800602e:	2300      	movs	r3, #0
 8006030:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006032:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006036:	4622      	mov	r2, r4
 8006038:	462b      	mov	r3, r5
 800603a:	f04f 0000 	mov.w	r0, #0
 800603e:	f04f 0100 	mov.w	r1, #0
 8006042:	0159      	lsls	r1, r3, #5
 8006044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006048:	0150      	lsls	r0, r2, #5
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4621      	mov	r1, r4
 8006050:	1a51      	subs	r1, r2, r1
 8006052:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006054:	4629      	mov	r1, r5
 8006056:	eb63 0301 	sbc.w	r3, r3, r1
 800605a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006068:	4649      	mov	r1, r9
 800606a:	018b      	lsls	r3, r1, #6
 800606c:	4641      	mov	r1, r8
 800606e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006072:	4641      	mov	r1, r8
 8006074:	018a      	lsls	r2, r1, #6
 8006076:	4641      	mov	r1, r8
 8006078:	ebb2 0a01 	subs.w	sl, r2, r1
 800607c:	4649      	mov	r1, r9
 800607e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006082:	f04f 0200 	mov.w	r2, #0
 8006086:	f04f 0300 	mov.w	r3, #0
 800608a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800608e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006092:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006096:	4692      	mov	sl, r2
 8006098:	469b      	mov	fp, r3
 800609a:	4623      	mov	r3, r4
 800609c:	eb1a 0303 	adds.w	r3, sl, r3
 80060a0:	623b      	str	r3, [r7, #32]
 80060a2:	462b      	mov	r3, r5
 80060a4:	eb4b 0303 	adc.w	r3, fp, r3
 80060a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	f04f 0300 	mov.w	r3, #0
 80060b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80060b6:	4629      	mov	r1, r5
 80060b8:	028b      	lsls	r3, r1, #10
 80060ba:	4621      	mov	r1, r4
 80060bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060c0:	4621      	mov	r1, r4
 80060c2:	028a      	lsls	r2, r1, #10
 80060c4:	4610      	mov	r0, r2
 80060c6:	4619      	mov	r1, r3
 80060c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060cc:	2200      	movs	r2, #0
 80060ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80060d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80060d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80060d6:	f7fa fd87 	bl	8000be8 <__aeabi_uldivmod>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4613      	mov	r3, r2
 80060e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80060e4:	4b41      	ldr	r3, [pc, #260]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	0c1b      	lsrs	r3, r3, #16
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	3301      	adds	r3, #1
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80060f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006102:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006106:	e0eb      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006108:	4b38      	ldr	r3, [pc, #224]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006110:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006114:	4b35      	ldr	r3, [pc, #212]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d06b      	beq.n	80061f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006120:	4b32      	ldr	r3, [pc, #200]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	099b      	lsrs	r3, r3, #6
 8006126:	2200      	movs	r2, #0
 8006128:	66bb      	str	r3, [r7, #104]	@ 0x68
 800612a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800612c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800612e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006132:	663b      	str	r3, [r7, #96]	@ 0x60
 8006134:	2300      	movs	r3, #0
 8006136:	667b      	str	r3, [r7, #100]	@ 0x64
 8006138:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800613c:	4622      	mov	r2, r4
 800613e:	462b      	mov	r3, r5
 8006140:	f04f 0000 	mov.w	r0, #0
 8006144:	f04f 0100 	mov.w	r1, #0
 8006148:	0159      	lsls	r1, r3, #5
 800614a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800614e:	0150      	lsls	r0, r2, #5
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	4621      	mov	r1, r4
 8006156:	1a51      	subs	r1, r2, r1
 8006158:	61b9      	str	r1, [r7, #24]
 800615a:	4629      	mov	r1, r5
 800615c:	eb63 0301 	sbc.w	r3, r3, r1
 8006160:	61fb      	str	r3, [r7, #28]
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800616e:	4659      	mov	r1, fp
 8006170:	018b      	lsls	r3, r1, #6
 8006172:	4651      	mov	r1, sl
 8006174:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006178:	4651      	mov	r1, sl
 800617a:	018a      	lsls	r2, r1, #6
 800617c:	4651      	mov	r1, sl
 800617e:	ebb2 0801 	subs.w	r8, r2, r1
 8006182:	4659      	mov	r1, fp
 8006184:	eb63 0901 	sbc.w	r9, r3, r1
 8006188:	f04f 0200 	mov.w	r2, #0
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006194:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006198:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800619c:	4690      	mov	r8, r2
 800619e:	4699      	mov	r9, r3
 80061a0:	4623      	mov	r3, r4
 80061a2:	eb18 0303 	adds.w	r3, r8, r3
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	462b      	mov	r3, r5
 80061aa:	eb49 0303 	adc.w	r3, r9, r3
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80061bc:	4629      	mov	r1, r5
 80061be:	024b      	lsls	r3, r1, #9
 80061c0:	4621      	mov	r1, r4
 80061c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061c6:	4621      	mov	r1, r4
 80061c8:	024a      	lsls	r2, r1, #9
 80061ca:	4610      	mov	r0, r2
 80061cc:	4619      	mov	r1, r3
 80061ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061d2:	2200      	movs	r2, #0
 80061d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80061d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80061dc:	f7fa fd04 	bl	8000be8 <__aeabi_uldivmod>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4613      	mov	r3, r2
 80061e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061ea:	e065      	b.n	80062b8 <HAL_RCC_GetSysClockFreq+0x420>
 80061ec:	40023800 	.word	0x40023800
 80061f0:	00f42400 	.word	0x00f42400
 80061f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061f8:	4b3d      	ldr	r3, [pc, #244]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	099b      	lsrs	r3, r3, #6
 80061fe:	2200      	movs	r2, #0
 8006200:	4618      	mov	r0, r3
 8006202:	4611      	mov	r1, r2
 8006204:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006208:	653b      	str	r3, [r7, #80]	@ 0x50
 800620a:	2300      	movs	r3, #0
 800620c:	657b      	str	r3, [r7, #84]	@ 0x54
 800620e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006212:	4642      	mov	r2, r8
 8006214:	464b      	mov	r3, r9
 8006216:	f04f 0000 	mov.w	r0, #0
 800621a:	f04f 0100 	mov.w	r1, #0
 800621e:	0159      	lsls	r1, r3, #5
 8006220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006224:	0150      	lsls	r0, r2, #5
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4641      	mov	r1, r8
 800622c:	1a51      	subs	r1, r2, r1
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	4649      	mov	r1, r9
 8006232:	eb63 0301 	sbc.w	r3, r3, r1
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006244:	4659      	mov	r1, fp
 8006246:	018b      	lsls	r3, r1, #6
 8006248:	4651      	mov	r1, sl
 800624a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800624e:	4651      	mov	r1, sl
 8006250:	018a      	lsls	r2, r1, #6
 8006252:	4651      	mov	r1, sl
 8006254:	1a54      	subs	r4, r2, r1
 8006256:	4659      	mov	r1, fp
 8006258:	eb63 0501 	sbc.w	r5, r3, r1
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	00eb      	lsls	r3, r5, #3
 8006266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800626a:	00e2      	lsls	r2, r4, #3
 800626c:	4614      	mov	r4, r2
 800626e:	461d      	mov	r5, r3
 8006270:	4643      	mov	r3, r8
 8006272:	18e3      	adds	r3, r4, r3
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	464b      	mov	r3, r9
 8006278:	eb45 0303 	adc.w	r3, r5, r3
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800628a:	4629      	mov	r1, r5
 800628c:	028b      	lsls	r3, r1, #10
 800628e:	4621      	mov	r1, r4
 8006290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006294:	4621      	mov	r1, r4
 8006296:	028a      	lsls	r2, r1, #10
 8006298:	4610      	mov	r0, r2
 800629a:	4619      	mov	r1, r3
 800629c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062a0:	2200      	movs	r2, #0
 80062a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80062a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062aa:	f7fa fc9d 	bl	8000be8 <__aeabi_uldivmod>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4613      	mov	r3, r2
 80062b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80062b8:	4b0d      	ldr	r3, [pc, #52]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	0f1b      	lsrs	r3, r3, #28
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80062c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80062ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80062ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80062d6:	e003      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062d8:	4b06      	ldr	r3, [pc, #24]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80062da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80062de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	37b8      	adds	r7, #184	@ 0xb8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ee:	bf00      	nop
 80062f0:	40023800 	.word	0x40023800
 80062f4:	00f42400 	.word	0x00f42400

080062f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e28d      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 8083 	beq.w	800641e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006318:	4b94      	ldr	r3, [pc, #592]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 030c 	and.w	r3, r3, #12
 8006320:	2b04      	cmp	r3, #4
 8006322:	d019      	beq.n	8006358 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006324:	4b91      	ldr	r3, [pc, #580]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f003 030c 	and.w	r3, r3, #12
        || \
 800632c:	2b08      	cmp	r3, #8
 800632e:	d106      	bne.n	800633e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006330:	4b8e      	ldr	r3, [pc, #568]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006338:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800633c:	d00c      	beq.n	8006358 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800633e:	4b8b      	ldr	r3, [pc, #556]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006346:	2b0c      	cmp	r3, #12
 8006348:	d112      	bne.n	8006370 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800634a:	4b88      	ldr	r3, [pc, #544]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006352:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006356:	d10b      	bne.n	8006370 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006358:	4b84      	ldr	r3, [pc, #528]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d05b      	beq.n	800641c <HAL_RCC_OscConfig+0x124>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d157      	bne.n	800641c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e25a      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006378:	d106      	bne.n	8006388 <HAL_RCC_OscConfig+0x90>
 800637a:	4b7c      	ldr	r3, [pc, #496]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a7b      	ldr	r2, [pc, #492]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 8006380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	e01d      	b.n	80063c4 <HAL_RCC_OscConfig+0xcc>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006390:	d10c      	bne.n	80063ac <HAL_RCC_OscConfig+0xb4>
 8006392:	4b76      	ldr	r3, [pc, #472]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a75      	ldr	r2, [pc, #468]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 8006398:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	4b73      	ldr	r3, [pc, #460]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a72      	ldr	r2, [pc, #456]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 80063a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	e00b      	b.n	80063c4 <HAL_RCC_OscConfig+0xcc>
 80063ac:	4b6f      	ldr	r3, [pc, #444]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a6e      	ldr	r2, [pc, #440]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 80063b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	4b6c      	ldr	r3, [pc, #432]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a6b      	ldr	r2, [pc, #428]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 80063be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d013      	beq.n	80063f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063cc:	f7fc fb70 	bl	8002ab0 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063d4:	f7fc fb6c 	bl	8002ab0 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b64      	cmp	r3, #100	@ 0x64
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e21f      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e6:	4b61      	ldr	r3, [pc, #388]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0f0      	beq.n	80063d4 <HAL_RCC_OscConfig+0xdc>
 80063f2:	e014      	b.n	800641e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f4:	f7fc fb5c 	bl	8002ab0 <HAL_GetTick>
 80063f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063fa:	e008      	b.n	800640e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063fc:	f7fc fb58 	bl	8002ab0 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b64      	cmp	r3, #100	@ 0x64
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e20b      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800640e:	4b57      	ldr	r3, [pc, #348]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f0      	bne.n	80063fc <HAL_RCC_OscConfig+0x104>
 800641a:	e000      	b.n	800641e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800641c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d06f      	beq.n	800650a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800642a:	4b50      	ldr	r3, [pc, #320]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 030c 	and.w	r3, r3, #12
 8006432:	2b00      	cmp	r3, #0
 8006434:	d017      	beq.n	8006466 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006436:	4b4d      	ldr	r3, [pc, #308]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 030c 	and.w	r3, r3, #12
        || \
 800643e:	2b08      	cmp	r3, #8
 8006440:	d105      	bne.n	800644e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006442:	4b4a      	ldr	r3, [pc, #296]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00b      	beq.n	8006466 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800644e:	4b47      	ldr	r3, [pc, #284]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006456:	2b0c      	cmp	r3, #12
 8006458:	d11c      	bne.n	8006494 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800645a:	4b44      	ldr	r3, [pc, #272]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d116      	bne.n	8006494 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006466:	4b41      	ldr	r3, [pc, #260]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <HAL_RCC_OscConfig+0x186>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d001      	beq.n	800647e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e1d3      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800647e:	4b3b      	ldr	r3, [pc, #236]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	4937      	ldr	r1, [pc, #220]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 800648e:	4313      	orrs	r3, r2
 8006490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006492:	e03a      	b.n	800650a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d020      	beq.n	80064de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800649c:	4b34      	ldr	r3, [pc, #208]	@ (8006570 <HAL_RCC_OscConfig+0x278>)
 800649e:	2201      	movs	r2, #1
 80064a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a2:	f7fc fb05 	bl	8002ab0 <HAL_GetTick>
 80064a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064a8:	e008      	b.n	80064bc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064aa:	f7fc fb01 	bl	8002ab0 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d901      	bls.n	80064bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e1b4      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064bc:	4b2b      	ldr	r3, [pc, #172]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0f0      	beq.n	80064aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064c8:	4b28      	ldr	r3, [pc, #160]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	4925      	ldr	r1, [pc, #148]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	600b      	str	r3, [r1, #0]
 80064dc:	e015      	b.n	800650a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064de:	4b24      	ldr	r3, [pc, #144]	@ (8006570 <HAL_RCC_OscConfig+0x278>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e4:	f7fc fae4 	bl	8002ab0 <HAL_GetTick>
 80064e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ea:	e008      	b.n	80064fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ec:	f7fc fae0 	bl	8002ab0 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e193      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064fe:	4b1b      	ldr	r3, [pc, #108]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f0      	bne.n	80064ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d036      	beq.n	8006584 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d016      	beq.n	800654c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800651e:	4b15      	ldr	r3, [pc, #84]	@ (8006574 <HAL_RCC_OscConfig+0x27c>)
 8006520:	2201      	movs	r2, #1
 8006522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006524:	f7fc fac4 	bl	8002ab0 <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800652c:	f7fc fac0 	bl	8002ab0 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e173      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800653e:	4b0b      	ldr	r3, [pc, #44]	@ (800656c <HAL_RCC_OscConfig+0x274>)
 8006540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0f0      	beq.n	800652c <HAL_RCC_OscConfig+0x234>
 800654a:	e01b      	b.n	8006584 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800654c:	4b09      	ldr	r3, [pc, #36]	@ (8006574 <HAL_RCC_OscConfig+0x27c>)
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006552:	f7fc faad 	bl	8002ab0 <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006558:	e00e      	b.n	8006578 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800655a:	f7fc faa9 	bl	8002ab0 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d907      	bls.n	8006578 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e15c      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
 800656c:	40023800 	.word	0x40023800
 8006570:	42470000 	.word	0x42470000
 8006574:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006578:	4b8a      	ldr	r3, [pc, #552]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800657a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1ea      	bne.n	800655a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 8097 	beq.w	80066c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006592:	2300      	movs	r3, #0
 8006594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006596:	4b83      	ldr	r3, [pc, #524]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10f      	bne.n	80065c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065a2:	2300      	movs	r3, #0
 80065a4:	60bb      	str	r3, [r7, #8]
 80065a6:	4b7f      	ldr	r3, [pc, #508]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065aa:	4a7e      	ldr	r2, [pc, #504]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 80065ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80065b2:	4b7c      	ldr	r3, [pc, #496]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 80065b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ba:	60bb      	str	r3, [r7, #8]
 80065bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065be:	2301      	movs	r3, #1
 80065c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c2:	4b79      	ldr	r3, [pc, #484]	@ (80067a8 <HAL_RCC_OscConfig+0x4b0>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d118      	bne.n	8006600 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065ce:	4b76      	ldr	r3, [pc, #472]	@ (80067a8 <HAL_RCC_OscConfig+0x4b0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a75      	ldr	r2, [pc, #468]	@ (80067a8 <HAL_RCC_OscConfig+0x4b0>)
 80065d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065da:	f7fc fa69 	bl	8002ab0 <HAL_GetTick>
 80065de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e0:	e008      	b.n	80065f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065e2:	f7fc fa65 	bl	8002ab0 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d901      	bls.n	80065f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e118      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f4:	4b6c      	ldr	r3, [pc, #432]	@ (80067a8 <HAL_RCC_OscConfig+0x4b0>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0f0      	beq.n	80065e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d106      	bne.n	8006616 <HAL_RCC_OscConfig+0x31e>
 8006608:	4b66      	ldr	r3, [pc, #408]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800660c:	4a65      	ldr	r2, [pc, #404]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800660e:	f043 0301 	orr.w	r3, r3, #1
 8006612:	6713      	str	r3, [r2, #112]	@ 0x70
 8006614:	e01c      	b.n	8006650 <HAL_RCC_OscConfig+0x358>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	2b05      	cmp	r3, #5
 800661c:	d10c      	bne.n	8006638 <HAL_RCC_OscConfig+0x340>
 800661e:	4b61      	ldr	r3, [pc, #388]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006622:	4a60      	ldr	r2, [pc, #384]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006624:	f043 0304 	orr.w	r3, r3, #4
 8006628:	6713      	str	r3, [r2, #112]	@ 0x70
 800662a:	4b5e      	ldr	r3, [pc, #376]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800662c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662e:	4a5d      	ldr	r2, [pc, #372]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006630:	f043 0301 	orr.w	r3, r3, #1
 8006634:	6713      	str	r3, [r2, #112]	@ 0x70
 8006636:	e00b      	b.n	8006650 <HAL_RCC_OscConfig+0x358>
 8006638:	4b5a      	ldr	r3, [pc, #360]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800663a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800663c:	4a59      	ldr	r2, [pc, #356]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	6713      	str	r3, [r2, #112]	@ 0x70
 8006644:	4b57      	ldr	r3, [pc, #348]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006648:	4a56      	ldr	r2, [pc, #344]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800664a:	f023 0304 	bic.w	r3, r3, #4
 800664e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d015      	beq.n	8006684 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006658:	f7fc fa2a 	bl	8002ab0 <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800665e:	e00a      	b.n	8006676 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006660:	f7fc fa26 	bl	8002ab0 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800666e:	4293      	cmp	r3, r2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e0d7      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006676:	4b4b      	ldr	r3, [pc, #300]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0ee      	beq.n	8006660 <HAL_RCC_OscConfig+0x368>
 8006682:	e014      	b.n	80066ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006684:	f7fc fa14 	bl	8002ab0 <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800668a:	e00a      	b.n	80066a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800668c:	f7fc fa10 	bl	8002ab0 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800669a:	4293      	cmp	r3, r2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e0c1      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066a2:	4b40      	ldr	r3, [pc, #256]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 80066a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1ee      	bne.n	800668c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d105      	bne.n	80066c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066b4:	4b3b      	ldr	r3, [pc, #236]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 80066b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b8:	4a3a      	ldr	r2, [pc, #232]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 80066ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 80ad 	beq.w	8006824 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066ca:	4b36      	ldr	r3, [pc, #216]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 030c 	and.w	r3, r3, #12
 80066d2:	2b08      	cmp	r3, #8
 80066d4:	d060      	beq.n	8006798 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d145      	bne.n	800676a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066de:	4b33      	ldr	r3, [pc, #204]	@ (80067ac <HAL_RCC_OscConfig+0x4b4>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e4:	f7fc f9e4 	bl	8002ab0 <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ec:	f7fc f9e0 	bl	8002ab0 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e093      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066fe:	4b29      	ldr	r3, [pc, #164]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1f0      	bne.n	80066ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69da      	ldr	r2, [r3, #28]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	019b      	lsls	r3, r3, #6
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006720:	085b      	lsrs	r3, r3, #1
 8006722:	3b01      	subs	r3, #1
 8006724:	041b      	lsls	r3, r3, #16
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672c:	061b      	lsls	r3, r3, #24
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006734:	071b      	lsls	r3, r3, #28
 8006736:	491b      	ldr	r1, [pc, #108]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006738:	4313      	orrs	r3, r2
 800673a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800673c:	4b1b      	ldr	r3, [pc, #108]	@ (80067ac <HAL_RCC_OscConfig+0x4b4>)
 800673e:	2201      	movs	r2, #1
 8006740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006742:	f7fc f9b5 	bl	8002ab0 <HAL_GetTick>
 8006746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006748:	e008      	b.n	800675c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800674a:	f7fc f9b1 	bl	8002ab0 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e064      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800675c:	4b11      	ldr	r3, [pc, #68]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0f0      	beq.n	800674a <HAL_RCC_OscConfig+0x452>
 8006768:	e05c      	b.n	8006824 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800676a:	4b10      	ldr	r3, [pc, #64]	@ (80067ac <HAL_RCC_OscConfig+0x4b4>)
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006770:	f7fc f99e 	bl	8002ab0 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006778:	f7fc f99a 	bl	8002ab0 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e04d      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800678a:	4b06      	ldr	r3, [pc, #24]	@ (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f0      	bne.n	8006778 <HAL_RCC_OscConfig+0x480>
 8006796:	e045      	b.n	8006824 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d107      	bne.n	80067b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e040      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
 80067a4:	40023800 	.word	0x40023800
 80067a8:	40007000 	.word	0x40007000
 80067ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006830 <HAL_RCC_OscConfig+0x538>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d030      	beq.n	8006820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d129      	bne.n	8006820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d122      	bne.n	8006820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80067e0:	4013      	ands	r3, r2
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d119      	bne.n	8006820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f6:	085b      	lsrs	r3, r3, #1
 80067f8:	3b01      	subs	r3, #1
 80067fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d10f      	bne.n	8006820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800680c:	429a      	cmp	r2, r3
 800680e:	d107      	bne.n	8006820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800681c:	429a      	cmp	r2, r3
 800681e:	d001      	beq.n	8006824 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e000      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	40023800 	.word	0x40023800

08006834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e041      	b.n	80068ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d106      	bne.n	8006860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7fb fea4 	bl	80025a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3304      	adds	r3, #4
 8006870:	4619      	mov	r1, r3
 8006872:	4610      	mov	r0, r2
 8006874:	f000 fad8 	bl	8006e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e041      	b.n	8006968 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d106      	bne.n	80068fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f839 	bl	8006970 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2202      	movs	r2, #2
 8006902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3304      	adds	r3, #4
 800690e:	4619      	mov	r1, r3
 8006910:	4610      	mov	r0, r2
 8006912:	f000 fa89 	bl	8006e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d109      	bne.n	80069a8 <HAL_TIM_PWM_Start+0x24>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b01      	cmp	r3, #1
 800699e:	bf14      	ite	ne
 80069a0:	2301      	movne	r3, #1
 80069a2:	2300      	moveq	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	e022      	b.n	80069ee <HAL_TIM_PWM_Start+0x6a>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d109      	bne.n	80069c2 <HAL_TIM_PWM_Start+0x3e>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	bf14      	ite	ne
 80069ba:	2301      	movne	r3, #1
 80069bc:	2300      	moveq	r3, #0
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	e015      	b.n	80069ee <HAL_TIM_PWM_Start+0x6a>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d109      	bne.n	80069dc <HAL_TIM_PWM_Start+0x58>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	bf14      	ite	ne
 80069d4:	2301      	movne	r3, #1
 80069d6:	2300      	moveq	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	e008      	b.n	80069ee <HAL_TIM_PWM_Start+0x6a>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	bf14      	ite	ne
 80069e8:	2301      	movne	r3, #1
 80069ea:	2300      	moveq	r3, #0
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e07c      	b.n	8006af0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <HAL_TIM_PWM_Start+0x82>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a04:	e013      	b.n	8006a2e <HAL_TIM_PWM_Start+0xaa>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d104      	bne.n	8006a16 <HAL_TIM_PWM_Start+0x92>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a14:	e00b      	b.n	8006a2e <HAL_TIM_PWM_Start+0xaa>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d104      	bne.n	8006a26 <HAL_TIM_PWM_Start+0xa2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a24:	e003      	b.n	8006a2e <HAL_TIM_PWM_Start+0xaa>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2201      	movs	r2, #1
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fce6 	bl	8007408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a2d      	ldr	r2, [pc, #180]	@ (8006af8 <HAL_TIM_PWM_Start+0x174>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_TIM_PWM_Start+0xcc>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a2c      	ldr	r2, [pc, #176]	@ (8006afc <HAL_TIM_PWM_Start+0x178>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d101      	bne.n	8006a54 <HAL_TIM_PWM_Start+0xd0>
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <HAL_TIM_PWM_Start+0xd2>
 8006a54:	2300      	movs	r3, #0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d007      	beq.n	8006a6a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a22      	ldr	r2, [pc, #136]	@ (8006af8 <HAL_TIM_PWM_Start+0x174>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d022      	beq.n	8006aba <HAL_TIM_PWM_Start+0x136>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a7c:	d01d      	beq.n	8006aba <HAL_TIM_PWM_Start+0x136>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1f      	ldr	r2, [pc, #124]	@ (8006b00 <HAL_TIM_PWM_Start+0x17c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d018      	beq.n	8006aba <HAL_TIM_PWM_Start+0x136>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006b04 <HAL_TIM_PWM_Start+0x180>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_TIM_PWM_Start+0x136>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1c      	ldr	r2, [pc, #112]	@ (8006b08 <HAL_TIM_PWM_Start+0x184>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <HAL_TIM_PWM_Start+0x136>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a16      	ldr	r2, [pc, #88]	@ (8006afc <HAL_TIM_PWM_Start+0x178>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <HAL_TIM_PWM_Start+0x136>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a18      	ldr	r2, [pc, #96]	@ (8006b0c <HAL_TIM_PWM_Start+0x188>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_TIM_PWM_Start+0x136>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a16      	ldr	r2, [pc, #88]	@ (8006b10 <HAL_TIM_PWM_Start+0x18c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d111      	bne.n	8006ade <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b06      	cmp	r3, #6
 8006aca:	d010      	beq.n	8006aee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0201 	orr.w	r2, r2, #1
 8006ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006adc:	e007      	b.n	8006aee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f042 0201 	orr.w	r2, r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40010000 	.word	0x40010000
 8006afc:	40010400 	.word	0x40010400
 8006b00:	40000400 	.word	0x40000400
 8006b04:	40000800 	.word	0x40000800
 8006b08:	40000c00 	.word	0x40000c00
 8006b0c:	40014000 	.word	0x40014000
 8006b10:	40001800 	.word	0x40001800

08006b14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d101      	bne.n	8006b32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b2e:	2302      	movs	r3, #2
 8006b30:	e0ae      	b.n	8006c90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b0c      	cmp	r3, #12
 8006b3e:	f200 809f 	bhi.w	8006c80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b42:	a201      	add	r2, pc, #4	@ (adr r2, 8006b48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006b7d 	.word	0x08006b7d
 8006b4c:	08006c81 	.word	0x08006c81
 8006b50:	08006c81 	.word	0x08006c81
 8006b54:	08006c81 	.word	0x08006c81
 8006b58:	08006bbd 	.word	0x08006bbd
 8006b5c:	08006c81 	.word	0x08006c81
 8006b60:	08006c81 	.word	0x08006c81
 8006b64:	08006c81 	.word	0x08006c81
 8006b68:	08006bff 	.word	0x08006bff
 8006b6c:	08006c81 	.word	0x08006c81
 8006b70:	08006c81 	.word	0x08006c81
 8006b74:	08006c81 	.word	0x08006c81
 8006b78:	08006c3f 	.word	0x08006c3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 f9f6 	bl	8006f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0208 	orr.w	r2, r2, #8
 8006b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699a      	ldr	r2, [r3, #24]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0204 	bic.w	r2, r2, #4
 8006ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6999      	ldr	r1, [r3, #24]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	691a      	ldr	r2, [r3, #16]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	619a      	str	r2, [r3, #24]
      break;
 8006bba:	e064      	b.n	8006c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68b9      	ldr	r1, [r7, #8]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fa46 	bl	8007054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699a      	ldr	r2, [r3, #24]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699a      	ldr	r2, [r3, #24]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6999      	ldr	r1, [r3, #24]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	021a      	lsls	r2, r3, #8
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	619a      	str	r2, [r3, #24]
      break;
 8006bfc:	e043      	b.n	8006c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fa9b 	bl	8007140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69da      	ldr	r2, [r3, #28]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f042 0208 	orr.w	r2, r2, #8
 8006c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69da      	ldr	r2, [r3, #28]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0204 	bic.w	r2, r2, #4
 8006c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69d9      	ldr	r1, [r3, #28]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	691a      	ldr	r2, [r3, #16]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	61da      	str	r2, [r3, #28]
      break;
 8006c3c:	e023      	b.n	8006c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68b9      	ldr	r1, [r7, #8]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 faef 	bl	8007228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69da      	ldr	r2, [r3, #28]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69da      	ldr	r2, [r3, #28]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69d9      	ldr	r1, [r3, #28]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	021a      	lsls	r2, r3, #8
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	61da      	str	r2, [r3, #28]
      break;
 8006c7e:	e002      	b.n	8006c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	75fb      	strb	r3, [r7, #23]
      break;
 8006c84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_TIM_ConfigClockSource+0x1c>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e0b4      	b.n	8006e1e <HAL_TIM_ConfigClockSource+0x186>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cec:	d03e      	beq.n	8006d6c <HAL_TIM_ConfigClockSource+0xd4>
 8006cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cf2:	f200 8087 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cfa:	f000 8086 	beq.w	8006e0a <HAL_TIM_ConfigClockSource+0x172>
 8006cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d02:	d87f      	bhi.n	8006e04 <HAL_TIM_ConfigClockSource+0x16c>
 8006d04:	2b70      	cmp	r3, #112	@ 0x70
 8006d06:	d01a      	beq.n	8006d3e <HAL_TIM_ConfigClockSource+0xa6>
 8006d08:	2b70      	cmp	r3, #112	@ 0x70
 8006d0a:	d87b      	bhi.n	8006e04 <HAL_TIM_ConfigClockSource+0x16c>
 8006d0c:	2b60      	cmp	r3, #96	@ 0x60
 8006d0e:	d050      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0x11a>
 8006d10:	2b60      	cmp	r3, #96	@ 0x60
 8006d12:	d877      	bhi.n	8006e04 <HAL_TIM_ConfigClockSource+0x16c>
 8006d14:	2b50      	cmp	r3, #80	@ 0x50
 8006d16:	d03c      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0xfa>
 8006d18:	2b50      	cmp	r3, #80	@ 0x50
 8006d1a:	d873      	bhi.n	8006e04 <HAL_TIM_ConfigClockSource+0x16c>
 8006d1c:	2b40      	cmp	r3, #64	@ 0x40
 8006d1e:	d058      	beq.n	8006dd2 <HAL_TIM_ConfigClockSource+0x13a>
 8006d20:	2b40      	cmp	r3, #64	@ 0x40
 8006d22:	d86f      	bhi.n	8006e04 <HAL_TIM_ConfigClockSource+0x16c>
 8006d24:	2b30      	cmp	r3, #48	@ 0x30
 8006d26:	d064      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x15a>
 8006d28:	2b30      	cmp	r3, #48	@ 0x30
 8006d2a:	d86b      	bhi.n	8006e04 <HAL_TIM_ConfigClockSource+0x16c>
 8006d2c:	2b20      	cmp	r3, #32
 8006d2e:	d060      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x15a>
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	d867      	bhi.n	8006e04 <HAL_TIM_ConfigClockSource+0x16c>
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d05c      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x15a>
 8006d38:	2b10      	cmp	r3, #16
 8006d3a:	d05a      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x15a>
 8006d3c:	e062      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d4e:	f000 fb3b 	bl	80073c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	609a      	str	r2, [r3, #8]
      break;
 8006d6a:	e04f      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d7c:	f000 fb24 	bl	80073c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d8e:	609a      	str	r2, [r3, #8]
      break;
 8006d90:	e03c      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f000 fa98 	bl	80072d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2150      	movs	r1, #80	@ 0x50
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 faf1 	bl	8007392 <TIM_ITRx_SetConfig>
      break;
 8006db0:	e02c      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f000 fab7 	bl	8007332 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2160      	movs	r1, #96	@ 0x60
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fae1 	bl	8007392 <TIM_ITRx_SetConfig>
      break;
 8006dd0:	e01c      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dde:	461a      	mov	r2, r3
 8006de0:	f000 fa78 	bl	80072d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2140      	movs	r1, #64	@ 0x40
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 fad1 	bl	8007392 <TIM_ITRx_SetConfig>
      break;
 8006df0:	e00c      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	f000 fac8 	bl	8007392 <TIM_ITRx_SetConfig>
      break;
 8006e02:	e003      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	73fb      	strb	r3, [r7, #15]
      break;
 8006e08:	e000      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a43      	ldr	r2, [pc, #268]	@ (8006f48 <TIM_Base_SetConfig+0x120>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d013      	beq.n	8006e68 <TIM_Base_SetConfig+0x40>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e46:	d00f      	beq.n	8006e68 <TIM_Base_SetConfig+0x40>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a40      	ldr	r2, [pc, #256]	@ (8006f4c <TIM_Base_SetConfig+0x124>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00b      	beq.n	8006e68 <TIM_Base_SetConfig+0x40>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a3f      	ldr	r2, [pc, #252]	@ (8006f50 <TIM_Base_SetConfig+0x128>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d007      	beq.n	8006e68 <TIM_Base_SetConfig+0x40>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a3e      	ldr	r2, [pc, #248]	@ (8006f54 <TIM_Base_SetConfig+0x12c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_Base_SetConfig+0x40>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a3d      	ldr	r2, [pc, #244]	@ (8006f58 <TIM_Base_SetConfig+0x130>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d108      	bne.n	8006e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a32      	ldr	r2, [pc, #200]	@ (8006f48 <TIM_Base_SetConfig+0x120>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d02b      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e88:	d027      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a2f      	ldr	r2, [pc, #188]	@ (8006f4c <TIM_Base_SetConfig+0x124>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d023      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a2e      	ldr	r2, [pc, #184]	@ (8006f50 <TIM_Base_SetConfig+0x128>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d01f      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8006f54 <TIM_Base_SetConfig+0x12c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d01b      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8006f58 <TIM_Base_SetConfig+0x130>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d017      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2b      	ldr	r2, [pc, #172]	@ (8006f5c <TIM_Base_SetConfig+0x134>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d013      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8006f60 <TIM_Base_SetConfig+0x138>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d00f      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a29      	ldr	r2, [pc, #164]	@ (8006f64 <TIM_Base_SetConfig+0x13c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d00b      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a28      	ldr	r2, [pc, #160]	@ (8006f68 <TIM_Base_SetConfig+0x140>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d007      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a27      	ldr	r2, [pc, #156]	@ (8006f6c <TIM_Base_SetConfig+0x144>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d003      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a26      	ldr	r2, [pc, #152]	@ (8006f70 <TIM_Base_SetConfig+0x148>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d108      	bne.n	8006eec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	689a      	ldr	r2, [r3, #8]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8006f48 <TIM_Base_SetConfig+0x120>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_Base_SetConfig+0xf2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a10      	ldr	r2, [pc, #64]	@ (8006f58 <TIM_Base_SetConfig+0x130>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d103      	bne.n	8006f22 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	691a      	ldr	r2, [r3, #16]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f043 0204 	orr.w	r2, r3, #4
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	601a      	str	r2, [r3, #0]
}
 8006f3a:	bf00      	nop
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	40010000 	.word	0x40010000
 8006f4c:	40000400 	.word	0x40000400
 8006f50:	40000800 	.word	0x40000800
 8006f54:	40000c00 	.word	0x40000c00
 8006f58:	40010400 	.word	0x40010400
 8006f5c:	40014000 	.word	0x40014000
 8006f60:	40014400 	.word	0x40014400
 8006f64:	40014800 	.word	0x40014800
 8006f68:	40001800 	.word	0x40001800
 8006f6c:	40001c00 	.word	0x40001c00
 8006f70:	40002000 	.word	0x40002000

08006f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	f023 0201 	bic.w	r2, r3, #1
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0303 	bic.w	r3, r3, #3
 8006faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f023 0302 	bic.w	r3, r3, #2
 8006fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a20      	ldr	r2, [pc, #128]	@ (800704c <TIM_OC1_SetConfig+0xd8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_OC1_SetConfig+0x64>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8007050 <TIM_OC1_SetConfig+0xdc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d10c      	bne.n	8006ff2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f023 0308 	bic.w	r3, r3, #8
 8006fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f023 0304 	bic.w	r3, r3, #4
 8006ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a15      	ldr	r2, [pc, #84]	@ (800704c <TIM_OC1_SetConfig+0xd8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d003      	beq.n	8007002 <TIM_OC1_SetConfig+0x8e>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a14      	ldr	r2, [pc, #80]	@ (8007050 <TIM_OC1_SetConfig+0xdc>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d111      	bne.n	8007026 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	4313      	orrs	r3, r2
 800701a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	621a      	str	r2, [r3, #32]
}
 8007040:	bf00      	nop
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	40010000 	.word	0x40010000
 8007050:	40010400 	.word	0x40010400

08007054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	f023 0210 	bic.w	r2, r3, #16
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800708a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	021b      	lsls	r3, r3, #8
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	4313      	orrs	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f023 0320 	bic.w	r3, r3, #32
 800709e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a22      	ldr	r2, [pc, #136]	@ (8007138 <TIM_OC2_SetConfig+0xe4>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d003      	beq.n	80070bc <TIM_OC2_SetConfig+0x68>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a21      	ldr	r2, [pc, #132]	@ (800713c <TIM_OC2_SetConfig+0xe8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d10d      	bne.n	80070d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a17      	ldr	r2, [pc, #92]	@ (8007138 <TIM_OC2_SetConfig+0xe4>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d003      	beq.n	80070e8 <TIM_OC2_SetConfig+0x94>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a16      	ldr	r2, [pc, #88]	@ (800713c <TIM_OC2_SetConfig+0xe8>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d113      	bne.n	8007110 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4313      	orrs	r3, r2
 800710e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	621a      	str	r2, [r3, #32]
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40010000 	.word	0x40010000
 800713c:	40010400 	.word	0x40010400

08007140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800716e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 0303 	bic.w	r3, r3, #3
 8007176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	021b      	lsls	r3, r3, #8
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4313      	orrs	r3, r2
 8007194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a21      	ldr	r2, [pc, #132]	@ (8007220 <TIM_OC3_SetConfig+0xe0>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d003      	beq.n	80071a6 <TIM_OC3_SetConfig+0x66>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a20      	ldr	r2, [pc, #128]	@ (8007224 <TIM_OC3_SetConfig+0xe4>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d10d      	bne.n	80071c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	021b      	lsls	r3, r3, #8
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a16      	ldr	r2, [pc, #88]	@ (8007220 <TIM_OC3_SetConfig+0xe0>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d003      	beq.n	80071d2 <TIM_OC3_SetConfig+0x92>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a15      	ldr	r2, [pc, #84]	@ (8007224 <TIM_OC3_SetConfig+0xe4>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d113      	bne.n	80071fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	011b      	lsls	r3, r3, #4
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	621a      	str	r2, [r3, #32]
}
 8007214:	bf00      	nop
 8007216:	371c      	adds	r7, #28
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	40010000 	.word	0x40010000
 8007224:	40010400 	.word	0x40010400

08007228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800725e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	021b      	lsls	r3, r3, #8
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	4313      	orrs	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	031b      	lsls	r3, r3, #12
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	4313      	orrs	r3, r2
 800727e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a12      	ldr	r2, [pc, #72]	@ (80072cc <TIM_OC4_SetConfig+0xa4>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d003      	beq.n	8007290 <TIM_OC4_SetConfig+0x68>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a11      	ldr	r2, [pc, #68]	@ (80072d0 <TIM_OC4_SetConfig+0xa8>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d109      	bne.n	80072a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	019b      	lsls	r3, r3, #6
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	621a      	str	r2, [r3, #32]
}
 80072be:	bf00      	nop
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40010000 	.word	0x40010000
 80072d0:	40010400 	.word	0x40010400

080072d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	f023 0201 	bic.w	r2, r3, #1
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4313      	orrs	r3, r2
 8007308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f023 030a 	bic.w	r3, r3, #10
 8007310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4313      	orrs	r3, r2
 8007318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	621a      	str	r2, [r3, #32]
}
 8007326:	bf00      	nop
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007332:	b480      	push	{r7}
 8007334:	b087      	sub	sp, #28
 8007336:	af00      	add	r7, sp, #0
 8007338:	60f8      	str	r0, [r7, #12]
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	f023 0210 	bic.w	r2, r3, #16
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800735c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	031b      	lsls	r3, r3, #12
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	4313      	orrs	r3, r2
 8007366:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800736e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	4313      	orrs	r3, r2
 8007378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	621a      	str	r2, [r3, #32]
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007392:	b480      	push	{r7}
 8007394:	b085      	sub	sp, #20
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	f043 0307 	orr.w	r3, r3, #7
 80073b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	609a      	str	r2, [r3, #8]
}
 80073bc:	bf00      	nop
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	021a      	lsls	r2, r3, #8
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	431a      	orrs	r2, r3
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	609a      	str	r2, [r3, #8]
}
 80073fc:	bf00      	nop
 80073fe:	371c      	adds	r7, #28
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f003 031f 	and.w	r3, r3, #31
 800741a:	2201      	movs	r2, #1
 800741c:	fa02 f303 	lsl.w	r3, r2, r3
 8007420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6a1a      	ldr	r2, [r3, #32]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	43db      	mvns	r3, r3
 800742a:	401a      	ands	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a1a      	ldr	r2, [r3, #32]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f003 031f 	and.w	r3, r3, #31
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	fa01 f303 	lsl.w	r3, r1, r3
 8007440:	431a      	orrs	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	621a      	str	r2, [r3, #32]
}
 8007446:	bf00      	nop
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
	...

08007454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007468:	2302      	movs	r3, #2
 800746a:	e05a      	b.n	8007522 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a21      	ldr	r2, [pc, #132]	@ (8007530 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d022      	beq.n	80074f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074b8:	d01d      	beq.n	80074f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1d      	ldr	r2, [pc, #116]	@ (8007534 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d018      	beq.n	80074f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007538 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d013      	beq.n	80074f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a1a      	ldr	r2, [pc, #104]	@ (800753c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00e      	beq.n	80074f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a18      	ldr	r2, [pc, #96]	@ (8007540 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d009      	beq.n	80074f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a17      	ldr	r2, [pc, #92]	@ (8007544 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d004      	beq.n	80074f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a15      	ldr	r2, [pc, #84]	@ (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d10c      	bne.n	8007510 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	4313      	orrs	r3, r2
 8007506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	40010000 	.word	0x40010000
 8007534:	40000400 	.word	0x40000400
 8007538:	40000800 	.word	0x40000800
 800753c:	40000c00 	.word	0x40000c00
 8007540:	40010400 	.word	0x40010400
 8007544:	40014000 	.word	0x40014000
 8007548:	40001800 	.word	0x40001800

0800754c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007560:	2b01      	cmp	r3, #1
 8007562:	d101      	bne.n	8007568 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007564:	2302      	movs	r3, #2
 8007566:	e03d      	b.n	80075e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e042      	b.n	8007688 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fb f822 	bl	8002660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2224      	movs	r2, #36	@ 0x24
 8007620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007632:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fd7f 	bl	8008138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	691a      	ldr	r2, [r3, #16]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007648:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	695a      	ldr	r2, [r3, #20]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007658:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007668:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2220      	movs	r2, #32
 800767c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b08a      	sub	sp, #40	@ 0x28
 8007694:	af02      	add	r7, sp, #8
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	4613      	mov	r3, r2
 800769e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b20      	cmp	r3, #32
 80076ae:	d175      	bne.n	800779c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d002      	beq.n	80076bc <HAL_UART_Transmit+0x2c>
 80076b6:	88fb      	ldrh	r3, [r7, #6]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e06e      	b.n	800779e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2221      	movs	r2, #33	@ 0x21
 80076ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076ce:	f7fb f9ef 	bl	8002ab0 <HAL_GetTick>
 80076d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	88fa      	ldrh	r2, [r7, #6]
 80076d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	88fa      	ldrh	r2, [r7, #6]
 80076de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e8:	d108      	bne.n	80076fc <HAL_UART_Transmit+0x6c>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d104      	bne.n	80076fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	61bb      	str	r3, [r7, #24]
 80076fa:	e003      	b.n	8007704 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007700:	2300      	movs	r3, #0
 8007702:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007704:	e02e      	b.n	8007764 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2200      	movs	r2, #0
 800770e:	2180      	movs	r1, #128	@ 0x80
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 fb1d 	bl	8007d50 <UART_WaitOnFlagUntilTimeout>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d005      	beq.n	8007728 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2220      	movs	r2, #32
 8007720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e03a      	b.n	800779e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10b      	bne.n	8007746 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800773c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	3302      	adds	r3, #2
 8007742:	61bb      	str	r3, [r7, #24]
 8007744:	e007      	b.n	8007756 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	781a      	ldrb	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	3301      	adds	r3, #1
 8007754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800775a:	b29b      	uxth	r3, r3
 800775c:	3b01      	subs	r3, #1
 800775e:	b29a      	uxth	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1cb      	bne.n	8007706 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2200      	movs	r2, #0
 8007776:	2140      	movs	r1, #64	@ 0x40
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 fae9 	bl	8007d50 <UART_WaitOnFlagUntilTimeout>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e006      	b.n	800779e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2220      	movs	r2, #32
 8007794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	e000      	b.n	800779e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800779c:	2302      	movs	r3, #2
  }
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3720      	adds	r7, #32
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b0ba      	sub	sp, #232	@ 0xe8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077de:	f003 030f 	and.w	r3, r3, #15
 80077e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80077e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10f      	bne.n	800780e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077f2:	f003 0320 	and.w	r3, r3, #32
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d009      	beq.n	800780e <HAL_UART_IRQHandler+0x66>
 80077fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077fe:	f003 0320 	and.w	r3, r3, #32
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fbd7 	bl	8007fba <UART_Receive_IT>
      return;
 800780c:	e273      	b.n	8007cf6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800780e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 80de 	beq.w	80079d4 <HAL_UART_IRQHandler+0x22c>
 8007818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	d106      	bne.n	8007832 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007828:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 80d1 	beq.w	80079d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00b      	beq.n	8007856 <HAL_UART_IRQHandler+0xae>
 800783e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007846:	2b00      	cmp	r3, #0
 8007848:	d005      	beq.n	8007856 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800784e:	f043 0201 	orr.w	r2, r3, #1
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00b      	beq.n	800787a <HAL_UART_IRQHandler+0xd2>
 8007862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	d005      	beq.n	800787a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007872:	f043 0202 	orr.w	r2, r3, #2
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800787a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00b      	beq.n	800789e <HAL_UART_IRQHandler+0xf6>
 8007886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d005      	beq.n	800789e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007896:	f043 0204 	orr.w	r2, r3, #4
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800789e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078a2:	f003 0308 	and.w	r3, r3, #8
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d011      	beq.n	80078ce <HAL_UART_IRQHandler+0x126>
 80078aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078ae:	f003 0320 	and.w	r3, r3, #32
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d105      	bne.n	80078c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80078b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d005      	beq.n	80078ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c6:	f043 0208 	orr.w	r2, r3, #8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 820a 	beq.w	8007cec <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078dc:	f003 0320 	and.w	r3, r3, #32
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d008      	beq.n	80078f6 <HAL_UART_IRQHandler+0x14e>
 80078e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078e8:	f003 0320 	and.w	r3, r3, #32
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fb62 	bl	8007fba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007900:	2b40      	cmp	r3, #64	@ 0x40
 8007902:	bf0c      	ite	eq
 8007904:	2301      	moveq	r3, #1
 8007906:	2300      	movne	r3, #0
 8007908:	b2db      	uxtb	r3, r3
 800790a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007912:	f003 0308 	and.w	r3, r3, #8
 8007916:	2b00      	cmp	r3, #0
 8007918:	d103      	bne.n	8007922 <HAL_UART_IRQHandler+0x17a>
 800791a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800791e:	2b00      	cmp	r3, #0
 8007920:	d04f      	beq.n	80079c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fa6d 	bl	8007e02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007932:	2b40      	cmp	r3, #64	@ 0x40
 8007934:	d141      	bne.n	80079ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3314      	adds	r3, #20
 800793c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007944:	e853 3f00 	ldrex	r3, [r3]
 8007948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800794c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007954:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3314      	adds	r3, #20
 800795e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007962:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007966:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800796e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800797a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1d9      	bne.n	8007936 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d013      	beq.n	80079b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800798e:	4a8a      	ldr	r2, [pc, #552]	@ (8007bb8 <HAL_UART_IRQHandler+0x410>)
 8007990:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007996:	4618      	mov	r0, r3
 8007998:	f7fb fa3b 	bl	8002e12 <HAL_DMA_Abort_IT>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d016      	beq.n	80079d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80079ac:	4610      	mov	r0, r2
 80079ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b0:	e00e      	b.n	80079d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f9b6 	bl	8007d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b8:	e00a      	b.n	80079d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f9b2 	bl	8007d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c0:	e006      	b.n	80079d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f9ae 	bl	8007d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80079ce:	e18d      	b.n	8007cec <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d0:	bf00      	nop
    return;
 80079d2:	e18b      	b.n	8007cec <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d8:	2b01      	cmp	r3, #1
 80079da:	f040 8167 	bne.w	8007cac <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079e2:	f003 0310 	and.w	r3, r3, #16
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 8160 	beq.w	8007cac <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80079ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079f0:	f003 0310 	and.w	r3, r3, #16
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 8159 	beq.w	8007cac <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079fa:	2300      	movs	r3, #0
 80079fc:	60bb      	str	r3, [r7, #8]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60bb      	str	r3, [r7, #8]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	60bb      	str	r3, [r7, #8]
 8007a0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a1a:	2b40      	cmp	r3, #64	@ 0x40
 8007a1c:	f040 80ce 	bne.w	8007bbc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 80a9 	beq.w	8007b88 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	f080 80a2 	bcs.w	8007b88 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a56:	f000 8088 	beq.w	8007b6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	330c      	adds	r3, #12
 8007a60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	330c      	adds	r3, #12
 8007a82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007a86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1d9      	bne.n	8007a5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3314      	adds	r3, #20
 8007aac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ab6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ab8:	f023 0301 	bic.w	r3, r3, #1
 8007abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3314      	adds	r3, #20
 8007ac6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007aca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ad2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007adc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1e1      	bne.n	8007aa6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3314      	adds	r3, #20
 8007ae8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007af2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007af4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007af8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3314      	adds	r3, #20
 8007b02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e3      	bne.n	8007ae2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b3a:	f023 0310 	bic.w	r3, r3, #16
 8007b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	330c      	adds	r3, #12
 8007b48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007b4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007b4e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e3      	bne.n	8007b28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fb f8e4 	bl	8002d32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f8d9 	bl	8007d38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007b86:	e0b3      	b.n	8007cf0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b90:	429a      	cmp	r2, r3
 8007b92:	f040 80ad 	bne.w	8007cf0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ba0:	f040 80a6 	bne.w	8007cf0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f8c1 	bl	8007d38 <HAL_UARTEx_RxEventCallback>
      return;
 8007bb6:	e09b      	b.n	8007cf0 <HAL_UART_IRQHandler+0x548>
 8007bb8:	08007ec9 	.word	0x08007ec9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 808e 	beq.w	8007cf4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007bd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 8089 	beq.w	8007cf4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	330c      	adds	r3, #12
 8007be8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bec:	e853 3f00 	ldrex	r3, [r3]
 8007bf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	330c      	adds	r3, #12
 8007c02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007c06:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e3      	bne.n	8007be2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3314      	adds	r3, #20
 8007c20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	623b      	str	r3, [r7, #32]
   return(result);
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	f023 0301 	bic.w	r3, r3, #1
 8007c30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	3314      	adds	r3, #20
 8007c3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c46:	e841 2300 	strex	r3, r2, [r1]
 8007c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1e3      	bne.n	8007c1a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2220      	movs	r2, #32
 8007c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	330c      	adds	r3, #12
 8007c66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	e853 3f00 	ldrex	r3, [r3]
 8007c6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 0310 	bic.w	r3, r3, #16
 8007c76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	330c      	adds	r3, #12
 8007c80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007c84:	61fa      	str	r2, [r7, #28]
 8007c86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	69b9      	ldr	r1, [r7, #24]
 8007c8a:	69fa      	ldr	r2, [r7, #28]
 8007c8c:	e841 2300 	strex	r3, r2, [r1]
 8007c90:	617b      	str	r3, [r7, #20]
   return(result);
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e3      	bne.n	8007c60 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f847 	bl	8007d38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007caa:	e023      	b.n	8007cf4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d009      	beq.n	8007ccc <HAL_UART_IRQHandler+0x524>
 8007cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f910 	bl	8007eea <UART_Transmit_IT>
    return;
 8007cca:	e014      	b.n	8007cf6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00e      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x54e>
 8007cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d008      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f950 	bl	8007f8a <UART_EndTransmit_IT>
    return;
 8007cea:	e004      	b.n	8007cf6 <HAL_UART_IRQHandler+0x54e>
    return;
 8007cec:	bf00      	nop
 8007cee:	e002      	b.n	8007cf6 <HAL_UART_IRQHandler+0x54e>
      return;
 8007cf0:	bf00      	nop
 8007cf2:	e000      	b.n	8007cf6 <HAL_UART_IRQHandler+0x54e>
      return;
 8007cf4:	bf00      	nop
  }
}
 8007cf6:	37e8      	adds	r7, #232	@ 0xe8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d60:	e03b      	b.n	8007dda <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d68:	d037      	beq.n	8007dda <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d6a:	f7fa fea1 	bl	8002ab0 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	6a3a      	ldr	r2, [r7, #32]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d302      	bcc.n	8007d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e03a      	b.n	8007dfa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	f003 0304 	and.w	r3, r3, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d023      	beq.n	8007dda <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b80      	cmp	r3, #128	@ 0x80
 8007d96:	d020      	beq.n	8007dda <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b40      	cmp	r3, #64	@ 0x40
 8007d9c:	d01d      	beq.n	8007dda <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0308 	and.w	r3, r3, #8
 8007da8:	2b08      	cmp	r3, #8
 8007daa:	d116      	bne.n	8007dda <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007dac:	2300      	movs	r3, #0
 8007dae:	617b      	str	r3, [r7, #20]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 f81d 	bl	8007e02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2208      	movs	r2, #8
 8007dcc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e00f      	b.n	8007dfa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	4013      	ands	r3, r2
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	bf0c      	ite	eq
 8007dea:	2301      	moveq	r3, #1
 8007dec:	2300      	movne	r3, #0
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	461a      	mov	r2, r3
 8007df2:	79fb      	ldrb	r3, [r7, #7]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d0b4      	beq.n	8007d62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b095      	sub	sp, #84	@ 0x54
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	330c      	adds	r3, #12
 8007e10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e14:	e853 3f00 	ldrex	r3, [r3]
 8007e18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	330c      	adds	r3, #12
 8007e28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8007e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e5      	bne.n	8007e0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3314      	adds	r3, #20
 8007e44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	e853 3f00 	ldrex	r3, [r3]
 8007e4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	f023 0301 	bic.w	r3, r3, #1
 8007e54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3314      	adds	r3, #20
 8007e5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e5      	bne.n	8007e3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d119      	bne.n	8007eae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	330c      	adds	r3, #12
 8007e80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	f023 0310 	bic.w	r3, r3, #16
 8007e90:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	330c      	adds	r3, #12
 8007e98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e9a:	61ba      	str	r2, [r7, #24]
 8007e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	6979      	ldr	r1, [r7, #20]
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e5      	bne.n	8007e7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007ebc:	bf00      	nop
 8007ebe:	3754      	adds	r7, #84	@ 0x54
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f7ff ff21 	bl	8007d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ee2:	bf00      	nop
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b085      	sub	sp, #20
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b21      	cmp	r3, #33	@ 0x21
 8007efc:	d13e      	bne.n	8007f7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f06:	d114      	bne.n	8007f32 <UART_Transmit_IT+0x48>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d110      	bne.n	8007f32 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a1b      	ldr	r3, [r3, #32]
 8007f14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	1c9a      	adds	r2, r3, #2
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	621a      	str	r2, [r3, #32]
 8007f30:	e008      	b.n	8007f44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	1c59      	adds	r1, r3, #1
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	6211      	str	r1, [r2, #32]
 8007f3c:	781a      	ldrb	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	4619      	mov	r1, r3
 8007f52:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10f      	bne.n	8007f78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	e000      	b.n	8007f7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f7c:	2302      	movs	r3, #2
  }
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fa0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2220      	movs	r2, #32
 8007fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7ff fea6 	bl	8007cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b08c      	sub	sp, #48	@ 0x30
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b22      	cmp	r3, #34	@ 0x22
 8007fd4:	f040 80aa 	bne.w	800812c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fe0:	d115      	bne.n	800800e <UART_Receive_IT+0x54>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d111      	bne.n	800800e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008000:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008006:	1c9a      	adds	r2, r3, #2
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	629a      	str	r2, [r3, #40]	@ 0x28
 800800c:	e024      	b.n	8008058 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008012:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800801c:	d007      	beq.n	800802e <UART_Receive_IT+0x74>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10a      	bne.n	800803c <UART_Receive_IT+0x82>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	b2da      	uxtb	r2, r3
 8008036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008038:	701a      	strb	r2, [r3, #0]
 800803a:	e008      	b.n	800804e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008048:	b2da      	uxtb	r2, r3
 800804a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008052:	1c5a      	adds	r2, r3, #1
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800805c:	b29b      	uxth	r3, r3
 800805e:	3b01      	subs	r3, #1
 8008060:	b29b      	uxth	r3, r3
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	4619      	mov	r1, r3
 8008066:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008068:	2b00      	cmp	r3, #0
 800806a:	d15d      	bne.n	8008128 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f022 0220 	bic.w	r2, r2, #32
 800807a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68da      	ldr	r2, [r3, #12]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800808a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	695a      	ldr	r2, [r3, #20]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 0201 	bic.w	r2, r2, #1
 800809a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2220      	movs	r2, #32
 80080a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d135      	bne.n	800811e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	330c      	adds	r3, #12
 80080be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	e853 3f00 	ldrex	r3, [r3]
 80080c6:	613b      	str	r3, [r7, #16]
   return(result);
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f023 0310 	bic.w	r3, r3, #16
 80080ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	330c      	adds	r3, #12
 80080d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080d8:	623a      	str	r2, [r7, #32]
 80080da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080dc:	69f9      	ldr	r1, [r7, #28]
 80080de:	6a3a      	ldr	r2, [r7, #32]
 80080e0:	e841 2300 	strex	r3, r2, [r1]
 80080e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e5      	bne.n	80080b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0310 	and.w	r3, r3, #16
 80080f6:	2b10      	cmp	r3, #16
 80080f8:	d10a      	bne.n	8008110 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	60fb      	str	r3, [r7, #12]
 800810e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fe0e 	bl	8007d38 <HAL_UARTEx_RxEventCallback>
 800811c:	e002      	b.n	8008124 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff fdf6 	bl	8007d10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	e002      	b.n	800812e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	e000      	b.n	800812e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800812c:	2302      	movs	r3, #2
  }
}
 800812e:	4618      	mov	r0, r3
 8008130:	3730      	adds	r7, #48	@ 0x30
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
	...

08008138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800813c:	b0c0      	sub	sp, #256	@ 0x100
 800813e:	af00      	add	r7, sp, #0
 8008140:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008154:	68d9      	ldr	r1, [r3, #12]
 8008156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	ea40 0301 	orr.w	r3, r0, r1
 8008160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	431a      	orrs	r2, r3
 8008170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	431a      	orrs	r2, r3
 8008178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	4313      	orrs	r3, r2
 8008180:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008190:	f021 010c 	bic.w	r1, r1, #12
 8008194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800819e:	430b      	orrs	r3, r1
 80081a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80081ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b2:	6999      	ldr	r1, [r3, #24]
 80081b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	ea40 0301 	orr.w	r3, r0, r1
 80081be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	4b8f      	ldr	r3, [pc, #572]	@ (8008404 <UART_SetConfig+0x2cc>)
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d005      	beq.n	80081d8 <UART_SetConfig+0xa0>
 80081cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	4b8d      	ldr	r3, [pc, #564]	@ (8008408 <UART_SetConfig+0x2d0>)
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d104      	bne.n	80081e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081d8:	f7fd fe4a 	bl	8005e70 <HAL_RCC_GetPCLK2Freq>
 80081dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80081e0:	e003      	b.n	80081ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081e2:	f7fd fe31 	bl	8005e48 <HAL_RCC_GetPCLK1Freq>
 80081e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081f4:	f040 810c 	bne.w	8008410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081fc:	2200      	movs	r2, #0
 80081fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008202:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800820a:	4622      	mov	r2, r4
 800820c:	462b      	mov	r3, r5
 800820e:	1891      	adds	r1, r2, r2
 8008210:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008212:	415b      	adcs	r3, r3
 8008214:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800821a:	4621      	mov	r1, r4
 800821c:	eb12 0801 	adds.w	r8, r2, r1
 8008220:	4629      	mov	r1, r5
 8008222:	eb43 0901 	adc.w	r9, r3, r1
 8008226:	f04f 0200 	mov.w	r2, #0
 800822a:	f04f 0300 	mov.w	r3, #0
 800822e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800823a:	4690      	mov	r8, r2
 800823c:	4699      	mov	r9, r3
 800823e:	4623      	mov	r3, r4
 8008240:	eb18 0303 	adds.w	r3, r8, r3
 8008244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008248:	462b      	mov	r3, r5
 800824a:	eb49 0303 	adc.w	r3, r9, r3
 800824e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800825e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008266:	460b      	mov	r3, r1
 8008268:	18db      	adds	r3, r3, r3
 800826a:	653b      	str	r3, [r7, #80]	@ 0x50
 800826c:	4613      	mov	r3, r2
 800826e:	eb42 0303 	adc.w	r3, r2, r3
 8008272:	657b      	str	r3, [r7, #84]	@ 0x54
 8008274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800827c:	f7f8 fcb4 	bl	8000be8 <__aeabi_uldivmod>
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	4b61      	ldr	r3, [pc, #388]	@ (800840c <UART_SetConfig+0x2d4>)
 8008286:	fba3 2302 	umull	r2, r3, r3, r2
 800828a:	095b      	lsrs	r3, r3, #5
 800828c:	011c      	lsls	r4, r3, #4
 800828e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008292:	2200      	movs	r2, #0
 8008294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008298:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800829c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80082a0:	4642      	mov	r2, r8
 80082a2:	464b      	mov	r3, r9
 80082a4:	1891      	adds	r1, r2, r2
 80082a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80082a8:	415b      	adcs	r3, r3
 80082aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80082b0:	4641      	mov	r1, r8
 80082b2:	eb12 0a01 	adds.w	sl, r2, r1
 80082b6:	4649      	mov	r1, r9
 80082b8:	eb43 0b01 	adc.w	fp, r3, r1
 80082bc:	f04f 0200 	mov.w	r2, #0
 80082c0:	f04f 0300 	mov.w	r3, #0
 80082c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082d0:	4692      	mov	sl, r2
 80082d2:	469b      	mov	fp, r3
 80082d4:	4643      	mov	r3, r8
 80082d6:	eb1a 0303 	adds.w	r3, sl, r3
 80082da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082de:	464b      	mov	r3, r9
 80082e0:	eb4b 0303 	adc.w	r3, fp, r3
 80082e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80082e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80082f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80082fc:	460b      	mov	r3, r1
 80082fe:	18db      	adds	r3, r3, r3
 8008300:	643b      	str	r3, [r7, #64]	@ 0x40
 8008302:	4613      	mov	r3, r2
 8008304:	eb42 0303 	adc.w	r3, r2, r3
 8008308:	647b      	str	r3, [r7, #68]	@ 0x44
 800830a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800830e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008312:	f7f8 fc69 	bl	8000be8 <__aeabi_uldivmod>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	4611      	mov	r1, r2
 800831c:	4b3b      	ldr	r3, [pc, #236]	@ (800840c <UART_SetConfig+0x2d4>)
 800831e:	fba3 2301 	umull	r2, r3, r3, r1
 8008322:	095b      	lsrs	r3, r3, #5
 8008324:	2264      	movs	r2, #100	@ 0x64
 8008326:	fb02 f303 	mul.w	r3, r2, r3
 800832a:	1acb      	subs	r3, r1, r3
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008332:	4b36      	ldr	r3, [pc, #216]	@ (800840c <UART_SetConfig+0x2d4>)
 8008334:	fba3 2302 	umull	r2, r3, r3, r2
 8008338:	095b      	lsrs	r3, r3, #5
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008340:	441c      	add	r4, r3
 8008342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008346:	2200      	movs	r2, #0
 8008348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800834c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008354:	4642      	mov	r2, r8
 8008356:	464b      	mov	r3, r9
 8008358:	1891      	adds	r1, r2, r2
 800835a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800835c:	415b      	adcs	r3, r3
 800835e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008364:	4641      	mov	r1, r8
 8008366:	1851      	adds	r1, r2, r1
 8008368:	6339      	str	r1, [r7, #48]	@ 0x30
 800836a:	4649      	mov	r1, r9
 800836c:	414b      	adcs	r3, r1
 800836e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008370:	f04f 0200 	mov.w	r2, #0
 8008374:	f04f 0300 	mov.w	r3, #0
 8008378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800837c:	4659      	mov	r1, fp
 800837e:	00cb      	lsls	r3, r1, #3
 8008380:	4651      	mov	r1, sl
 8008382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008386:	4651      	mov	r1, sl
 8008388:	00ca      	lsls	r2, r1, #3
 800838a:	4610      	mov	r0, r2
 800838c:	4619      	mov	r1, r3
 800838e:	4603      	mov	r3, r0
 8008390:	4642      	mov	r2, r8
 8008392:	189b      	adds	r3, r3, r2
 8008394:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008398:	464b      	mov	r3, r9
 800839a:	460a      	mov	r2, r1
 800839c:	eb42 0303 	adc.w	r3, r2, r3
 80083a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80083a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80083b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80083b8:	460b      	mov	r3, r1
 80083ba:	18db      	adds	r3, r3, r3
 80083bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083be:	4613      	mov	r3, r2
 80083c0:	eb42 0303 	adc.w	r3, r2, r3
 80083c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80083ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80083ce:	f7f8 fc0b 	bl	8000be8 <__aeabi_uldivmod>
 80083d2:	4602      	mov	r2, r0
 80083d4:	460b      	mov	r3, r1
 80083d6:	4b0d      	ldr	r3, [pc, #52]	@ (800840c <UART_SetConfig+0x2d4>)
 80083d8:	fba3 1302 	umull	r1, r3, r3, r2
 80083dc:	095b      	lsrs	r3, r3, #5
 80083de:	2164      	movs	r1, #100	@ 0x64
 80083e0:	fb01 f303 	mul.w	r3, r1, r3
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	3332      	adds	r3, #50	@ 0x32
 80083ea:	4a08      	ldr	r2, [pc, #32]	@ (800840c <UART_SetConfig+0x2d4>)
 80083ec:	fba2 2303 	umull	r2, r3, r2, r3
 80083f0:	095b      	lsrs	r3, r3, #5
 80083f2:	f003 0207 	and.w	r2, r3, #7
 80083f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4422      	add	r2, r4
 80083fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008400:	e106      	b.n	8008610 <UART_SetConfig+0x4d8>
 8008402:	bf00      	nop
 8008404:	40011000 	.word	0x40011000
 8008408:	40011400 	.word	0x40011400
 800840c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008414:	2200      	movs	r2, #0
 8008416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800841a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800841e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008422:	4642      	mov	r2, r8
 8008424:	464b      	mov	r3, r9
 8008426:	1891      	adds	r1, r2, r2
 8008428:	6239      	str	r1, [r7, #32]
 800842a:	415b      	adcs	r3, r3
 800842c:	627b      	str	r3, [r7, #36]	@ 0x24
 800842e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008432:	4641      	mov	r1, r8
 8008434:	1854      	adds	r4, r2, r1
 8008436:	4649      	mov	r1, r9
 8008438:	eb43 0501 	adc.w	r5, r3, r1
 800843c:	f04f 0200 	mov.w	r2, #0
 8008440:	f04f 0300 	mov.w	r3, #0
 8008444:	00eb      	lsls	r3, r5, #3
 8008446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800844a:	00e2      	lsls	r2, r4, #3
 800844c:	4614      	mov	r4, r2
 800844e:	461d      	mov	r5, r3
 8008450:	4643      	mov	r3, r8
 8008452:	18e3      	adds	r3, r4, r3
 8008454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008458:	464b      	mov	r3, r9
 800845a:	eb45 0303 	adc.w	r3, r5, r3
 800845e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800846e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008472:	f04f 0200 	mov.w	r2, #0
 8008476:	f04f 0300 	mov.w	r3, #0
 800847a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800847e:	4629      	mov	r1, r5
 8008480:	008b      	lsls	r3, r1, #2
 8008482:	4621      	mov	r1, r4
 8008484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008488:	4621      	mov	r1, r4
 800848a:	008a      	lsls	r2, r1, #2
 800848c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008490:	f7f8 fbaa 	bl	8000be8 <__aeabi_uldivmod>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	4b60      	ldr	r3, [pc, #384]	@ (800861c <UART_SetConfig+0x4e4>)
 800849a:	fba3 2302 	umull	r2, r3, r3, r2
 800849e:	095b      	lsrs	r3, r3, #5
 80084a0:	011c      	lsls	r4, r3, #4
 80084a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084a6:	2200      	movs	r2, #0
 80084a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80084b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80084b4:	4642      	mov	r2, r8
 80084b6:	464b      	mov	r3, r9
 80084b8:	1891      	adds	r1, r2, r2
 80084ba:	61b9      	str	r1, [r7, #24]
 80084bc:	415b      	adcs	r3, r3
 80084be:	61fb      	str	r3, [r7, #28]
 80084c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084c4:	4641      	mov	r1, r8
 80084c6:	1851      	adds	r1, r2, r1
 80084c8:	6139      	str	r1, [r7, #16]
 80084ca:	4649      	mov	r1, r9
 80084cc:	414b      	adcs	r3, r1
 80084ce:	617b      	str	r3, [r7, #20]
 80084d0:	f04f 0200 	mov.w	r2, #0
 80084d4:	f04f 0300 	mov.w	r3, #0
 80084d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084dc:	4659      	mov	r1, fp
 80084de:	00cb      	lsls	r3, r1, #3
 80084e0:	4651      	mov	r1, sl
 80084e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084e6:	4651      	mov	r1, sl
 80084e8:	00ca      	lsls	r2, r1, #3
 80084ea:	4610      	mov	r0, r2
 80084ec:	4619      	mov	r1, r3
 80084ee:	4603      	mov	r3, r0
 80084f0:	4642      	mov	r2, r8
 80084f2:	189b      	adds	r3, r3, r2
 80084f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084f8:	464b      	mov	r3, r9
 80084fa:	460a      	mov	r2, r1
 80084fc:	eb42 0303 	adc.w	r3, r2, r3
 8008500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800850e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008510:	f04f 0200 	mov.w	r2, #0
 8008514:	f04f 0300 	mov.w	r3, #0
 8008518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800851c:	4649      	mov	r1, r9
 800851e:	008b      	lsls	r3, r1, #2
 8008520:	4641      	mov	r1, r8
 8008522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008526:	4641      	mov	r1, r8
 8008528:	008a      	lsls	r2, r1, #2
 800852a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800852e:	f7f8 fb5b 	bl	8000be8 <__aeabi_uldivmod>
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
 8008536:	4611      	mov	r1, r2
 8008538:	4b38      	ldr	r3, [pc, #224]	@ (800861c <UART_SetConfig+0x4e4>)
 800853a:	fba3 2301 	umull	r2, r3, r3, r1
 800853e:	095b      	lsrs	r3, r3, #5
 8008540:	2264      	movs	r2, #100	@ 0x64
 8008542:	fb02 f303 	mul.w	r3, r2, r3
 8008546:	1acb      	subs	r3, r1, r3
 8008548:	011b      	lsls	r3, r3, #4
 800854a:	3332      	adds	r3, #50	@ 0x32
 800854c:	4a33      	ldr	r2, [pc, #204]	@ (800861c <UART_SetConfig+0x4e4>)
 800854e:	fba2 2303 	umull	r2, r3, r2, r3
 8008552:	095b      	lsrs	r3, r3, #5
 8008554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008558:	441c      	add	r4, r3
 800855a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800855e:	2200      	movs	r2, #0
 8008560:	673b      	str	r3, [r7, #112]	@ 0x70
 8008562:	677a      	str	r2, [r7, #116]	@ 0x74
 8008564:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008568:	4642      	mov	r2, r8
 800856a:	464b      	mov	r3, r9
 800856c:	1891      	adds	r1, r2, r2
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	415b      	adcs	r3, r3
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008578:	4641      	mov	r1, r8
 800857a:	1851      	adds	r1, r2, r1
 800857c:	6039      	str	r1, [r7, #0]
 800857e:	4649      	mov	r1, r9
 8008580:	414b      	adcs	r3, r1
 8008582:	607b      	str	r3, [r7, #4]
 8008584:	f04f 0200 	mov.w	r2, #0
 8008588:	f04f 0300 	mov.w	r3, #0
 800858c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008590:	4659      	mov	r1, fp
 8008592:	00cb      	lsls	r3, r1, #3
 8008594:	4651      	mov	r1, sl
 8008596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800859a:	4651      	mov	r1, sl
 800859c:	00ca      	lsls	r2, r1, #3
 800859e:	4610      	mov	r0, r2
 80085a0:	4619      	mov	r1, r3
 80085a2:	4603      	mov	r3, r0
 80085a4:	4642      	mov	r2, r8
 80085a6:	189b      	adds	r3, r3, r2
 80085a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085aa:	464b      	mov	r3, r9
 80085ac:	460a      	mov	r2, r1
 80085ae:	eb42 0303 	adc.w	r3, r2, r3
 80085b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80085be:	667a      	str	r2, [r7, #100]	@ 0x64
 80085c0:	f04f 0200 	mov.w	r2, #0
 80085c4:	f04f 0300 	mov.w	r3, #0
 80085c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80085cc:	4649      	mov	r1, r9
 80085ce:	008b      	lsls	r3, r1, #2
 80085d0:	4641      	mov	r1, r8
 80085d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085d6:	4641      	mov	r1, r8
 80085d8:	008a      	lsls	r2, r1, #2
 80085da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80085de:	f7f8 fb03 	bl	8000be8 <__aeabi_uldivmod>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	4b0d      	ldr	r3, [pc, #52]	@ (800861c <UART_SetConfig+0x4e4>)
 80085e8:	fba3 1302 	umull	r1, r3, r3, r2
 80085ec:	095b      	lsrs	r3, r3, #5
 80085ee:	2164      	movs	r1, #100	@ 0x64
 80085f0:	fb01 f303 	mul.w	r3, r1, r3
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	3332      	adds	r3, #50	@ 0x32
 80085fa:	4a08      	ldr	r2, [pc, #32]	@ (800861c <UART_SetConfig+0x4e4>)
 80085fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008600:	095b      	lsrs	r3, r3, #5
 8008602:	f003 020f 	and.w	r2, r3, #15
 8008606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4422      	add	r2, r4
 800860e:	609a      	str	r2, [r3, #8]
}
 8008610:	bf00      	nop
 8008612:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008616:	46bd      	mov	sp, r7
 8008618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800861c:	51eb851f 	.word	0x51eb851f

08008620 <__cvt>:
 8008620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008624:	ec57 6b10 	vmov	r6, r7, d0
 8008628:	2f00      	cmp	r7, #0
 800862a:	460c      	mov	r4, r1
 800862c:	4619      	mov	r1, r3
 800862e:	463b      	mov	r3, r7
 8008630:	bfbb      	ittet	lt
 8008632:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008636:	461f      	movlt	r7, r3
 8008638:	2300      	movge	r3, #0
 800863a:	232d      	movlt	r3, #45	@ 0x2d
 800863c:	700b      	strb	r3, [r1, #0]
 800863e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008640:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008644:	4691      	mov	r9, r2
 8008646:	f023 0820 	bic.w	r8, r3, #32
 800864a:	bfbc      	itt	lt
 800864c:	4632      	movlt	r2, r6
 800864e:	4616      	movlt	r6, r2
 8008650:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008654:	d005      	beq.n	8008662 <__cvt+0x42>
 8008656:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800865a:	d100      	bne.n	800865e <__cvt+0x3e>
 800865c:	3401      	adds	r4, #1
 800865e:	2102      	movs	r1, #2
 8008660:	e000      	b.n	8008664 <__cvt+0x44>
 8008662:	2103      	movs	r1, #3
 8008664:	ab03      	add	r3, sp, #12
 8008666:	9301      	str	r3, [sp, #4]
 8008668:	ab02      	add	r3, sp, #8
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	ec47 6b10 	vmov	d0, r6, r7
 8008670:	4653      	mov	r3, sl
 8008672:	4622      	mov	r2, r4
 8008674:	f000 fe70 	bl	8009358 <_dtoa_r>
 8008678:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800867c:	4605      	mov	r5, r0
 800867e:	d119      	bne.n	80086b4 <__cvt+0x94>
 8008680:	f019 0f01 	tst.w	r9, #1
 8008684:	d00e      	beq.n	80086a4 <__cvt+0x84>
 8008686:	eb00 0904 	add.w	r9, r0, r4
 800868a:	2200      	movs	r2, #0
 800868c:	2300      	movs	r3, #0
 800868e:	4630      	mov	r0, r6
 8008690:	4639      	mov	r1, r7
 8008692:	f7f8 fa39 	bl	8000b08 <__aeabi_dcmpeq>
 8008696:	b108      	cbz	r0, 800869c <__cvt+0x7c>
 8008698:	f8cd 900c 	str.w	r9, [sp, #12]
 800869c:	2230      	movs	r2, #48	@ 0x30
 800869e:	9b03      	ldr	r3, [sp, #12]
 80086a0:	454b      	cmp	r3, r9
 80086a2:	d31e      	bcc.n	80086e2 <__cvt+0xc2>
 80086a4:	9b03      	ldr	r3, [sp, #12]
 80086a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086a8:	1b5b      	subs	r3, r3, r5
 80086aa:	4628      	mov	r0, r5
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	b004      	add	sp, #16
 80086b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80086b8:	eb00 0904 	add.w	r9, r0, r4
 80086bc:	d1e5      	bne.n	800868a <__cvt+0x6a>
 80086be:	7803      	ldrb	r3, [r0, #0]
 80086c0:	2b30      	cmp	r3, #48	@ 0x30
 80086c2:	d10a      	bne.n	80086da <__cvt+0xba>
 80086c4:	2200      	movs	r2, #0
 80086c6:	2300      	movs	r3, #0
 80086c8:	4630      	mov	r0, r6
 80086ca:	4639      	mov	r1, r7
 80086cc:	f7f8 fa1c 	bl	8000b08 <__aeabi_dcmpeq>
 80086d0:	b918      	cbnz	r0, 80086da <__cvt+0xba>
 80086d2:	f1c4 0401 	rsb	r4, r4, #1
 80086d6:	f8ca 4000 	str.w	r4, [sl]
 80086da:	f8da 3000 	ldr.w	r3, [sl]
 80086de:	4499      	add	r9, r3
 80086e0:	e7d3      	b.n	800868a <__cvt+0x6a>
 80086e2:	1c59      	adds	r1, r3, #1
 80086e4:	9103      	str	r1, [sp, #12]
 80086e6:	701a      	strb	r2, [r3, #0]
 80086e8:	e7d9      	b.n	800869e <__cvt+0x7e>

080086ea <__exponent>:
 80086ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086ec:	2900      	cmp	r1, #0
 80086ee:	bfba      	itte	lt
 80086f0:	4249      	neglt	r1, r1
 80086f2:	232d      	movlt	r3, #45	@ 0x2d
 80086f4:	232b      	movge	r3, #43	@ 0x2b
 80086f6:	2909      	cmp	r1, #9
 80086f8:	7002      	strb	r2, [r0, #0]
 80086fa:	7043      	strb	r3, [r0, #1]
 80086fc:	dd29      	ble.n	8008752 <__exponent+0x68>
 80086fe:	f10d 0307 	add.w	r3, sp, #7
 8008702:	461d      	mov	r5, r3
 8008704:	270a      	movs	r7, #10
 8008706:	461a      	mov	r2, r3
 8008708:	fbb1 f6f7 	udiv	r6, r1, r7
 800870c:	fb07 1416 	mls	r4, r7, r6, r1
 8008710:	3430      	adds	r4, #48	@ 0x30
 8008712:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008716:	460c      	mov	r4, r1
 8008718:	2c63      	cmp	r4, #99	@ 0x63
 800871a:	f103 33ff 	add.w	r3, r3, #4294967295
 800871e:	4631      	mov	r1, r6
 8008720:	dcf1      	bgt.n	8008706 <__exponent+0x1c>
 8008722:	3130      	adds	r1, #48	@ 0x30
 8008724:	1e94      	subs	r4, r2, #2
 8008726:	f803 1c01 	strb.w	r1, [r3, #-1]
 800872a:	1c41      	adds	r1, r0, #1
 800872c:	4623      	mov	r3, r4
 800872e:	42ab      	cmp	r3, r5
 8008730:	d30a      	bcc.n	8008748 <__exponent+0x5e>
 8008732:	f10d 0309 	add.w	r3, sp, #9
 8008736:	1a9b      	subs	r3, r3, r2
 8008738:	42ac      	cmp	r4, r5
 800873a:	bf88      	it	hi
 800873c:	2300      	movhi	r3, #0
 800873e:	3302      	adds	r3, #2
 8008740:	4403      	add	r3, r0
 8008742:	1a18      	subs	r0, r3, r0
 8008744:	b003      	add	sp, #12
 8008746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008748:	f813 6b01 	ldrb.w	r6, [r3], #1
 800874c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008750:	e7ed      	b.n	800872e <__exponent+0x44>
 8008752:	2330      	movs	r3, #48	@ 0x30
 8008754:	3130      	adds	r1, #48	@ 0x30
 8008756:	7083      	strb	r3, [r0, #2]
 8008758:	70c1      	strb	r1, [r0, #3]
 800875a:	1d03      	adds	r3, r0, #4
 800875c:	e7f1      	b.n	8008742 <__exponent+0x58>
	...

08008760 <_printf_float>:
 8008760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008764:	b08d      	sub	sp, #52	@ 0x34
 8008766:	460c      	mov	r4, r1
 8008768:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800876c:	4616      	mov	r6, r2
 800876e:	461f      	mov	r7, r3
 8008770:	4605      	mov	r5, r0
 8008772:	f000 fcef 	bl	8009154 <_localeconv_r>
 8008776:	6803      	ldr	r3, [r0, #0]
 8008778:	9304      	str	r3, [sp, #16]
 800877a:	4618      	mov	r0, r3
 800877c:	f7f7 fd98 	bl	80002b0 <strlen>
 8008780:	2300      	movs	r3, #0
 8008782:	930a      	str	r3, [sp, #40]	@ 0x28
 8008784:	f8d8 3000 	ldr.w	r3, [r8]
 8008788:	9005      	str	r0, [sp, #20]
 800878a:	3307      	adds	r3, #7
 800878c:	f023 0307 	bic.w	r3, r3, #7
 8008790:	f103 0208 	add.w	r2, r3, #8
 8008794:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008798:	f8d4 b000 	ldr.w	fp, [r4]
 800879c:	f8c8 2000 	str.w	r2, [r8]
 80087a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80087a8:	9307      	str	r3, [sp, #28]
 80087aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80087ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80087b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087b6:	4b9c      	ldr	r3, [pc, #624]	@ (8008a28 <_printf_float+0x2c8>)
 80087b8:	f04f 32ff 	mov.w	r2, #4294967295
 80087bc:	f7f8 f9d6 	bl	8000b6c <__aeabi_dcmpun>
 80087c0:	bb70      	cbnz	r0, 8008820 <_printf_float+0xc0>
 80087c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087c6:	4b98      	ldr	r3, [pc, #608]	@ (8008a28 <_printf_float+0x2c8>)
 80087c8:	f04f 32ff 	mov.w	r2, #4294967295
 80087cc:	f7f8 f9b0 	bl	8000b30 <__aeabi_dcmple>
 80087d0:	bb30      	cbnz	r0, 8008820 <_printf_float+0xc0>
 80087d2:	2200      	movs	r2, #0
 80087d4:	2300      	movs	r3, #0
 80087d6:	4640      	mov	r0, r8
 80087d8:	4649      	mov	r1, r9
 80087da:	f7f8 f99f 	bl	8000b1c <__aeabi_dcmplt>
 80087de:	b110      	cbz	r0, 80087e6 <_printf_float+0x86>
 80087e0:	232d      	movs	r3, #45	@ 0x2d
 80087e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087e6:	4a91      	ldr	r2, [pc, #580]	@ (8008a2c <_printf_float+0x2cc>)
 80087e8:	4b91      	ldr	r3, [pc, #580]	@ (8008a30 <_printf_float+0x2d0>)
 80087ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80087ee:	bf8c      	ite	hi
 80087f0:	4690      	movhi	r8, r2
 80087f2:	4698      	movls	r8, r3
 80087f4:	2303      	movs	r3, #3
 80087f6:	6123      	str	r3, [r4, #16]
 80087f8:	f02b 0304 	bic.w	r3, fp, #4
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	f04f 0900 	mov.w	r9, #0
 8008802:	9700      	str	r7, [sp, #0]
 8008804:	4633      	mov	r3, r6
 8008806:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008808:	4621      	mov	r1, r4
 800880a:	4628      	mov	r0, r5
 800880c:	f000 f9d2 	bl	8008bb4 <_printf_common>
 8008810:	3001      	adds	r0, #1
 8008812:	f040 808d 	bne.w	8008930 <_printf_float+0x1d0>
 8008816:	f04f 30ff 	mov.w	r0, #4294967295
 800881a:	b00d      	add	sp, #52	@ 0x34
 800881c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008820:	4642      	mov	r2, r8
 8008822:	464b      	mov	r3, r9
 8008824:	4640      	mov	r0, r8
 8008826:	4649      	mov	r1, r9
 8008828:	f7f8 f9a0 	bl	8000b6c <__aeabi_dcmpun>
 800882c:	b140      	cbz	r0, 8008840 <_printf_float+0xe0>
 800882e:	464b      	mov	r3, r9
 8008830:	2b00      	cmp	r3, #0
 8008832:	bfbc      	itt	lt
 8008834:	232d      	movlt	r3, #45	@ 0x2d
 8008836:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800883a:	4a7e      	ldr	r2, [pc, #504]	@ (8008a34 <_printf_float+0x2d4>)
 800883c:	4b7e      	ldr	r3, [pc, #504]	@ (8008a38 <_printf_float+0x2d8>)
 800883e:	e7d4      	b.n	80087ea <_printf_float+0x8a>
 8008840:	6863      	ldr	r3, [r4, #4]
 8008842:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008846:	9206      	str	r2, [sp, #24]
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	d13b      	bne.n	80088c4 <_printf_float+0x164>
 800884c:	2306      	movs	r3, #6
 800884e:	6063      	str	r3, [r4, #4]
 8008850:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008854:	2300      	movs	r3, #0
 8008856:	6022      	str	r2, [r4, #0]
 8008858:	9303      	str	r3, [sp, #12]
 800885a:	ab0a      	add	r3, sp, #40	@ 0x28
 800885c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008860:	ab09      	add	r3, sp, #36	@ 0x24
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	6861      	ldr	r1, [r4, #4]
 8008866:	ec49 8b10 	vmov	d0, r8, r9
 800886a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800886e:	4628      	mov	r0, r5
 8008870:	f7ff fed6 	bl	8008620 <__cvt>
 8008874:	9b06      	ldr	r3, [sp, #24]
 8008876:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008878:	2b47      	cmp	r3, #71	@ 0x47
 800887a:	4680      	mov	r8, r0
 800887c:	d129      	bne.n	80088d2 <_printf_float+0x172>
 800887e:	1cc8      	adds	r0, r1, #3
 8008880:	db02      	blt.n	8008888 <_printf_float+0x128>
 8008882:	6863      	ldr	r3, [r4, #4]
 8008884:	4299      	cmp	r1, r3
 8008886:	dd41      	ble.n	800890c <_printf_float+0x1ac>
 8008888:	f1aa 0a02 	sub.w	sl, sl, #2
 800888c:	fa5f fa8a 	uxtb.w	sl, sl
 8008890:	3901      	subs	r1, #1
 8008892:	4652      	mov	r2, sl
 8008894:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008898:	9109      	str	r1, [sp, #36]	@ 0x24
 800889a:	f7ff ff26 	bl	80086ea <__exponent>
 800889e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088a0:	1813      	adds	r3, r2, r0
 80088a2:	2a01      	cmp	r2, #1
 80088a4:	4681      	mov	r9, r0
 80088a6:	6123      	str	r3, [r4, #16]
 80088a8:	dc02      	bgt.n	80088b0 <_printf_float+0x150>
 80088aa:	6822      	ldr	r2, [r4, #0]
 80088ac:	07d2      	lsls	r2, r2, #31
 80088ae:	d501      	bpl.n	80088b4 <_printf_float+0x154>
 80088b0:	3301      	adds	r3, #1
 80088b2:	6123      	str	r3, [r4, #16]
 80088b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d0a2      	beq.n	8008802 <_printf_float+0xa2>
 80088bc:	232d      	movs	r3, #45	@ 0x2d
 80088be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088c2:	e79e      	b.n	8008802 <_printf_float+0xa2>
 80088c4:	9a06      	ldr	r2, [sp, #24]
 80088c6:	2a47      	cmp	r2, #71	@ 0x47
 80088c8:	d1c2      	bne.n	8008850 <_printf_float+0xf0>
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1c0      	bne.n	8008850 <_printf_float+0xf0>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e7bd      	b.n	800884e <_printf_float+0xee>
 80088d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80088d6:	d9db      	bls.n	8008890 <_printf_float+0x130>
 80088d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80088dc:	d118      	bne.n	8008910 <_printf_float+0x1b0>
 80088de:	2900      	cmp	r1, #0
 80088e0:	6863      	ldr	r3, [r4, #4]
 80088e2:	dd0b      	ble.n	80088fc <_printf_float+0x19c>
 80088e4:	6121      	str	r1, [r4, #16]
 80088e6:	b913      	cbnz	r3, 80088ee <_printf_float+0x18e>
 80088e8:	6822      	ldr	r2, [r4, #0]
 80088ea:	07d0      	lsls	r0, r2, #31
 80088ec:	d502      	bpl.n	80088f4 <_printf_float+0x194>
 80088ee:	3301      	adds	r3, #1
 80088f0:	440b      	add	r3, r1
 80088f2:	6123      	str	r3, [r4, #16]
 80088f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80088f6:	f04f 0900 	mov.w	r9, #0
 80088fa:	e7db      	b.n	80088b4 <_printf_float+0x154>
 80088fc:	b913      	cbnz	r3, 8008904 <_printf_float+0x1a4>
 80088fe:	6822      	ldr	r2, [r4, #0]
 8008900:	07d2      	lsls	r2, r2, #31
 8008902:	d501      	bpl.n	8008908 <_printf_float+0x1a8>
 8008904:	3302      	adds	r3, #2
 8008906:	e7f4      	b.n	80088f2 <_printf_float+0x192>
 8008908:	2301      	movs	r3, #1
 800890a:	e7f2      	b.n	80088f2 <_printf_float+0x192>
 800890c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008912:	4299      	cmp	r1, r3
 8008914:	db05      	blt.n	8008922 <_printf_float+0x1c2>
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	6121      	str	r1, [r4, #16]
 800891a:	07d8      	lsls	r0, r3, #31
 800891c:	d5ea      	bpl.n	80088f4 <_printf_float+0x194>
 800891e:	1c4b      	adds	r3, r1, #1
 8008920:	e7e7      	b.n	80088f2 <_printf_float+0x192>
 8008922:	2900      	cmp	r1, #0
 8008924:	bfd4      	ite	le
 8008926:	f1c1 0202 	rsble	r2, r1, #2
 800892a:	2201      	movgt	r2, #1
 800892c:	4413      	add	r3, r2
 800892e:	e7e0      	b.n	80088f2 <_printf_float+0x192>
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	055a      	lsls	r2, r3, #21
 8008934:	d407      	bmi.n	8008946 <_printf_float+0x1e6>
 8008936:	6923      	ldr	r3, [r4, #16]
 8008938:	4642      	mov	r2, r8
 800893a:	4631      	mov	r1, r6
 800893c:	4628      	mov	r0, r5
 800893e:	47b8      	blx	r7
 8008940:	3001      	adds	r0, #1
 8008942:	d12b      	bne.n	800899c <_printf_float+0x23c>
 8008944:	e767      	b.n	8008816 <_printf_float+0xb6>
 8008946:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800894a:	f240 80dd 	bls.w	8008b08 <_printf_float+0x3a8>
 800894e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008952:	2200      	movs	r2, #0
 8008954:	2300      	movs	r3, #0
 8008956:	f7f8 f8d7 	bl	8000b08 <__aeabi_dcmpeq>
 800895a:	2800      	cmp	r0, #0
 800895c:	d033      	beq.n	80089c6 <_printf_float+0x266>
 800895e:	4a37      	ldr	r2, [pc, #220]	@ (8008a3c <_printf_float+0x2dc>)
 8008960:	2301      	movs	r3, #1
 8008962:	4631      	mov	r1, r6
 8008964:	4628      	mov	r0, r5
 8008966:	47b8      	blx	r7
 8008968:	3001      	adds	r0, #1
 800896a:	f43f af54 	beq.w	8008816 <_printf_float+0xb6>
 800896e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008972:	4543      	cmp	r3, r8
 8008974:	db02      	blt.n	800897c <_printf_float+0x21c>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	07d8      	lsls	r0, r3, #31
 800897a:	d50f      	bpl.n	800899c <_printf_float+0x23c>
 800897c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008980:	4631      	mov	r1, r6
 8008982:	4628      	mov	r0, r5
 8008984:	47b8      	blx	r7
 8008986:	3001      	adds	r0, #1
 8008988:	f43f af45 	beq.w	8008816 <_printf_float+0xb6>
 800898c:	f04f 0900 	mov.w	r9, #0
 8008990:	f108 38ff 	add.w	r8, r8, #4294967295
 8008994:	f104 0a1a 	add.w	sl, r4, #26
 8008998:	45c8      	cmp	r8, r9
 800899a:	dc09      	bgt.n	80089b0 <_printf_float+0x250>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	079b      	lsls	r3, r3, #30
 80089a0:	f100 8103 	bmi.w	8008baa <_printf_float+0x44a>
 80089a4:	68e0      	ldr	r0, [r4, #12]
 80089a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089a8:	4298      	cmp	r0, r3
 80089aa:	bfb8      	it	lt
 80089ac:	4618      	movlt	r0, r3
 80089ae:	e734      	b.n	800881a <_printf_float+0xba>
 80089b0:	2301      	movs	r3, #1
 80089b2:	4652      	mov	r2, sl
 80089b4:	4631      	mov	r1, r6
 80089b6:	4628      	mov	r0, r5
 80089b8:	47b8      	blx	r7
 80089ba:	3001      	adds	r0, #1
 80089bc:	f43f af2b 	beq.w	8008816 <_printf_float+0xb6>
 80089c0:	f109 0901 	add.w	r9, r9, #1
 80089c4:	e7e8      	b.n	8008998 <_printf_float+0x238>
 80089c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	dc39      	bgt.n	8008a40 <_printf_float+0x2e0>
 80089cc:	4a1b      	ldr	r2, [pc, #108]	@ (8008a3c <_printf_float+0x2dc>)
 80089ce:	2301      	movs	r3, #1
 80089d0:	4631      	mov	r1, r6
 80089d2:	4628      	mov	r0, r5
 80089d4:	47b8      	blx	r7
 80089d6:	3001      	adds	r0, #1
 80089d8:	f43f af1d 	beq.w	8008816 <_printf_float+0xb6>
 80089dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80089e0:	ea59 0303 	orrs.w	r3, r9, r3
 80089e4:	d102      	bne.n	80089ec <_printf_float+0x28c>
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	07d9      	lsls	r1, r3, #31
 80089ea:	d5d7      	bpl.n	800899c <_printf_float+0x23c>
 80089ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089f0:	4631      	mov	r1, r6
 80089f2:	4628      	mov	r0, r5
 80089f4:	47b8      	blx	r7
 80089f6:	3001      	adds	r0, #1
 80089f8:	f43f af0d 	beq.w	8008816 <_printf_float+0xb6>
 80089fc:	f04f 0a00 	mov.w	sl, #0
 8008a00:	f104 0b1a 	add.w	fp, r4, #26
 8008a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a06:	425b      	negs	r3, r3
 8008a08:	4553      	cmp	r3, sl
 8008a0a:	dc01      	bgt.n	8008a10 <_printf_float+0x2b0>
 8008a0c:	464b      	mov	r3, r9
 8008a0e:	e793      	b.n	8008938 <_printf_float+0x1d8>
 8008a10:	2301      	movs	r3, #1
 8008a12:	465a      	mov	r2, fp
 8008a14:	4631      	mov	r1, r6
 8008a16:	4628      	mov	r0, r5
 8008a18:	47b8      	blx	r7
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	f43f aefb 	beq.w	8008816 <_printf_float+0xb6>
 8008a20:	f10a 0a01 	add.w	sl, sl, #1
 8008a24:	e7ee      	b.n	8008a04 <_printf_float+0x2a4>
 8008a26:	bf00      	nop
 8008a28:	7fefffff 	.word	0x7fefffff
 8008a2c:	0800b3dc 	.word	0x0800b3dc
 8008a30:	0800b3d8 	.word	0x0800b3d8
 8008a34:	0800b3e4 	.word	0x0800b3e4
 8008a38:	0800b3e0 	.word	0x0800b3e0
 8008a3c:	0800b3e8 	.word	0x0800b3e8
 8008a40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008a46:	4553      	cmp	r3, sl
 8008a48:	bfa8      	it	ge
 8008a4a:	4653      	movge	r3, sl
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	4699      	mov	r9, r3
 8008a50:	dc36      	bgt.n	8008ac0 <_printf_float+0x360>
 8008a52:	f04f 0b00 	mov.w	fp, #0
 8008a56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a5a:	f104 021a 	add.w	r2, r4, #26
 8008a5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a60:	9306      	str	r3, [sp, #24]
 8008a62:	eba3 0309 	sub.w	r3, r3, r9
 8008a66:	455b      	cmp	r3, fp
 8008a68:	dc31      	bgt.n	8008ace <_printf_float+0x36e>
 8008a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a6c:	459a      	cmp	sl, r3
 8008a6e:	dc3a      	bgt.n	8008ae6 <_printf_float+0x386>
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	07da      	lsls	r2, r3, #31
 8008a74:	d437      	bmi.n	8008ae6 <_printf_float+0x386>
 8008a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a78:	ebaa 0903 	sub.w	r9, sl, r3
 8008a7c:	9b06      	ldr	r3, [sp, #24]
 8008a7e:	ebaa 0303 	sub.w	r3, sl, r3
 8008a82:	4599      	cmp	r9, r3
 8008a84:	bfa8      	it	ge
 8008a86:	4699      	movge	r9, r3
 8008a88:	f1b9 0f00 	cmp.w	r9, #0
 8008a8c:	dc33      	bgt.n	8008af6 <_printf_float+0x396>
 8008a8e:	f04f 0800 	mov.w	r8, #0
 8008a92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a96:	f104 0b1a 	add.w	fp, r4, #26
 8008a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a9c:	ebaa 0303 	sub.w	r3, sl, r3
 8008aa0:	eba3 0309 	sub.w	r3, r3, r9
 8008aa4:	4543      	cmp	r3, r8
 8008aa6:	f77f af79 	ble.w	800899c <_printf_float+0x23c>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	465a      	mov	r2, fp
 8008aae:	4631      	mov	r1, r6
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	47b8      	blx	r7
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	f43f aeae 	beq.w	8008816 <_printf_float+0xb6>
 8008aba:	f108 0801 	add.w	r8, r8, #1
 8008abe:	e7ec      	b.n	8008a9a <_printf_float+0x33a>
 8008ac0:	4642      	mov	r2, r8
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b8      	blx	r7
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d1c2      	bne.n	8008a52 <_printf_float+0x2f2>
 8008acc:	e6a3      	b.n	8008816 <_printf_float+0xb6>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	4631      	mov	r1, r6
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	9206      	str	r2, [sp, #24]
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	f43f ae9c 	beq.w	8008816 <_printf_float+0xb6>
 8008ade:	9a06      	ldr	r2, [sp, #24]
 8008ae0:	f10b 0b01 	add.w	fp, fp, #1
 8008ae4:	e7bb      	b.n	8008a5e <_printf_float+0x2fe>
 8008ae6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008aea:	4631      	mov	r1, r6
 8008aec:	4628      	mov	r0, r5
 8008aee:	47b8      	blx	r7
 8008af0:	3001      	adds	r0, #1
 8008af2:	d1c0      	bne.n	8008a76 <_printf_float+0x316>
 8008af4:	e68f      	b.n	8008816 <_printf_float+0xb6>
 8008af6:	9a06      	ldr	r2, [sp, #24]
 8008af8:	464b      	mov	r3, r9
 8008afa:	4442      	add	r2, r8
 8008afc:	4631      	mov	r1, r6
 8008afe:	4628      	mov	r0, r5
 8008b00:	47b8      	blx	r7
 8008b02:	3001      	adds	r0, #1
 8008b04:	d1c3      	bne.n	8008a8e <_printf_float+0x32e>
 8008b06:	e686      	b.n	8008816 <_printf_float+0xb6>
 8008b08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b0c:	f1ba 0f01 	cmp.w	sl, #1
 8008b10:	dc01      	bgt.n	8008b16 <_printf_float+0x3b6>
 8008b12:	07db      	lsls	r3, r3, #31
 8008b14:	d536      	bpl.n	8008b84 <_printf_float+0x424>
 8008b16:	2301      	movs	r3, #1
 8008b18:	4642      	mov	r2, r8
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	47b8      	blx	r7
 8008b20:	3001      	adds	r0, #1
 8008b22:	f43f ae78 	beq.w	8008816 <_printf_float+0xb6>
 8008b26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	47b8      	blx	r7
 8008b30:	3001      	adds	r0, #1
 8008b32:	f43f ae70 	beq.w	8008816 <_printf_float+0xb6>
 8008b36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b42:	f7f7 ffe1 	bl	8000b08 <__aeabi_dcmpeq>
 8008b46:	b9c0      	cbnz	r0, 8008b7a <_printf_float+0x41a>
 8008b48:	4653      	mov	r3, sl
 8008b4a:	f108 0201 	add.w	r2, r8, #1
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4628      	mov	r0, r5
 8008b52:	47b8      	blx	r7
 8008b54:	3001      	adds	r0, #1
 8008b56:	d10c      	bne.n	8008b72 <_printf_float+0x412>
 8008b58:	e65d      	b.n	8008816 <_printf_float+0xb6>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	465a      	mov	r2, fp
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4628      	mov	r0, r5
 8008b62:	47b8      	blx	r7
 8008b64:	3001      	adds	r0, #1
 8008b66:	f43f ae56 	beq.w	8008816 <_printf_float+0xb6>
 8008b6a:	f108 0801 	add.w	r8, r8, #1
 8008b6e:	45d0      	cmp	r8, sl
 8008b70:	dbf3      	blt.n	8008b5a <_printf_float+0x3fa>
 8008b72:	464b      	mov	r3, r9
 8008b74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008b78:	e6df      	b.n	800893a <_printf_float+0x1da>
 8008b7a:	f04f 0800 	mov.w	r8, #0
 8008b7e:	f104 0b1a 	add.w	fp, r4, #26
 8008b82:	e7f4      	b.n	8008b6e <_printf_float+0x40e>
 8008b84:	2301      	movs	r3, #1
 8008b86:	4642      	mov	r2, r8
 8008b88:	e7e1      	b.n	8008b4e <_printf_float+0x3ee>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	464a      	mov	r2, r9
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4628      	mov	r0, r5
 8008b92:	47b8      	blx	r7
 8008b94:	3001      	adds	r0, #1
 8008b96:	f43f ae3e 	beq.w	8008816 <_printf_float+0xb6>
 8008b9a:	f108 0801 	add.w	r8, r8, #1
 8008b9e:	68e3      	ldr	r3, [r4, #12]
 8008ba0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ba2:	1a5b      	subs	r3, r3, r1
 8008ba4:	4543      	cmp	r3, r8
 8008ba6:	dcf0      	bgt.n	8008b8a <_printf_float+0x42a>
 8008ba8:	e6fc      	b.n	80089a4 <_printf_float+0x244>
 8008baa:	f04f 0800 	mov.w	r8, #0
 8008bae:	f104 0919 	add.w	r9, r4, #25
 8008bb2:	e7f4      	b.n	8008b9e <_printf_float+0x43e>

08008bb4 <_printf_common>:
 8008bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb8:	4616      	mov	r6, r2
 8008bba:	4698      	mov	r8, r3
 8008bbc:	688a      	ldr	r2, [r1, #8]
 8008bbe:	690b      	ldr	r3, [r1, #16]
 8008bc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	bfb8      	it	lt
 8008bc8:	4613      	movlt	r3, r2
 8008bca:	6033      	str	r3, [r6, #0]
 8008bcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008bd0:	4607      	mov	r7, r0
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	b10a      	cbz	r2, 8008bda <_printf_common+0x26>
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	6033      	str	r3, [r6, #0]
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	0699      	lsls	r1, r3, #26
 8008bde:	bf42      	ittt	mi
 8008be0:	6833      	ldrmi	r3, [r6, #0]
 8008be2:	3302      	addmi	r3, #2
 8008be4:	6033      	strmi	r3, [r6, #0]
 8008be6:	6825      	ldr	r5, [r4, #0]
 8008be8:	f015 0506 	ands.w	r5, r5, #6
 8008bec:	d106      	bne.n	8008bfc <_printf_common+0x48>
 8008bee:	f104 0a19 	add.w	sl, r4, #25
 8008bf2:	68e3      	ldr	r3, [r4, #12]
 8008bf4:	6832      	ldr	r2, [r6, #0]
 8008bf6:	1a9b      	subs	r3, r3, r2
 8008bf8:	42ab      	cmp	r3, r5
 8008bfa:	dc26      	bgt.n	8008c4a <_printf_common+0x96>
 8008bfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c00:	6822      	ldr	r2, [r4, #0]
 8008c02:	3b00      	subs	r3, #0
 8008c04:	bf18      	it	ne
 8008c06:	2301      	movne	r3, #1
 8008c08:	0692      	lsls	r2, r2, #26
 8008c0a:	d42b      	bmi.n	8008c64 <_printf_common+0xb0>
 8008c0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c10:	4641      	mov	r1, r8
 8008c12:	4638      	mov	r0, r7
 8008c14:	47c8      	blx	r9
 8008c16:	3001      	adds	r0, #1
 8008c18:	d01e      	beq.n	8008c58 <_printf_common+0xa4>
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	6922      	ldr	r2, [r4, #16]
 8008c1e:	f003 0306 	and.w	r3, r3, #6
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	bf02      	ittt	eq
 8008c26:	68e5      	ldreq	r5, [r4, #12]
 8008c28:	6833      	ldreq	r3, [r6, #0]
 8008c2a:	1aed      	subeq	r5, r5, r3
 8008c2c:	68a3      	ldr	r3, [r4, #8]
 8008c2e:	bf0c      	ite	eq
 8008c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c34:	2500      	movne	r5, #0
 8008c36:	4293      	cmp	r3, r2
 8008c38:	bfc4      	itt	gt
 8008c3a:	1a9b      	subgt	r3, r3, r2
 8008c3c:	18ed      	addgt	r5, r5, r3
 8008c3e:	2600      	movs	r6, #0
 8008c40:	341a      	adds	r4, #26
 8008c42:	42b5      	cmp	r5, r6
 8008c44:	d11a      	bne.n	8008c7c <_printf_common+0xc8>
 8008c46:	2000      	movs	r0, #0
 8008c48:	e008      	b.n	8008c5c <_printf_common+0xa8>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4652      	mov	r2, sl
 8008c4e:	4641      	mov	r1, r8
 8008c50:	4638      	mov	r0, r7
 8008c52:	47c8      	blx	r9
 8008c54:	3001      	adds	r0, #1
 8008c56:	d103      	bne.n	8008c60 <_printf_common+0xac>
 8008c58:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c60:	3501      	adds	r5, #1
 8008c62:	e7c6      	b.n	8008bf2 <_printf_common+0x3e>
 8008c64:	18e1      	adds	r1, r4, r3
 8008c66:	1c5a      	adds	r2, r3, #1
 8008c68:	2030      	movs	r0, #48	@ 0x30
 8008c6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c6e:	4422      	add	r2, r4
 8008c70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c78:	3302      	adds	r3, #2
 8008c7a:	e7c7      	b.n	8008c0c <_printf_common+0x58>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	4622      	mov	r2, r4
 8008c80:	4641      	mov	r1, r8
 8008c82:	4638      	mov	r0, r7
 8008c84:	47c8      	blx	r9
 8008c86:	3001      	adds	r0, #1
 8008c88:	d0e6      	beq.n	8008c58 <_printf_common+0xa4>
 8008c8a:	3601      	adds	r6, #1
 8008c8c:	e7d9      	b.n	8008c42 <_printf_common+0x8e>
	...

08008c90 <_printf_i>:
 8008c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c94:	7e0f      	ldrb	r7, [r1, #24]
 8008c96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c98:	2f78      	cmp	r7, #120	@ 0x78
 8008c9a:	4691      	mov	r9, r2
 8008c9c:	4680      	mov	r8, r0
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	469a      	mov	sl, r3
 8008ca2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ca6:	d807      	bhi.n	8008cb8 <_printf_i+0x28>
 8008ca8:	2f62      	cmp	r7, #98	@ 0x62
 8008caa:	d80a      	bhi.n	8008cc2 <_printf_i+0x32>
 8008cac:	2f00      	cmp	r7, #0
 8008cae:	f000 80d1 	beq.w	8008e54 <_printf_i+0x1c4>
 8008cb2:	2f58      	cmp	r7, #88	@ 0x58
 8008cb4:	f000 80b8 	beq.w	8008e28 <_printf_i+0x198>
 8008cb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008cc0:	e03a      	b.n	8008d38 <_printf_i+0xa8>
 8008cc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008cc6:	2b15      	cmp	r3, #21
 8008cc8:	d8f6      	bhi.n	8008cb8 <_printf_i+0x28>
 8008cca:	a101      	add	r1, pc, #4	@ (adr r1, 8008cd0 <_printf_i+0x40>)
 8008ccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cd0:	08008d29 	.word	0x08008d29
 8008cd4:	08008d3d 	.word	0x08008d3d
 8008cd8:	08008cb9 	.word	0x08008cb9
 8008cdc:	08008cb9 	.word	0x08008cb9
 8008ce0:	08008cb9 	.word	0x08008cb9
 8008ce4:	08008cb9 	.word	0x08008cb9
 8008ce8:	08008d3d 	.word	0x08008d3d
 8008cec:	08008cb9 	.word	0x08008cb9
 8008cf0:	08008cb9 	.word	0x08008cb9
 8008cf4:	08008cb9 	.word	0x08008cb9
 8008cf8:	08008cb9 	.word	0x08008cb9
 8008cfc:	08008e3b 	.word	0x08008e3b
 8008d00:	08008d67 	.word	0x08008d67
 8008d04:	08008df5 	.word	0x08008df5
 8008d08:	08008cb9 	.word	0x08008cb9
 8008d0c:	08008cb9 	.word	0x08008cb9
 8008d10:	08008e5d 	.word	0x08008e5d
 8008d14:	08008cb9 	.word	0x08008cb9
 8008d18:	08008d67 	.word	0x08008d67
 8008d1c:	08008cb9 	.word	0x08008cb9
 8008d20:	08008cb9 	.word	0x08008cb9
 8008d24:	08008dfd 	.word	0x08008dfd
 8008d28:	6833      	ldr	r3, [r6, #0]
 8008d2a:	1d1a      	adds	r2, r3, #4
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6032      	str	r2, [r6, #0]
 8008d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e09c      	b.n	8008e76 <_printf_i+0x1e6>
 8008d3c:	6833      	ldr	r3, [r6, #0]
 8008d3e:	6820      	ldr	r0, [r4, #0]
 8008d40:	1d19      	adds	r1, r3, #4
 8008d42:	6031      	str	r1, [r6, #0]
 8008d44:	0606      	lsls	r6, r0, #24
 8008d46:	d501      	bpl.n	8008d4c <_printf_i+0xbc>
 8008d48:	681d      	ldr	r5, [r3, #0]
 8008d4a:	e003      	b.n	8008d54 <_printf_i+0xc4>
 8008d4c:	0645      	lsls	r5, r0, #25
 8008d4e:	d5fb      	bpl.n	8008d48 <_printf_i+0xb8>
 8008d50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d54:	2d00      	cmp	r5, #0
 8008d56:	da03      	bge.n	8008d60 <_printf_i+0xd0>
 8008d58:	232d      	movs	r3, #45	@ 0x2d
 8008d5a:	426d      	negs	r5, r5
 8008d5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d60:	4858      	ldr	r0, [pc, #352]	@ (8008ec4 <_printf_i+0x234>)
 8008d62:	230a      	movs	r3, #10
 8008d64:	e011      	b.n	8008d8a <_printf_i+0xfa>
 8008d66:	6821      	ldr	r1, [r4, #0]
 8008d68:	6833      	ldr	r3, [r6, #0]
 8008d6a:	0608      	lsls	r0, r1, #24
 8008d6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d70:	d402      	bmi.n	8008d78 <_printf_i+0xe8>
 8008d72:	0649      	lsls	r1, r1, #25
 8008d74:	bf48      	it	mi
 8008d76:	b2ad      	uxthmi	r5, r5
 8008d78:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d7a:	4852      	ldr	r0, [pc, #328]	@ (8008ec4 <_printf_i+0x234>)
 8008d7c:	6033      	str	r3, [r6, #0]
 8008d7e:	bf14      	ite	ne
 8008d80:	230a      	movne	r3, #10
 8008d82:	2308      	moveq	r3, #8
 8008d84:	2100      	movs	r1, #0
 8008d86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d8a:	6866      	ldr	r6, [r4, #4]
 8008d8c:	60a6      	str	r6, [r4, #8]
 8008d8e:	2e00      	cmp	r6, #0
 8008d90:	db05      	blt.n	8008d9e <_printf_i+0x10e>
 8008d92:	6821      	ldr	r1, [r4, #0]
 8008d94:	432e      	orrs	r6, r5
 8008d96:	f021 0104 	bic.w	r1, r1, #4
 8008d9a:	6021      	str	r1, [r4, #0]
 8008d9c:	d04b      	beq.n	8008e36 <_printf_i+0x1a6>
 8008d9e:	4616      	mov	r6, r2
 8008da0:	fbb5 f1f3 	udiv	r1, r5, r3
 8008da4:	fb03 5711 	mls	r7, r3, r1, r5
 8008da8:	5dc7      	ldrb	r7, [r0, r7]
 8008daa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008dae:	462f      	mov	r7, r5
 8008db0:	42bb      	cmp	r3, r7
 8008db2:	460d      	mov	r5, r1
 8008db4:	d9f4      	bls.n	8008da0 <_printf_i+0x110>
 8008db6:	2b08      	cmp	r3, #8
 8008db8:	d10b      	bne.n	8008dd2 <_printf_i+0x142>
 8008dba:	6823      	ldr	r3, [r4, #0]
 8008dbc:	07df      	lsls	r7, r3, #31
 8008dbe:	d508      	bpl.n	8008dd2 <_printf_i+0x142>
 8008dc0:	6923      	ldr	r3, [r4, #16]
 8008dc2:	6861      	ldr	r1, [r4, #4]
 8008dc4:	4299      	cmp	r1, r3
 8008dc6:	bfde      	ittt	le
 8008dc8:	2330      	movle	r3, #48	@ 0x30
 8008dca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008dce:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008dd2:	1b92      	subs	r2, r2, r6
 8008dd4:	6122      	str	r2, [r4, #16]
 8008dd6:	f8cd a000 	str.w	sl, [sp]
 8008dda:	464b      	mov	r3, r9
 8008ddc:	aa03      	add	r2, sp, #12
 8008dde:	4621      	mov	r1, r4
 8008de0:	4640      	mov	r0, r8
 8008de2:	f7ff fee7 	bl	8008bb4 <_printf_common>
 8008de6:	3001      	adds	r0, #1
 8008de8:	d14a      	bne.n	8008e80 <_printf_i+0x1f0>
 8008dea:	f04f 30ff 	mov.w	r0, #4294967295
 8008dee:	b004      	add	sp, #16
 8008df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	f043 0320 	orr.w	r3, r3, #32
 8008dfa:	6023      	str	r3, [r4, #0]
 8008dfc:	4832      	ldr	r0, [pc, #200]	@ (8008ec8 <_printf_i+0x238>)
 8008dfe:	2778      	movs	r7, #120	@ 0x78
 8008e00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	6831      	ldr	r1, [r6, #0]
 8008e08:	061f      	lsls	r7, r3, #24
 8008e0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e0e:	d402      	bmi.n	8008e16 <_printf_i+0x186>
 8008e10:	065f      	lsls	r7, r3, #25
 8008e12:	bf48      	it	mi
 8008e14:	b2ad      	uxthmi	r5, r5
 8008e16:	6031      	str	r1, [r6, #0]
 8008e18:	07d9      	lsls	r1, r3, #31
 8008e1a:	bf44      	itt	mi
 8008e1c:	f043 0320 	orrmi.w	r3, r3, #32
 8008e20:	6023      	strmi	r3, [r4, #0]
 8008e22:	b11d      	cbz	r5, 8008e2c <_printf_i+0x19c>
 8008e24:	2310      	movs	r3, #16
 8008e26:	e7ad      	b.n	8008d84 <_printf_i+0xf4>
 8008e28:	4826      	ldr	r0, [pc, #152]	@ (8008ec4 <_printf_i+0x234>)
 8008e2a:	e7e9      	b.n	8008e00 <_printf_i+0x170>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	f023 0320 	bic.w	r3, r3, #32
 8008e32:	6023      	str	r3, [r4, #0]
 8008e34:	e7f6      	b.n	8008e24 <_printf_i+0x194>
 8008e36:	4616      	mov	r6, r2
 8008e38:	e7bd      	b.n	8008db6 <_printf_i+0x126>
 8008e3a:	6833      	ldr	r3, [r6, #0]
 8008e3c:	6825      	ldr	r5, [r4, #0]
 8008e3e:	6961      	ldr	r1, [r4, #20]
 8008e40:	1d18      	adds	r0, r3, #4
 8008e42:	6030      	str	r0, [r6, #0]
 8008e44:	062e      	lsls	r6, r5, #24
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	d501      	bpl.n	8008e4e <_printf_i+0x1be>
 8008e4a:	6019      	str	r1, [r3, #0]
 8008e4c:	e002      	b.n	8008e54 <_printf_i+0x1c4>
 8008e4e:	0668      	lsls	r0, r5, #25
 8008e50:	d5fb      	bpl.n	8008e4a <_printf_i+0x1ba>
 8008e52:	8019      	strh	r1, [r3, #0]
 8008e54:	2300      	movs	r3, #0
 8008e56:	6123      	str	r3, [r4, #16]
 8008e58:	4616      	mov	r6, r2
 8008e5a:	e7bc      	b.n	8008dd6 <_printf_i+0x146>
 8008e5c:	6833      	ldr	r3, [r6, #0]
 8008e5e:	1d1a      	adds	r2, r3, #4
 8008e60:	6032      	str	r2, [r6, #0]
 8008e62:	681e      	ldr	r6, [r3, #0]
 8008e64:	6862      	ldr	r2, [r4, #4]
 8008e66:	2100      	movs	r1, #0
 8008e68:	4630      	mov	r0, r6
 8008e6a:	f7f7 f9d1 	bl	8000210 <memchr>
 8008e6e:	b108      	cbz	r0, 8008e74 <_printf_i+0x1e4>
 8008e70:	1b80      	subs	r0, r0, r6
 8008e72:	6060      	str	r0, [r4, #4]
 8008e74:	6863      	ldr	r3, [r4, #4]
 8008e76:	6123      	str	r3, [r4, #16]
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e7e:	e7aa      	b.n	8008dd6 <_printf_i+0x146>
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	4632      	mov	r2, r6
 8008e84:	4649      	mov	r1, r9
 8008e86:	4640      	mov	r0, r8
 8008e88:	47d0      	blx	sl
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	d0ad      	beq.n	8008dea <_printf_i+0x15a>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	079b      	lsls	r3, r3, #30
 8008e92:	d413      	bmi.n	8008ebc <_printf_i+0x22c>
 8008e94:	68e0      	ldr	r0, [r4, #12]
 8008e96:	9b03      	ldr	r3, [sp, #12]
 8008e98:	4298      	cmp	r0, r3
 8008e9a:	bfb8      	it	lt
 8008e9c:	4618      	movlt	r0, r3
 8008e9e:	e7a6      	b.n	8008dee <_printf_i+0x15e>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	4632      	mov	r2, r6
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	47d0      	blx	sl
 8008eaa:	3001      	adds	r0, #1
 8008eac:	d09d      	beq.n	8008dea <_printf_i+0x15a>
 8008eae:	3501      	adds	r5, #1
 8008eb0:	68e3      	ldr	r3, [r4, #12]
 8008eb2:	9903      	ldr	r1, [sp, #12]
 8008eb4:	1a5b      	subs	r3, r3, r1
 8008eb6:	42ab      	cmp	r3, r5
 8008eb8:	dcf2      	bgt.n	8008ea0 <_printf_i+0x210>
 8008eba:	e7eb      	b.n	8008e94 <_printf_i+0x204>
 8008ebc:	2500      	movs	r5, #0
 8008ebe:	f104 0619 	add.w	r6, r4, #25
 8008ec2:	e7f5      	b.n	8008eb0 <_printf_i+0x220>
 8008ec4:	0800b3ea 	.word	0x0800b3ea
 8008ec8:	0800b3fb 	.word	0x0800b3fb

08008ecc <std>:
 8008ecc:	2300      	movs	r3, #0
 8008ece:	b510      	push	{r4, lr}
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eda:	6083      	str	r3, [r0, #8]
 8008edc:	8181      	strh	r1, [r0, #12]
 8008ede:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ee0:	81c2      	strh	r2, [r0, #14]
 8008ee2:	6183      	str	r3, [r0, #24]
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	2208      	movs	r2, #8
 8008ee8:	305c      	adds	r0, #92	@ 0x5c
 8008eea:	f000 f92a 	bl	8009142 <memset>
 8008eee:	4b0d      	ldr	r3, [pc, #52]	@ (8008f24 <std+0x58>)
 8008ef0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f28 <std+0x5c>)
 8008ef4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f2c <std+0x60>)
 8008ef8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008efa:	4b0d      	ldr	r3, [pc, #52]	@ (8008f30 <std+0x64>)
 8008efc:	6323      	str	r3, [r4, #48]	@ 0x30
 8008efe:	4b0d      	ldr	r3, [pc, #52]	@ (8008f34 <std+0x68>)
 8008f00:	6224      	str	r4, [r4, #32]
 8008f02:	429c      	cmp	r4, r3
 8008f04:	d006      	beq.n	8008f14 <std+0x48>
 8008f06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f0a:	4294      	cmp	r4, r2
 8008f0c:	d002      	beq.n	8008f14 <std+0x48>
 8008f0e:	33d0      	adds	r3, #208	@ 0xd0
 8008f10:	429c      	cmp	r4, r3
 8008f12:	d105      	bne.n	8008f20 <std+0x54>
 8008f14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f1c:	f000 b98e 	b.w	800923c <__retarget_lock_init_recursive>
 8008f20:	bd10      	pop	{r4, pc}
 8008f22:	bf00      	nop
 8008f24:	080090bd 	.word	0x080090bd
 8008f28:	080090df 	.word	0x080090df
 8008f2c:	08009117 	.word	0x08009117
 8008f30:	0800913b 	.word	0x0800913b
 8008f34:	20000738 	.word	0x20000738

08008f38 <stdio_exit_handler>:
 8008f38:	4a02      	ldr	r2, [pc, #8]	@ (8008f44 <stdio_exit_handler+0xc>)
 8008f3a:	4903      	ldr	r1, [pc, #12]	@ (8008f48 <stdio_exit_handler+0x10>)
 8008f3c:	4803      	ldr	r0, [pc, #12]	@ (8008f4c <stdio_exit_handler+0x14>)
 8008f3e:	f000 b869 	b.w	8009014 <_fwalk_sglue>
 8008f42:	bf00      	nop
 8008f44:	20000018 	.word	0x20000018
 8008f48:	0800aba5 	.word	0x0800aba5
 8008f4c:	20000028 	.word	0x20000028

08008f50 <cleanup_stdio>:
 8008f50:	6841      	ldr	r1, [r0, #4]
 8008f52:	4b0c      	ldr	r3, [pc, #48]	@ (8008f84 <cleanup_stdio+0x34>)
 8008f54:	4299      	cmp	r1, r3
 8008f56:	b510      	push	{r4, lr}
 8008f58:	4604      	mov	r4, r0
 8008f5a:	d001      	beq.n	8008f60 <cleanup_stdio+0x10>
 8008f5c:	f001 fe22 	bl	800aba4 <_fflush_r>
 8008f60:	68a1      	ldr	r1, [r4, #8]
 8008f62:	4b09      	ldr	r3, [pc, #36]	@ (8008f88 <cleanup_stdio+0x38>)
 8008f64:	4299      	cmp	r1, r3
 8008f66:	d002      	beq.n	8008f6e <cleanup_stdio+0x1e>
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f001 fe1b 	bl	800aba4 <_fflush_r>
 8008f6e:	68e1      	ldr	r1, [r4, #12]
 8008f70:	4b06      	ldr	r3, [pc, #24]	@ (8008f8c <cleanup_stdio+0x3c>)
 8008f72:	4299      	cmp	r1, r3
 8008f74:	d004      	beq.n	8008f80 <cleanup_stdio+0x30>
 8008f76:	4620      	mov	r0, r4
 8008f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f7c:	f001 be12 	b.w	800aba4 <_fflush_r>
 8008f80:	bd10      	pop	{r4, pc}
 8008f82:	bf00      	nop
 8008f84:	20000738 	.word	0x20000738
 8008f88:	200007a0 	.word	0x200007a0
 8008f8c:	20000808 	.word	0x20000808

08008f90 <global_stdio_init.part.0>:
 8008f90:	b510      	push	{r4, lr}
 8008f92:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc0 <global_stdio_init.part.0+0x30>)
 8008f94:	4c0b      	ldr	r4, [pc, #44]	@ (8008fc4 <global_stdio_init.part.0+0x34>)
 8008f96:	4a0c      	ldr	r2, [pc, #48]	@ (8008fc8 <global_stdio_init.part.0+0x38>)
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2104      	movs	r1, #4
 8008fa0:	f7ff ff94 	bl	8008ecc <std>
 8008fa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008fa8:	2201      	movs	r2, #1
 8008faa:	2109      	movs	r1, #9
 8008fac:	f7ff ff8e 	bl	8008ecc <std>
 8008fb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fba:	2112      	movs	r1, #18
 8008fbc:	f7ff bf86 	b.w	8008ecc <std>
 8008fc0:	20000870 	.word	0x20000870
 8008fc4:	20000738 	.word	0x20000738
 8008fc8:	08008f39 	.word	0x08008f39

08008fcc <__sfp_lock_acquire>:
 8008fcc:	4801      	ldr	r0, [pc, #4]	@ (8008fd4 <__sfp_lock_acquire+0x8>)
 8008fce:	f000 b936 	b.w	800923e <__retarget_lock_acquire_recursive>
 8008fd2:	bf00      	nop
 8008fd4:	20000879 	.word	0x20000879

08008fd8 <__sfp_lock_release>:
 8008fd8:	4801      	ldr	r0, [pc, #4]	@ (8008fe0 <__sfp_lock_release+0x8>)
 8008fda:	f000 b931 	b.w	8009240 <__retarget_lock_release_recursive>
 8008fde:	bf00      	nop
 8008fe0:	20000879 	.word	0x20000879

08008fe4 <__sinit>:
 8008fe4:	b510      	push	{r4, lr}
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	f7ff fff0 	bl	8008fcc <__sfp_lock_acquire>
 8008fec:	6a23      	ldr	r3, [r4, #32]
 8008fee:	b11b      	cbz	r3, 8008ff8 <__sinit+0x14>
 8008ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ff4:	f7ff bff0 	b.w	8008fd8 <__sfp_lock_release>
 8008ff8:	4b04      	ldr	r3, [pc, #16]	@ (800900c <__sinit+0x28>)
 8008ffa:	6223      	str	r3, [r4, #32]
 8008ffc:	4b04      	ldr	r3, [pc, #16]	@ (8009010 <__sinit+0x2c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1f5      	bne.n	8008ff0 <__sinit+0xc>
 8009004:	f7ff ffc4 	bl	8008f90 <global_stdio_init.part.0>
 8009008:	e7f2      	b.n	8008ff0 <__sinit+0xc>
 800900a:	bf00      	nop
 800900c:	08008f51 	.word	0x08008f51
 8009010:	20000870 	.word	0x20000870

08009014 <_fwalk_sglue>:
 8009014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009018:	4607      	mov	r7, r0
 800901a:	4688      	mov	r8, r1
 800901c:	4614      	mov	r4, r2
 800901e:	2600      	movs	r6, #0
 8009020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009024:	f1b9 0901 	subs.w	r9, r9, #1
 8009028:	d505      	bpl.n	8009036 <_fwalk_sglue+0x22>
 800902a:	6824      	ldr	r4, [r4, #0]
 800902c:	2c00      	cmp	r4, #0
 800902e:	d1f7      	bne.n	8009020 <_fwalk_sglue+0xc>
 8009030:	4630      	mov	r0, r6
 8009032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009036:	89ab      	ldrh	r3, [r5, #12]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d907      	bls.n	800904c <_fwalk_sglue+0x38>
 800903c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009040:	3301      	adds	r3, #1
 8009042:	d003      	beq.n	800904c <_fwalk_sglue+0x38>
 8009044:	4629      	mov	r1, r5
 8009046:	4638      	mov	r0, r7
 8009048:	47c0      	blx	r8
 800904a:	4306      	orrs	r6, r0
 800904c:	3568      	adds	r5, #104	@ 0x68
 800904e:	e7e9      	b.n	8009024 <_fwalk_sglue+0x10>

08009050 <sniprintf>:
 8009050:	b40c      	push	{r2, r3}
 8009052:	b530      	push	{r4, r5, lr}
 8009054:	4b18      	ldr	r3, [pc, #96]	@ (80090b8 <sniprintf+0x68>)
 8009056:	1e0c      	subs	r4, r1, #0
 8009058:	681d      	ldr	r5, [r3, #0]
 800905a:	b09d      	sub	sp, #116	@ 0x74
 800905c:	da08      	bge.n	8009070 <sniprintf+0x20>
 800905e:	238b      	movs	r3, #139	@ 0x8b
 8009060:	602b      	str	r3, [r5, #0]
 8009062:	f04f 30ff 	mov.w	r0, #4294967295
 8009066:	b01d      	add	sp, #116	@ 0x74
 8009068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800906c:	b002      	add	sp, #8
 800906e:	4770      	bx	lr
 8009070:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009074:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009078:	f04f 0300 	mov.w	r3, #0
 800907c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800907e:	bf14      	ite	ne
 8009080:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009084:	4623      	moveq	r3, r4
 8009086:	9304      	str	r3, [sp, #16]
 8009088:	9307      	str	r3, [sp, #28]
 800908a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800908e:	9002      	str	r0, [sp, #8]
 8009090:	9006      	str	r0, [sp, #24]
 8009092:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009096:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009098:	ab21      	add	r3, sp, #132	@ 0x84
 800909a:	a902      	add	r1, sp, #8
 800909c:	4628      	mov	r0, r5
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	f001 fc00 	bl	800a8a4 <_svfiprintf_r>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	bfbc      	itt	lt
 80090a8:	238b      	movlt	r3, #139	@ 0x8b
 80090aa:	602b      	strlt	r3, [r5, #0]
 80090ac:	2c00      	cmp	r4, #0
 80090ae:	d0da      	beq.n	8009066 <sniprintf+0x16>
 80090b0:	9b02      	ldr	r3, [sp, #8]
 80090b2:	2200      	movs	r2, #0
 80090b4:	701a      	strb	r2, [r3, #0]
 80090b6:	e7d6      	b.n	8009066 <sniprintf+0x16>
 80090b8:	20000024 	.word	0x20000024

080090bc <__sread>:
 80090bc:	b510      	push	{r4, lr}
 80090be:	460c      	mov	r4, r1
 80090c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c4:	f000 f86c 	bl	80091a0 <_read_r>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	bfab      	itete	ge
 80090cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80090ce:	89a3      	ldrhlt	r3, [r4, #12]
 80090d0:	181b      	addge	r3, r3, r0
 80090d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80090d6:	bfac      	ite	ge
 80090d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80090da:	81a3      	strhlt	r3, [r4, #12]
 80090dc:	bd10      	pop	{r4, pc}

080090de <__swrite>:
 80090de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e2:	461f      	mov	r7, r3
 80090e4:	898b      	ldrh	r3, [r1, #12]
 80090e6:	05db      	lsls	r3, r3, #23
 80090e8:	4605      	mov	r5, r0
 80090ea:	460c      	mov	r4, r1
 80090ec:	4616      	mov	r6, r2
 80090ee:	d505      	bpl.n	80090fc <__swrite+0x1e>
 80090f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f4:	2302      	movs	r3, #2
 80090f6:	2200      	movs	r2, #0
 80090f8:	f000 f840 	bl	800917c <_lseek_r>
 80090fc:	89a3      	ldrh	r3, [r4, #12]
 80090fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009102:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009106:	81a3      	strh	r3, [r4, #12]
 8009108:	4632      	mov	r2, r6
 800910a:	463b      	mov	r3, r7
 800910c:	4628      	mov	r0, r5
 800910e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009112:	f000 b857 	b.w	80091c4 <_write_r>

08009116 <__sseek>:
 8009116:	b510      	push	{r4, lr}
 8009118:	460c      	mov	r4, r1
 800911a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911e:	f000 f82d 	bl	800917c <_lseek_r>
 8009122:	1c43      	adds	r3, r0, #1
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	bf15      	itete	ne
 8009128:	6560      	strne	r0, [r4, #84]	@ 0x54
 800912a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800912e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009132:	81a3      	strheq	r3, [r4, #12]
 8009134:	bf18      	it	ne
 8009136:	81a3      	strhne	r3, [r4, #12]
 8009138:	bd10      	pop	{r4, pc}

0800913a <__sclose>:
 800913a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800913e:	f000 b80d 	b.w	800915c <_close_r>

08009142 <memset>:
 8009142:	4402      	add	r2, r0
 8009144:	4603      	mov	r3, r0
 8009146:	4293      	cmp	r3, r2
 8009148:	d100      	bne.n	800914c <memset+0xa>
 800914a:	4770      	bx	lr
 800914c:	f803 1b01 	strb.w	r1, [r3], #1
 8009150:	e7f9      	b.n	8009146 <memset+0x4>
	...

08009154 <_localeconv_r>:
 8009154:	4800      	ldr	r0, [pc, #0]	@ (8009158 <_localeconv_r+0x4>)
 8009156:	4770      	bx	lr
 8009158:	20000164 	.word	0x20000164

0800915c <_close_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	4d06      	ldr	r5, [pc, #24]	@ (8009178 <_close_r+0x1c>)
 8009160:	2300      	movs	r3, #0
 8009162:	4604      	mov	r4, r0
 8009164:	4608      	mov	r0, r1
 8009166:	602b      	str	r3, [r5, #0]
 8009168:	f7f9 fb96 	bl	8002898 <_close>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d102      	bne.n	8009176 <_close_r+0x1a>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	b103      	cbz	r3, 8009176 <_close_r+0x1a>
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	20000874 	.word	0x20000874

0800917c <_lseek_r>:
 800917c:	b538      	push	{r3, r4, r5, lr}
 800917e:	4d07      	ldr	r5, [pc, #28]	@ (800919c <_lseek_r+0x20>)
 8009180:	4604      	mov	r4, r0
 8009182:	4608      	mov	r0, r1
 8009184:	4611      	mov	r1, r2
 8009186:	2200      	movs	r2, #0
 8009188:	602a      	str	r2, [r5, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	f7f9 fbab 	bl	80028e6 <_lseek>
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	d102      	bne.n	800919a <_lseek_r+0x1e>
 8009194:	682b      	ldr	r3, [r5, #0]
 8009196:	b103      	cbz	r3, 800919a <_lseek_r+0x1e>
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	20000874 	.word	0x20000874

080091a0 <_read_r>:
 80091a0:	b538      	push	{r3, r4, r5, lr}
 80091a2:	4d07      	ldr	r5, [pc, #28]	@ (80091c0 <_read_r+0x20>)
 80091a4:	4604      	mov	r4, r0
 80091a6:	4608      	mov	r0, r1
 80091a8:	4611      	mov	r1, r2
 80091aa:	2200      	movs	r2, #0
 80091ac:	602a      	str	r2, [r5, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	f7f9 fb39 	bl	8002826 <_read>
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	d102      	bne.n	80091be <_read_r+0x1e>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	b103      	cbz	r3, 80091be <_read_r+0x1e>
 80091bc:	6023      	str	r3, [r4, #0]
 80091be:	bd38      	pop	{r3, r4, r5, pc}
 80091c0:	20000874 	.word	0x20000874

080091c4 <_write_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4d07      	ldr	r5, [pc, #28]	@ (80091e4 <_write_r+0x20>)
 80091c8:	4604      	mov	r4, r0
 80091ca:	4608      	mov	r0, r1
 80091cc:	4611      	mov	r1, r2
 80091ce:	2200      	movs	r2, #0
 80091d0:	602a      	str	r2, [r5, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	f7f9 fb44 	bl	8002860 <_write>
 80091d8:	1c43      	adds	r3, r0, #1
 80091da:	d102      	bne.n	80091e2 <_write_r+0x1e>
 80091dc:	682b      	ldr	r3, [r5, #0]
 80091de:	b103      	cbz	r3, 80091e2 <_write_r+0x1e>
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
 80091e4:	20000874 	.word	0x20000874

080091e8 <__errno>:
 80091e8:	4b01      	ldr	r3, [pc, #4]	@ (80091f0 <__errno+0x8>)
 80091ea:	6818      	ldr	r0, [r3, #0]
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	20000024 	.word	0x20000024

080091f4 <__libc_init_array>:
 80091f4:	b570      	push	{r4, r5, r6, lr}
 80091f6:	4d0d      	ldr	r5, [pc, #52]	@ (800922c <__libc_init_array+0x38>)
 80091f8:	4c0d      	ldr	r4, [pc, #52]	@ (8009230 <__libc_init_array+0x3c>)
 80091fa:	1b64      	subs	r4, r4, r5
 80091fc:	10a4      	asrs	r4, r4, #2
 80091fe:	2600      	movs	r6, #0
 8009200:	42a6      	cmp	r6, r4
 8009202:	d109      	bne.n	8009218 <__libc_init_array+0x24>
 8009204:	4d0b      	ldr	r5, [pc, #44]	@ (8009234 <__libc_init_array+0x40>)
 8009206:	4c0c      	ldr	r4, [pc, #48]	@ (8009238 <__libc_init_array+0x44>)
 8009208:	f002 f86a 	bl	800b2e0 <_init>
 800920c:	1b64      	subs	r4, r4, r5
 800920e:	10a4      	asrs	r4, r4, #2
 8009210:	2600      	movs	r6, #0
 8009212:	42a6      	cmp	r6, r4
 8009214:	d105      	bne.n	8009222 <__libc_init_array+0x2e>
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	f855 3b04 	ldr.w	r3, [r5], #4
 800921c:	4798      	blx	r3
 800921e:	3601      	adds	r6, #1
 8009220:	e7ee      	b.n	8009200 <__libc_init_array+0xc>
 8009222:	f855 3b04 	ldr.w	r3, [r5], #4
 8009226:	4798      	blx	r3
 8009228:	3601      	adds	r6, #1
 800922a:	e7f2      	b.n	8009212 <__libc_init_array+0x1e>
 800922c:	0800b754 	.word	0x0800b754
 8009230:	0800b754 	.word	0x0800b754
 8009234:	0800b754 	.word	0x0800b754
 8009238:	0800b758 	.word	0x0800b758

0800923c <__retarget_lock_init_recursive>:
 800923c:	4770      	bx	lr

0800923e <__retarget_lock_acquire_recursive>:
 800923e:	4770      	bx	lr

08009240 <__retarget_lock_release_recursive>:
 8009240:	4770      	bx	lr

08009242 <quorem>:
 8009242:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009246:	6903      	ldr	r3, [r0, #16]
 8009248:	690c      	ldr	r4, [r1, #16]
 800924a:	42a3      	cmp	r3, r4
 800924c:	4607      	mov	r7, r0
 800924e:	db7e      	blt.n	800934e <quorem+0x10c>
 8009250:	3c01      	subs	r4, #1
 8009252:	f101 0814 	add.w	r8, r1, #20
 8009256:	00a3      	lsls	r3, r4, #2
 8009258:	f100 0514 	add.w	r5, r0, #20
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009262:	9301      	str	r3, [sp, #4]
 8009264:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009268:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800926c:	3301      	adds	r3, #1
 800926e:	429a      	cmp	r2, r3
 8009270:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009274:	fbb2 f6f3 	udiv	r6, r2, r3
 8009278:	d32e      	bcc.n	80092d8 <quorem+0x96>
 800927a:	f04f 0a00 	mov.w	sl, #0
 800927e:	46c4      	mov	ip, r8
 8009280:	46ae      	mov	lr, r5
 8009282:	46d3      	mov	fp, sl
 8009284:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009288:	b298      	uxth	r0, r3
 800928a:	fb06 a000 	mla	r0, r6, r0, sl
 800928e:	0c02      	lsrs	r2, r0, #16
 8009290:	0c1b      	lsrs	r3, r3, #16
 8009292:	fb06 2303 	mla	r3, r6, r3, r2
 8009296:	f8de 2000 	ldr.w	r2, [lr]
 800929a:	b280      	uxth	r0, r0
 800929c:	b292      	uxth	r2, r2
 800929e:	1a12      	subs	r2, r2, r0
 80092a0:	445a      	add	r2, fp
 80092a2:	f8de 0000 	ldr.w	r0, [lr]
 80092a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80092b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80092b4:	b292      	uxth	r2, r2
 80092b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80092ba:	45e1      	cmp	r9, ip
 80092bc:	f84e 2b04 	str.w	r2, [lr], #4
 80092c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80092c4:	d2de      	bcs.n	8009284 <quorem+0x42>
 80092c6:	9b00      	ldr	r3, [sp, #0]
 80092c8:	58eb      	ldr	r3, [r5, r3]
 80092ca:	b92b      	cbnz	r3, 80092d8 <quorem+0x96>
 80092cc:	9b01      	ldr	r3, [sp, #4]
 80092ce:	3b04      	subs	r3, #4
 80092d0:	429d      	cmp	r5, r3
 80092d2:	461a      	mov	r2, r3
 80092d4:	d32f      	bcc.n	8009336 <quorem+0xf4>
 80092d6:	613c      	str	r4, [r7, #16]
 80092d8:	4638      	mov	r0, r7
 80092da:	f001 f97f 	bl	800a5dc <__mcmp>
 80092de:	2800      	cmp	r0, #0
 80092e0:	db25      	blt.n	800932e <quorem+0xec>
 80092e2:	4629      	mov	r1, r5
 80092e4:	2000      	movs	r0, #0
 80092e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80092ea:	f8d1 c000 	ldr.w	ip, [r1]
 80092ee:	fa1f fe82 	uxth.w	lr, r2
 80092f2:	fa1f f38c 	uxth.w	r3, ip
 80092f6:	eba3 030e 	sub.w	r3, r3, lr
 80092fa:	4403      	add	r3, r0
 80092fc:	0c12      	lsrs	r2, r2, #16
 80092fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009302:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009306:	b29b      	uxth	r3, r3
 8009308:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800930c:	45c1      	cmp	r9, r8
 800930e:	f841 3b04 	str.w	r3, [r1], #4
 8009312:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009316:	d2e6      	bcs.n	80092e6 <quorem+0xa4>
 8009318:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800931c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009320:	b922      	cbnz	r2, 800932c <quorem+0xea>
 8009322:	3b04      	subs	r3, #4
 8009324:	429d      	cmp	r5, r3
 8009326:	461a      	mov	r2, r3
 8009328:	d30b      	bcc.n	8009342 <quorem+0x100>
 800932a:	613c      	str	r4, [r7, #16]
 800932c:	3601      	adds	r6, #1
 800932e:	4630      	mov	r0, r6
 8009330:	b003      	add	sp, #12
 8009332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009336:	6812      	ldr	r2, [r2, #0]
 8009338:	3b04      	subs	r3, #4
 800933a:	2a00      	cmp	r2, #0
 800933c:	d1cb      	bne.n	80092d6 <quorem+0x94>
 800933e:	3c01      	subs	r4, #1
 8009340:	e7c6      	b.n	80092d0 <quorem+0x8e>
 8009342:	6812      	ldr	r2, [r2, #0]
 8009344:	3b04      	subs	r3, #4
 8009346:	2a00      	cmp	r2, #0
 8009348:	d1ef      	bne.n	800932a <quorem+0xe8>
 800934a:	3c01      	subs	r4, #1
 800934c:	e7ea      	b.n	8009324 <quorem+0xe2>
 800934e:	2000      	movs	r0, #0
 8009350:	e7ee      	b.n	8009330 <quorem+0xee>
 8009352:	0000      	movs	r0, r0
 8009354:	0000      	movs	r0, r0
	...

08009358 <_dtoa_r>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	69c7      	ldr	r7, [r0, #28]
 800935e:	b097      	sub	sp, #92	@ 0x5c
 8009360:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009364:	ec55 4b10 	vmov	r4, r5, d0
 8009368:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800936a:	9107      	str	r1, [sp, #28]
 800936c:	4681      	mov	r9, r0
 800936e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009370:	9311      	str	r3, [sp, #68]	@ 0x44
 8009372:	b97f      	cbnz	r7, 8009394 <_dtoa_r+0x3c>
 8009374:	2010      	movs	r0, #16
 8009376:	f000 fe09 	bl	8009f8c <malloc>
 800937a:	4602      	mov	r2, r0
 800937c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009380:	b920      	cbnz	r0, 800938c <_dtoa_r+0x34>
 8009382:	4ba9      	ldr	r3, [pc, #676]	@ (8009628 <_dtoa_r+0x2d0>)
 8009384:	21ef      	movs	r1, #239	@ 0xef
 8009386:	48a9      	ldr	r0, [pc, #676]	@ (800962c <_dtoa_r+0x2d4>)
 8009388:	f001 fc6c 	bl	800ac64 <__assert_func>
 800938c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009390:	6007      	str	r7, [r0, #0]
 8009392:	60c7      	str	r7, [r0, #12]
 8009394:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009398:	6819      	ldr	r1, [r3, #0]
 800939a:	b159      	cbz	r1, 80093b4 <_dtoa_r+0x5c>
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	604a      	str	r2, [r1, #4]
 80093a0:	2301      	movs	r3, #1
 80093a2:	4093      	lsls	r3, r2
 80093a4:	608b      	str	r3, [r1, #8]
 80093a6:	4648      	mov	r0, r9
 80093a8:	f000 fee6 	bl	800a178 <_Bfree>
 80093ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80093b0:	2200      	movs	r2, #0
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	1e2b      	subs	r3, r5, #0
 80093b6:	bfb9      	ittee	lt
 80093b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80093bc:	9305      	strlt	r3, [sp, #20]
 80093be:	2300      	movge	r3, #0
 80093c0:	6033      	strge	r3, [r6, #0]
 80093c2:	9f05      	ldr	r7, [sp, #20]
 80093c4:	4b9a      	ldr	r3, [pc, #616]	@ (8009630 <_dtoa_r+0x2d8>)
 80093c6:	bfbc      	itt	lt
 80093c8:	2201      	movlt	r2, #1
 80093ca:	6032      	strlt	r2, [r6, #0]
 80093cc:	43bb      	bics	r3, r7
 80093ce:	d112      	bne.n	80093f6 <_dtoa_r+0x9e>
 80093d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80093d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80093d6:	6013      	str	r3, [r2, #0]
 80093d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093dc:	4323      	orrs	r3, r4
 80093de:	f000 855a 	beq.w	8009e96 <_dtoa_r+0xb3e>
 80093e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80093e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009644 <_dtoa_r+0x2ec>
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 855c 	beq.w	8009ea6 <_dtoa_r+0xb4e>
 80093ee:	f10a 0303 	add.w	r3, sl, #3
 80093f2:	f000 bd56 	b.w	8009ea2 <_dtoa_r+0xb4a>
 80093f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80093fa:	2200      	movs	r2, #0
 80093fc:	ec51 0b17 	vmov	r0, r1, d7
 8009400:	2300      	movs	r3, #0
 8009402:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009406:	f7f7 fb7f 	bl	8000b08 <__aeabi_dcmpeq>
 800940a:	4680      	mov	r8, r0
 800940c:	b158      	cbz	r0, 8009426 <_dtoa_r+0xce>
 800940e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009410:	2301      	movs	r3, #1
 8009412:	6013      	str	r3, [r2, #0]
 8009414:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009416:	b113      	cbz	r3, 800941e <_dtoa_r+0xc6>
 8009418:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800941a:	4b86      	ldr	r3, [pc, #536]	@ (8009634 <_dtoa_r+0x2dc>)
 800941c:	6013      	str	r3, [r2, #0]
 800941e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009648 <_dtoa_r+0x2f0>
 8009422:	f000 bd40 	b.w	8009ea6 <_dtoa_r+0xb4e>
 8009426:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800942a:	aa14      	add	r2, sp, #80	@ 0x50
 800942c:	a915      	add	r1, sp, #84	@ 0x54
 800942e:	4648      	mov	r0, r9
 8009430:	f001 f984 	bl	800a73c <__d2b>
 8009434:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009438:	9002      	str	r0, [sp, #8]
 800943a:	2e00      	cmp	r6, #0
 800943c:	d078      	beq.n	8009530 <_dtoa_r+0x1d8>
 800943e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009440:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009448:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800944c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009450:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009454:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009458:	4619      	mov	r1, r3
 800945a:	2200      	movs	r2, #0
 800945c:	4b76      	ldr	r3, [pc, #472]	@ (8009638 <_dtoa_r+0x2e0>)
 800945e:	f7f6 ff33 	bl	80002c8 <__aeabi_dsub>
 8009462:	a36b      	add	r3, pc, #428	@ (adr r3, 8009610 <_dtoa_r+0x2b8>)
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	f7f7 f8e6 	bl	8000638 <__aeabi_dmul>
 800946c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009618 <_dtoa_r+0x2c0>)
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f7f6 ff2b 	bl	80002cc <__adddf3>
 8009476:	4604      	mov	r4, r0
 8009478:	4630      	mov	r0, r6
 800947a:	460d      	mov	r5, r1
 800947c:	f7f7 f872 	bl	8000564 <__aeabi_i2d>
 8009480:	a367      	add	r3, pc, #412	@ (adr r3, 8009620 <_dtoa_r+0x2c8>)
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	f7f7 f8d7 	bl	8000638 <__aeabi_dmul>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	4620      	mov	r0, r4
 8009490:	4629      	mov	r1, r5
 8009492:	f7f6 ff1b 	bl	80002cc <__adddf3>
 8009496:	4604      	mov	r4, r0
 8009498:	460d      	mov	r5, r1
 800949a:	f7f7 fb7d 	bl	8000b98 <__aeabi_d2iz>
 800949e:	2200      	movs	r2, #0
 80094a0:	4607      	mov	r7, r0
 80094a2:	2300      	movs	r3, #0
 80094a4:	4620      	mov	r0, r4
 80094a6:	4629      	mov	r1, r5
 80094a8:	f7f7 fb38 	bl	8000b1c <__aeabi_dcmplt>
 80094ac:	b140      	cbz	r0, 80094c0 <_dtoa_r+0x168>
 80094ae:	4638      	mov	r0, r7
 80094b0:	f7f7 f858 	bl	8000564 <__aeabi_i2d>
 80094b4:	4622      	mov	r2, r4
 80094b6:	462b      	mov	r3, r5
 80094b8:	f7f7 fb26 	bl	8000b08 <__aeabi_dcmpeq>
 80094bc:	b900      	cbnz	r0, 80094c0 <_dtoa_r+0x168>
 80094be:	3f01      	subs	r7, #1
 80094c0:	2f16      	cmp	r7, #22
 80094c2:	d852      	bhi.n	800956a <_dtoa_r+0x212>
 80094c4:	4b5d      	ldr	r3, [pc, #372]	@ (800963c <_dtoa_r+0x2e4>)
 80094c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80094d2:	f7f7 fb23 	bl	8000b1c <__aeabi_dcmplt>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	d049      	beq.n	800956e <_dtoa_r+0x216>
 80094da:	3f01      	subs	r7, #1
 80094dc:	2300      	movs	r3, #0
 80094de:	9310      	str	r3, [sp, #64]	@ 0x40
 80094e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094e2:	1b9b      	subs	r3, r3, r6
 80094e4:	1e5a      	subs	r2, r3, #1
 80094e6:	bf45      	ittet	mi
 80094e8:	f1c3 0301 	rsbmi	r3, r3, #1
 80094ec:	9300      	strmi	r3, [sp, #0]
 80094ee:	2300      	movpl	r3, #0
 80094f0:	2300      	movmi	r3, #0
 80094f2:	9206      	str	r2, [sp, #24]
 80094f4:	bf54      	ite	pl
 80094f6:	9300      	strpl	r3, [sp, #0]
 80094f8:	9306      	strmi	r3, [sp, #24]
 80094fa:	2f00      	cmp	r7, #0
 80094fc:	db39      	blt.n	8009572 <_dtoa_r+0x21a>
 80094fe:	9b06      	ldr	r3, [sp, #24]
 8009500:	970d      	str	r7, [sp, #52]	@ 0x34
 8009502:	443b      	add	r3, r7
 8009504:	9306      	str	r3, [sp, #24]
 8009506:	2300      	movs	r3, #0
 8009508:	9308      	str	r3, [sp, #32]
 800950a:	9b07      	ldr	r3, [sp, #28]
 800950c:	2b09      	cmp	r3, #9
 800950e:	d863      	bhi.n	80095d8 <_dtoa_r+0x280>
 8009510:	2b05      	cmp	r3, #5
 8009512:	bfc4      	itt	gt
 8009514:	3b04      	subgt	r3, #4
 8009516:	9307      	strgt	r3, [sp, #28]
 8009518:	9b07      	ldr	r3, [sp, #28]
 800951a:	f1a3 0302 	sub.w	r3, r3, #2
 800951e:	bfcc      	ite	gt
 8009520:	2400      	movgt	r4, #0
 8009522:	2401      	movle	r4, #1
 8009524:	2b03      	cmp	r3, #3
 8009526:	d863      	bhi.n	80095f0 <_dtoa_r+0x298>
 8009528:	e8df f003 	tbb	[pc, r3]
 800952c:	2b375452 	.word	0x2b375452
 8009530:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009534:	441e      	add	r6, r3
 8009536:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800953a:	2b20      	cmp	r3, #32
 800953c:	bfc1      	itttt	gt
 800953e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009542:	409f      	lslgt	r7, r3
 8009544:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009548:	fa24 f303 	lsrgt.w	r3, r4, r3
 800954c:	bfd6      	itet	le
 800954e:	f1c3 0320 	rsble	r3, r3, #32
 8009552:	ea47 0003 	orrgt.w	r0, r7, r3
 8009556:	fa04 f003 	lslle.w	r0, r4, r3
 800955a:	f7f6 fff3 	bl	8000544 <__aeabi_ui2d>
 800955e:	2201      	movs	r2, #1
 8009560:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009564:	3e01      	subs	r6, #1
 8009566:	9212      	str	r2, [sp, #72]	@ 0x48
 8009568:	e776      	b.n	8009458 <_dtoa_r+0x100>
 800956a:	2301      	movs	r3, #1
 800956c:	e7b7      	b.n	80094de <_dtoa_r+0x186>
 800956e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009570:	e7b6      	b.n	80094e0 <_dtoa_r+0x188>
 8009572:	9b00      	ldr	r3, [sp, #0]
 8009574:	1bdb      	subs	r3, r3, r7
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	427b      	negs	r3, r7
 800957a:	9308      	str	r3, [sp, #32]
 800957c:	2300      	movs	r3, #0
 800957e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009580:	e7c3      	b.n	800950a <_dtoa_r+0x1b2>
 8009582:	2301      	movs	r3, #1
 8009584:	9309      	str	r3, [sp, #36]	@ 0x24
 8009586:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009588:	eb07 0b03 	add.w	fp, r7, r3
 800958c:	f10b 0301 	add.w	r3, fp, #1
 8009590:	2b01      	cmp	r3, #1
 8009592:	9303      	str	r3, [sp, #12]
 8009594:	bfb8      	it	lt
 8009596:	2301      	movlt	r3, #1
 8009598:	e006      	b.n	80095a8 <_dtoa_r+0x250>
 800959a:	2301      	movs	r3, #1
 800959c:	9309      	str	r3, [sp, #36]	@ 0x24
 800959e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	dd28      	ble.n	80095f6 <_dtoa_r+0x29e>
 80095a4:	469b      	mov	fp, r3
 80095a6:	9303      	str	r3, [sp, #12]
 80095a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80095ac:	2100      	movs	r1, #0
 80095ae:	2204      	movs	r2, #4
 80095b0:	f102 0514 	add.w	r5, r2, #20
 80095b4:	429d      	cmp	r5, r3
 80095b6:	d926      	bls.n	8009606 <_dtoa_r+0x2ae>
 80095b8:	6041      	str	r1, [r0, #4]
 80095ba:	4648      	mov	r0, r9
 80095bc:	f000 fd9c 	bl	800a0f8 <_Balloc>
 80095c0:	4682      	mov	sl, r0
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d142      	bne.n	800964c <_dtoa_r+0x2f4>
 80095c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009640 <_dtoa_r+0x2e8>)
 80095c8:	4602      	mov	r2, r0
 80095ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80095ce:	e6da      	b.n	8009386 <_dtoa_r+0x2e>
 80095d0:	2300      	movs	r3, #0
 80095d2:	e7e3      	b.n	800959c <_dtoa_r+0x244>
 80095d4:	2300      	movs	r3, #0
 80095d6:	e7d5      	b.n	8009584 <_dtoa_r+0x22c>
 80095d8:	2401      	movs	r4, #1
 80095da:	2300      	movs	r3, #0
 80095dc:	9307      	str	r3, [sp, #28]
 80095de:	9409      	str	r4, [sp, #36]	@ 0x24
 80095e0:	f04f 3bff 	mov.w	fp, #4294967295
 80095e4:	2200      	movs	r2, #0
 80095e6:	f8cd b00c 	str.w	fp, [sp, #12]
 80095ea:	2312      	movs	r3, #18
 80095ec:	920c      	str	r2, [sp, #48]	@ 0x30
 80095ee:	e7db      	b.n	80095a8 <_dtoa_r+0x250>
 80095f0:	2301      	movs	r3, #1
 80095f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80095f4:	e7f4      	b.n	80095e0 <_dtoa_r+0x288>
 80095f6:	f04f 0b01 	mov.w	fp, #1
 80095fa:	f8cd b00c 	str.w	fp, [sp, #12]
 80095fe:	465b      	mov	r3, fp
 8009600:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009604:	e7d0      	b.n	80095a8 <_dtoa_r+0x250>
 8009606:	3101      	adds	r1, #1
 8009608:	0052      	lsls	r2, r2, #1
 800960a:	e7d1      	b.n	80095b0 <_dtoa_r+0x258>
 800960c:	f3af 8000 	nop.w
 8009610:	636f4361 	.word	0x636f4361
 8009614:	3fd287a7 	.word	0x3fd287a7
 8009618:	8b60c8b3 	.word	0x8b60c8b3
 800961c:	3fc68a28 	.word	0x3fc68a28
 8009620:	509f79fb 	.word	0x509f79fb
 8009624:	3fd34413 	.word	0x3fd34413
 8009628:	0800b419 	.word	0x0800b419
 800962c:	0800b430 	.word	0x0800b430
 8009630:	7ff00000 	.word	0x7ff00000
 8009634:	0800b3e9 	.word	0x0800b3e9
 8009638:	3ff80000 	.word	0x3ff80000
 800963c:	0800b580 	.word	0x0800b580
 8009640:	0800b488 	.word	0x0800b488
 8009644:	0800b415 	.word	0x0800b415
 8009648:	0800b3e8 	.word	0x0800b3e8
 800964c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009650:	6018      	str	r0, [r3, #0]
 8009652:	9b03      	ldr	r3, [sp, #12]
 8009654:	2b0e      	cmp	r3, #14
 8009656:	f200 80a1 	bhi.w	800979c <_dtoa_r+0x444>
 800965a:	2c00      	cmp	r4, #0
 800965c:	f000 809e 	beq.w	800979c <_dtoa_r+0x444>
 8009660:	2f00      	cmp	r7, #0
 8009662:	dd33      	ble.n	80096cc <_dtoa_r+0x374>
 8009664:	4b9c      	ldr	r3, [pc, #624]	@ (80098d8 <_dtoa_r+0x580>)
 8009666:	f007 020f 	and.w	r2, r7, #15
 800966a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800966e:	ed93 7b00 	vldr	d7, [r3]
 8009672:	05f8      	lsls	r0, r7, #23
 8009674:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009678:	ea4f 1427 	mov.w	r4, r7, asr #4
 800967c:	d516      	bpl.n	80096ac <_dtoa_r+0x354>
 800967e:	4b97      	ldr	r3, [pc, #604]	@ (80098dc <_dtoa_r+0x584>)
 8009680:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009684:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009688:	f7f7 f900 	bl	800088c <__aeabi_ddiv>
 800968c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009690:	f004 040f 	and.w	r4, r4, #15
 8009694:	2603      	movs	r6, #3
 8009696:	4d91      	ldr	r5, [pc, #580]	@ (80098dc <_dtoa_r+0x584>)
 8009698:	b954      	cbnz	r4, 80096b0 <_dtoa_r+0x358>
 800969a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800969e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096a2:	f7f7 f8f3 	bl	800088c <__aeabi_ddiv>
 80096a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096aa:	e028      	b.n	80096fe <_dtoa_r+0x3a6>
 80096ac:	2602      	movs	r6, #2
 80096ae:	e7f2      	b.n	8009696 <_dtoa_r+0x33e>
 80096b0:	07e1      	lsls	r1, r4, #31
 80096b2:	d508      	bpl.n	80096c6 <_dtoa_r+0x36e>
 80096b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80096b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096bc:	f7f6 ffbc 	bl	8000638 <__aeabi_dmul>
 80096c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80096c4:	3601      	adds	r6, #1
 80096c6:	1064      	asrs	r4, r4, #1
 80096c8:	3508      	adds	r5, #8
 80096ca:	e7e5      	b.n	8009698 <_dtoa_r+0x340>
 80096cc:	f000 80af 	beq.w	800982e <_dtoa_r+0x4d6>
 80096d0:	427c      	negs	r4, r7
 80096d2:	4b81      	ldr	r3, [pc, #516]	@ (80098d8 <_dtoa_r+0x580>)
 80096d4:	4d81      	ldr	r5, [pc, #516]	@ (80098dc <_dtoa_r+0x584>)
 80096d6:	f004 020f 	and.w	r2, r4, #15
 80096da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096e6:	f7f6 ffa7 	bl	8000638 <__aeabi_dmul>
 80096ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096ee:	1124      	asrs	r4, r4, #4
 80096f0:	2300      	movs	r3, #0
 80096f2:	2602      	movs	r6, #2
 80096f4:	2c00      	cmp	r4, #0
 80096f6:	f040 808f 	bne.w	8009818 <_dtoa_r+0x4c0>
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1d3      	bne.n	80096a6 <_dtoa_r+0x34e>
 80096fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009700:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	f000 8094 	beq.w	8009832 <_dtoa_r+0x4da>
 800970a:	4b75      	ldr	r3, [pc, #468]	@ (80098e0 <_dtoa_r+0x588>)
 800970c:	2200      	movs	r2, #0
 800970e:	4620      	mov	r0, r4
 8009710:	4629      	mov	r1, r5
 8009712:	f7f7 fa03 	bl	8000b1c <__aeabi_dcmplt>
 8009716:	2800      	cmp	r0, #0
 8009718:	f000 808b 	beq.w	8009832 <_dtoa_r+0x4da>
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	2b00      	cmp	r3, #0
 8009720:	f000 8087 	beq.w	8009832 <_dtoa_r+0x4da>
 8009724:	f1bb 0f00 	cmp.w	fp, #0
 8009728:	dd34      	ble.n	8009794 <_dtoa_r+0x43c>
 800972a:	4620      	mov	r0, r4
 800972c:	4b6d      	ldr	r3, [pc, #436]	@ (80098e4 <_dtoa_r+0x58c>)
 800972e:	2200      	movs	r2, #0
 8009730:	4629      	mov	r1, r5
 8009732:	f7f6 ff81 	bl	8000638 <__aeabi_dmul>
 8009736:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800973a:	f107 38ff 	add.w	r8, r7, #4294967295
 800973e:	3601      	adds	r6, #1
 8009740:	465c      	mov	r4, fp
 8009742:	4630      	mov	r0, r6
 8009744:	f7f6 ff0e 	bl	8000564 <__aeabi_i2d>
 8009748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800974c:	f7f6 ff74 	bl	8000638 <__aeabi_dmul>
 8009750:	4b65      	ldr	r3, [pc, #404]	@ (80098e8 <_dtoa_r+0x590>)
 8009752:	2200      	movs	r2, #0
 8009754:	f7f6 fdba 	bl	80002cc <__adddf3>
 8009758:	4605      	mov	r5, r0
 800975a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800975e:	2c00      	cmp	r4, #0
 8009760:	d16a      	bne.n	8009838 <_dtoa_r+0x4e0>
 8009762:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009766:	4b61      	ldr	r3, [pc, #388]	@ (80098ec <_dtoa_r+0x594>)
 8009768:	2200      	movs	r2, #0
 800976a:	f7f6 fdad 	bl	80002c8 <__aeabi_dsub>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009776:	462a      	mov	r2, r5
 8009778:	4633      	mov	r3, r6
 800977a:	f7f7 f9ed 	bl	8000b58 <__aeabi_dcmpgt>
 800977e:	2800      	cmp	r0, #0
 8009780:	f040 8298 	bne.w	8009cb4 <_dtoa_r+0x95c>
 8009784:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009788:	462a      	mov	r2, r5
 800978a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800978e:	f7f7 f9c5 	bl	8000b1c <__aeabi_dcmplt>
 8009792:	bb38      	cbnz	r0, 80097e4 <_dtoa_r+0x48c>
 8009794:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009798:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800979c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f2c0 8157 	blt.w	8009a52 <_dtoa_r+0x6fa>
 80097a4:	2f0e      	cmp	r7, #14
 80097a6:	f300 8154 	bgt.w	8009a52 <_dtoa_r+0x6fa>
 80097aa:	4b4b      	ldr	r3, [pc, #300]	@ (80098d8 <_dtoa_r+0x580>)
 80097ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097b0:	ed93 7b00 	vldr	d7, [r3]
 80097b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	ed8d 7b00 	vstr	d7, [sp]
 80097bc:	f280 80e5 	bge.w	800998a <_dtoa_r+0x632>
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f300 80e1 	bgt.w	800998a <_dtoa_r+0x632>
 80097c8:	d10c      	bne.n	80097e4 <_dtoa_r+0x48c>
 80097ca:	4b48      	ldr	r3, [pc, #288]	@ (80098ec <_dtoa_r+0x594>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	ec51 0b17 	vmov	r0, r1, d7
 80097d2:	f7f6 ff31 	bl	8000638 <__aeabi_dmul>
 80097d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097da:	f7f7 f9b3 	bl	8000b44 <__aeabi_dcmpge>
 80097de:	2800      	cmp	r0, #0
 80097e0:	f000 8266 	beq.w	8009cb0 <_dtoa_r+0x958>
 80097e4:	2400      	movs	r4, #0
 80097e6:	4625      	mov	r5, r4
 80097e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097ea:	4656      	mov	r6, sl
 80097ec:	ea6f 0803 	mvn.w	r8, r3
 80097f0:	2700      	movs	r7, #0
 80097f2:	4621      	mov	r1, r4
 80097f4:	4648      	mov	r0, r9
 80097f6:	f000 fcbf 	bl	800a178 <_Bfree>
 80097fa:	2d00      	cmp	r5, #0
 80097fc:	f000 80bd 	beq.w	800997a <_dtoa_r+0x622>
 8009800:	b12f      	cbz	r7, 800980e <_dtoa_r+0x4b6>
 8009802:	42af      	cmp	r7, r5
 8009804:	d003      	beq.n	800980e <_dtoa_r+0x4b6>
 8009806:	4639      	mov	r1, r7
 8009808:	4648      	mov	r0, r9
 800980a:	f000 fcb5 	bl	800a178 <_Bfree>
 800980e:	4629      	mov	r1, r5
 8009810:	4648      	mov	r0, r9
 8009812:	f000 fcb1 	bl	800a178 <_Bfree>
 8009816:	e0b0      	b.n	800997a <_dtoa_r+0x622>
 8009818:	07e2      	lsls	r2, r4, #31
 800981a:	d505      	bpl.n	8009828 <_dtoa_r+0x4d0>
 800981c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009820:	f7f6 ff0a 	bl	8000638 <__aeabi_dmul>
 8009824:	3601      	adds	r6, #1
 8009826:	2301      	movs	r3, #1
 8009828:	1064      	asrs	r4, r4, #1
 800982a:	3508      	adds	r5, #8
 800982c:	e762      	b.n	80096f4 <_dtoa_r+0x39c>
 800982e:	2602      	movs	r6, #2
 8009830:	e765      	b.n	80096fe <_dtoa_r+0x3a6>
 8009832:	9c03      	ldr	r4, [sp, #12]
 8009834:	46b8      	mov	r8, r7
 8009836:	e784      	b.n	8009742 <_dtoa_r+0x3ea>
 8009838:	4b27      	ldr	r3, [pc, #156]	@ (80098d8 <_dtoa_r+0x580>)
 800983a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800983c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009840:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009844:	4454      	add	r4, sl
 8009846:	2900      	cmp	r1, #0
 8009848:	d054      	beq.n	80098f4 <_dtoa_r+0x59c>
 800984a:	4929      	ldr	r1, [pc, #164]	@ (80098f0 <_dtoa_r+0x598>)
 800984c:	2000      	movs	r0, #0
 800984e:	f7f7 f81d 	bl	800088c <__aeabi_ddiv>
 8009852:	4633      	mov	r3, r6
 8009854:	462a      	mov	r2, r5
 8009856:	f7f6 fd37 	bl	80002c8 <__aeabi_dsub>
 800985a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800985e:	4656      	mov	r6, sl
 8009860:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009864:	f7f7 f998 	bl	8000b98 <__aeabi_d2iz>
 8009868:	4605      	mov	r5, r0
 800986a:	f7f6 fe7b 	bl	8000564 <__aeabi_i2d>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009876:	f7f6 fd27 	bl	80002c8 <__aeabi_dsub>
 800987a:	3530      	adds	r5, #48	@ 0x30
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009884:	f806 5b01 	strb.w	r5, [r6], #1
 8009888:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800988c:	f7f7 f946 	bl	8000b1c <__aeabi_dcmplt>
 8009890:	2800      	cmp	r0, #0
 8009892:	d172      	bne.n	800997a <_dtoa_r+0x622>
 8009894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009898:	4911      	ldr	r1, [pc, #68]	@ (80098e0 <_dtoa_r+0x588>)
 800989a:	2000      	movs	r0, #0
 800989c:	f7f6 fd14 	bl	80002c8 <__aeabi_dsub>
 80098a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80098a4:	f7f7 f93a 	bl	8000b1c <__aeabi_dcmplt>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	f040 80b4 	bne.w	8009a16 <_dtoa_r+0x6be>
 80098ae:	42a6      	cmp	r6, r4
 80098b0:	f43f af70 	beq.w	8009794 <_dtoa_r+0x43c>
 80098b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80098b8:	4b0a      	ldr	r3, [pc, #40]	@ (80098e4 <_dtoa_r+0x58c>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	f7f6 febc 	bl	8000638 <__aeabi_dmul>
 80098c0:	4b08      	ldr	r3, [pc, #32]	@ (80098e4 <_dtoa_r+0x58c>)
 80098c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80098c6:	2200      	movs	r2, #0
 80098c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098cc:	f7f6 feb4 	bl	8000638 <__aeabi_dmul>
 80098d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098d4:	e7c4      	b.n	8009860 <_dtoa_r+0x508>
 80098d6:	bf00      	nop
 80098d8:	0800b580 	.word	0x0800b580
 80098dc:	0800b558 	.word	0x0800b558
 80098e0:	3ff00000 	.word	0x3ff00000
 80098e4:	40240000 	.word	0x40240000
 80098e8:	401c0000 	.word	0x401c0000
 80098ec:	40140000 	.word	0x40140000
 80098f0:	3fe00000 	.word	0x3fe00000
 80098f4:	4631      	mov	r1, r6
 80098f6:	4628      	mov	r0, r5
 80098f8:	f7f6 fe9e 	bl	8000638 <__aeabi_dmul>
 80098fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009900:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009902:	4656      	mov	r6, sl
 8009904:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009908:	f7f7 f946 	bl	8000b98 <__aeabi_d2iz>
 800990c:	4605      	mov	r5, r0
 800990e:	f7f6 fe29 	bl	8000564 <__aeabi_i2d>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800991a:	f7f6 fcd5 	bl	80002c8 <__aeabi_dsub>
 800991e:	3530      	adds	r5, #48	@ 0x30
 8009920:	f806 5b01 	strb.w	r5, [r6], #1
 8009924:	4602      	mov	r2, r0
 8009926:	460b      	mov	r3, r1
 8009928:	42a6      	cmp	r6, r4
 800992a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800992e:	f04f 0200 	mov.w	r2, #0
 8009932:	d124      	bne.n	800997e <_dtoa_r+0x626>
 8009934:	4baf      	ldr	r3, [pc, #700]	@ (8009bf4 <_dtoa_r+0x89c>)
 8009936:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800993a:	f7f6 fcc7 	bl	80002cc <__adddf3>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009946:	f7f7 f907 	bl	8000b58 <__aeabi_dcmpgt>
 800994a:	2800      	cmp	r0, #0
 800994c:	d163      	bne.n	8009a16 <_dtoa_r+0x6be>
 800994e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009952:	49a8      	ldr	r1, [pc, #672]	@ (8009bf4 <_dtoa_r+0x89c>)
 8009954:	2000      	movs	r0, #0
 8009956:	f7f6 fcb7 	bl	80002c8 <__aeabi_dsub>
 800995a:	4602      	mov	r2, r0
 800995c:	460b      	mov	r3, r1
 800995e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009962:	f7f7 f8db 	bl	8000b1c <__aeabi_dcmplt>
 8009966:	2800      	cmp	r0, #0
 8009968:	f43f af14 	beq.w	8009794 <_dtoa_r+0x43c>
 800996c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800996e:	1e73      	subs	r3, r6, #1
 8009970:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009972:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009976:	2b30      	cmp	r3, #48	@ 0x30
 8009978:	d0f8      	beq.n	800996c <_dtoa_r+0x614>
 800997a:	4647      	mov	r7, r8
 800997c:	e03b      	b.n	80099f6 <_dtoa_r+0x69e>
 800997e:	4b9e      	ldr	r3, [pc, #632]	@ (8009bf8 <_dtoa_r+0x8a0>)
 8009980:	f7f6 fe5a 	bl	8000638 <__aeabi_dmul>
 8009984:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009988:	e7bc      	b.n	8009904 <_dtoa_r+0x5ac>
 800998a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800998e:	4656      	mov	r6, sl
 8009990:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009994:	4620      	mov	r0, r4
 8009996:	4629      	mov	r1, r5
 8009998:	f7f6 ff78 	bl	800088c <__aeabi_ddiv>
 800999c:	f7f7 f8fc 	bl	8000b98 <__aeabi_d2iz>
 80099a0:	4680      	mov	r8, r0
 80099a2:	f7f6 fddf 	bl	8000564 <__aeabi_i2d>
 80099a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099aa:	f7f6 fe45 	bl	8000638 <__aeabi_dmul>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4620      	mov	r0, r4
 80099b4:	4629      	mov	r1, r5
 80099b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80099ba:	f7f6 fc85 	bl	80002c8 <__aeabi_dsub>
 80099be:	f806 4b01 	strb.w	r4, [r6], #1
 80099c2:	9d03      	ldr	r5, [sp, #12]
 80099c4:	eba6 040a 	sub.w	r4, r6, sl
 80099c8:	42a5      	cmp	r5, r4
 80099ca:	4602      	mov	r2, r0
 80099cc:	460b      	mov	r3, r1
 80099ce:	d133      	bne.n	8009a38 <_dtoa_r+0x6e0>
 80099d0:	f7f6 fc7c 	bl	80002cc <__adddf3>
 80099d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099d8:	4604      	mov	r4, r0
 80099da:	460d      	mov	r5, r1
 80099dc:	f7f7 f8bc 	bl	8000b58 <__aeabi_dcmpgt>
 80099e0:	b9c0      	cbnz	r0, 8009a14 <_dtoa_r+0x6bc>
 80099e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099e6:	4620      	mov	r0, r4
 80099e8:	4629      	mov	r1, r5
 80099ea:	f7f7 f88d 	bl	8000b08 <__aeabi_dcmpeq>
 80099ee:	b110      	cbz	r0, 80099f6 <_dtoa_r+0x69e>
 80099f0:	f018 0f01 	tst.w	r8, #1
 80099f4:	d10e      	bne.n	8009a14 <_dtoa_r+0x6bc>
 80099f6:	9902      	ldr	r1, [sp, #8]
 80099f8:	4648      	mov	r0, r9
 80099fa:	f000 fbbd 	bl	800a178 <_Bfree>
 80099fe:	2300      	movs	r3, #0
 8009a00:	7033      	strb	r3, [r6, #0]
 8009a02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a04:	3701      	adds	r7, #1
 8009a06:	601f      	str	r7, [r3, #0]
 8009a08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f000 824b 	beq.w	8009ea6 <_dtoa_r+0xb4e>
 8009a10:	601e      	str	r6, [r3, #0]
 8009a12:	e248      	b.n	8009ea6 <_dtoa_r+0xb4e>
 8009a14:	46b8      	mov	r8, r7
 8009a16:	4633      	mov	r3, r6
 8009a18:	461e      	mov	r6, r3
 8009a1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a1e:	2a39      	cmp	r2, #57	@ 0x39
 8009a20:	d106      	bne.n	8009a30 <_dtoa_r+0x6d8>
 8009a22:	459a      	cmp	sl, r3
 8009a24:	d1f8      	bne.n	8009a18 <_dtoa_r+0x6c0>
 8009a26:	2230      	movs	r2, #48	@ 0x30
 8009a28:	f108 0801 	add.w	r8, r8, #1
 8009a2c:	f88a 2000 	strb.w	r2, [sl]
 8009a30:	781a      	ldrb	r2, [r3, #0]
 8009a32:	3201      	adds	r2, #1
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	e7a0      	b.n	800997a <_dtoa_r+0x622>
 8009a38:	4b6f      	ldr	r3, [pc, #444]	@ (8009bf8 <_dtoa_r+0x8a0>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f7f6 fdfc 	bl	8000638 <__aeabi_dmul>
 8009a40:	2200      	movs	r2, #0
 8009a42:	2300      	movs	r3, #0
 8009a44:	4604      	mov	r4, r0
 8009a46:	460d      	mov	r5, r1
 8009a48:	f7f7 f85e 	bl	8000b08 <__aeabi_dcmpeq>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d09f      	beq.n	8009990 <_dtoa_r+0x638>
 8009a50:	e7d1      	b.n	80099f6 <_dtoa_r+0x69e>
 8009a52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a54:	2a00      	cmp	r2, #0
 8009a56:	f000 80ea 	beq.w	8009c2e <_dtoa_r+0x8d6>
 8009a5a:	9a07      	ldr	r2, [sp, #28]
 8009a5c:	2a01      	cmp	r2, #1
 8009a5e:	f300 80cd 	bgt.w	8009bfc <_dtoa_r+0x8a4>
 8009a62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a64:	2a00      	cmp	r2, #0
 8009a66:	f000 80c1 	beq.w	8009bec <_dtoa_r+0x894>
 8009a6a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a6e:	9c08      	ldr	r4, [sp, #32]
 8009a70:	9e00      	ldr	r6, [sp, #0]
 8009a72:	9a00      	ldr	r2, [sp, #0]
 8009a74:	441a      	add	r2, r3
 8009a76:	9200      	str	r2, [sp, #0]
 8009a78:	9a06      	ldr	r2, [sp, #24]
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	441a      	add	r2, r3
 8009a7e:	4648      	mov	r0, r9
 8009a80:	9206      	str	r2, [sp, #24]
 8009a82:	f000 fc2d 	bl	800a2e0 <__i2b>
 8009a86:	4605      	mov	r5, r0
 8009a88:	b166      	cbz	r6, 8009aa4 <_dtoa_r+0x74c>
 8009a8a:	9b06      	ldr	r3, [sp, #24]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	dd09      	ble.n	8009aa4 <_dtoa_r+0x74c>
 8009a90:	42b3      	cmp	r3, r6
 8009a92:	9a00      	ldr	r2, [sp, #0]
 8009a94:	bfa8      	it	ge
 8009a96:	4633      	movge	r3, r6
 8009a98:	1ad2      	subs	r2, r2, r3
 8009a9a:	9200      	str	r2, [sp, #0]
 8009a9c:	9a06      	ldr	r2, [sp, #24]
 8009a9e:	1af6      	subs	r6, r6, r3
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	9306      	str	r3, [sp, #24]
 8009aa4:	9b08      	ldr	r3, [sp, #32]
 8009aa6:	b30b      	cbz	r3, 8009aec <_dtoa_r+0x794>
 8009aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f000 80c6 	beq.w	8009c3c <_dtoa_r+0x8e4>
 8009ab0:	2c00      	cmp	r4, #0
 8009ab2:	f000 80c0 	beq.w	8009c36 <_dtoa_r+0x8de>
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	4622      	mov	r2, r4
 8009aba:	4648      	mov	r0, r9
 8009abc:	f000 fcc8 	bl	800a450 <__pow5mult>
 8009ac0:	9a02      	ldr	r2, [sp, #8]
 8009ac2:	4601      	mov	r1, r0
 8009ac4:	4605      	mov	r5, r0
 8009ac6:	4648      	mov	r0, r9
 8009ac8:	f000 fc20 	bl	800a30c <__multiply>
 8009acc:	9902      	ldr	r1, [sp, #8]
 8009ace:	4680      	mov	r8, r0
 8009ad0:	4648      	mov	r0, r9
 8009ad2:	f000 fb51 	bl	800a178 <_Bfree>
 8009ad6:	9b08      	ldr	r3, [sp, #32]
 8009ad8:	1b1b      	subs	r3, r3, r4
 8009ada:	9308      	str	r3, [sp, #32]
 8009adc:	f000 80b1 	beq.w	8009c42 <_dtoa_r+0x8ea>
 8009ae0:	9a08      	ldr	r2, [sp, #32]
 8009ae2:	4641      	mov	r1, r8
 8009ae4:	4648      	mov	r0, r9
 8009ae6:	f000 fcb3 	bl	800a450 <__pow5mult>
 8009aea:	9002      	str	r0, [sp, #8]
 8009aec:	2101      	movs	r1, #1
 8009aee:	4648      	mov	r0, r9
 8009af0:	f000 fbf6 	bl	800a2e0 <__i2b>
 8009af4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009af6:	4604      	mov	r4, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 81d8 	beq.w	8009eae <_dtoa_r+0xb56>
 8009afe:	461a      	mov	r2, r3
 8009b00:	4601      	mov	r1, r0
 8009b02:	4648      	mov	r0, r9
 8009b04:	f000 fca4 	bl	800a450 <__pow5mult>
 8009b08:	9b07      	ldr	r3, [sp, #28]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	f300 809f 	bgt.w	8009c50 <_dtoa_r+0x8f8>
 8009b12:	9b04      	ldr	r3, [sp, #16]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f040 8097 	bne.w	8009c48 <_dtoa_r+0x8f0>
 8009b1a:	9b05      	ldr	r3, [sp, #20]
 8009b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f040 8093 	bne.w	8009c4c <_dtoa_r+0x8f4>
 8009b26:	9b05      	ldr	r3, [sp, #20]
 8009b28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b2c:	0d1b      	lsrs	r3, r3, #20
 8009b2e:	051b      	lsls	r3, r3, #20
 8009b30:	b133      	cbz	r3, 8009b40 <_dtoa_r+0x7e8>
 8009b32:	9b00      	ldr	r3, [sp, #0]
 8009b34:	3301      	adds	r3, #1
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	9b06      	ldr	r3, [sp, #24]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	9306      	str	r3, [sp, #24]
 8009b3e:	2301      	movs	r3, #1
 8009b40:	9308      	str	r3, [sp, #32]
 8009b42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 81b8 	beq.w	8009eba <_dtoa_r+0xb62>
 8009b4a:	6923      	ldr	r3, [r4, #16]
 8009b4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b50:	6918      	ldr	r0, [r3, #16]
 8009b52:	f000 fb79 	bl	800a248 <__hi0bits>
 8009b56:	f1c0 0020 	rsb	r0, r0, #32
 8009b5a:	9b06      	ldr	r3, [sp, #24]
 8009b5c:	4418      	add	r0, r3
 8009b5e:	f010 001f 	ands.w	r0, r0, #31
 8009b62:	f000 8082 	beq.w	8009c6a <_dtoa_r+0x912>
 8009b66:	f1c0 0320 	rsb	r3, r0, #32
 8009b6a:	2b04      	cmp	r3, #4
 8009b6c:	dd73      	ble.n	8009c56 <_dtoa_r+0x8fe>
 8009b6e:	9b00      	ldr	r3, [sp, #0]
 8009b70:	f1c0 001c 	rsb	r0, r0, #28
 8009b74:	4403      	add	r3, r0
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	9b06      	ldr	r3, [sp, #24]
 8009b7a:	4403      	add	r3, r0
 8009b7c:	4406      	add	r6, r0
 8009b7e:	9306      	str	r3, [sp, #24]
 8009b80:	9b00      	ldr	r3, [sp, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	dd05      	ble.n	8009b92 <_dtoa_r+0x83a>
 8009b86:	9902      	ldr	r1, [sp, #8]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	4648      	mov	r0, r9
 8009b8c:	f000 fcba 	bl	800a504 <__lshift>
 8009b90:	9002      	str	r0, [sp, #8]
 8009b92:	9b06      	ldr	r3, [sp, #24]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	dd05      	ble.n	8009ba4 <_dtoa_r+0x84c>
 8009b98:	4621      	mov	r1, r4
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	4648      	mov	r0, r9
 8009b9e:	f000 fcb1 	bl	800a504 <__lshift>
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d061      	beq.n	8009c6e <_dtoa_r+0x916>
 8009baa:	9802      	ldr	r0, [sp, #8]
 8009bac:	4621      	mov	r1, r4
 8009bae:	f000 fd15 	bl	800a5dc <__mcmp>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	da5b      	bge.n	8009c6e <_dtoa_r+0x916>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	9902      	ldr	r1, [sp, #8]
 8009bba:	220a      	movs	r2, #10
 8009bbc:	4648      	mov	r0, r9
 8009bbe:	f000 fafd 	bl	800a1bc <__multadd>
 8009bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc4:	9002      	str	r0, [sp, #8]
 8009bc6:	f107 38ff 	add.w	r8, r7, #4294967295
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	f000 8177 	beq.w	8009ebe <_dtoa_r+0xb66>
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	220a      	movs	r2, #10
 8009bd6:	4648      	mov	r0, r9
 8009bd8:	f000 faf0 	bl	800a1bc <__multadd>
 8009bdc:	f1bb 0f00 	cmp.w	fp, #0
 8009be0:	4605      	mov	r5, r0
 8009be2:	dc6f      	bgt.n	8009cc4 <_dtoa_r+0x96c>
 8009be4:	9b07      	ldr	r3, [sp, #28]
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	dc49      	bgt.n	8009c7e <_dtoa_r+0x926>
 8009bea:	e06b      	b.n	8009cc4 <_dtoa_r+0x96c>
 8009bec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009bee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009bf2:	e73c      	b.n	8009a6e <_dtoa_r+0x716>
 8009bf4:	3fe00000 	.word	0x3fe00000
 8009bf8:	40240000 	.word	0x40240000
 8009bfc:	9b03      	ldr	r3, [sp, #12]
 8009bfe:	1e5c      	subs	r4, r3, #1
 8009c00:	9b08      	ldr	r3, [sp, #32]
 8009c02:	42a3      	cmp	r3, r4
 8009c04:	db09      	blt.n	8009c1a <_dtoa_r+0x8c2>
 8009c06:	1b1c      	subs	r4, r3, r4
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f6bf af30 	bge.w	8009a70 <_dtoa_r+0x718>
 8009c10:	9b00      	ldr	r3, [sp, #0]
 8009c12:	9a03      	ldr	r2, [sp, #12]
 8009c14:	1a9e      	subs	r6, r3, r2
 8009c16:	2300      	movs	r3, #0
 8009c18:	e72b      	b.n	8009a72 <_dtoa_r+0x71a>
 8009c1a:	9b08      	ldr	r3, [sp, #32]
 8009c1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c1e:	9408      	str	r4, [sp, #32]
 8009c20:	1ae3      	subs	r3, r4, r3
 8009c22:	441a      	add	r2, r3
 8009c24:	9e00      	ldr	r6, [sp, #0]
 8009c26:	9b03      	ldr	r3, [sp, #12]
 8009c28:	920d      	str	r2, [sp, #52]	@ 0x34
 8009c2a:	2400      	movs	r4, #0
 8009c2c:	e721      	b.n	8009a72 <_dtoa_r+0x71a>
 8009c2e:	9c08      	ldr	r4, [sp, #32]
 8009c30:	9e00      	ldr	r6, [sp, #0]
 8009c32:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009c34:	e728      	b.n	8009a88 <_dtoa_r+0x730>
 8009c36:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009c3a:	e751      	b.n	8009ae0 <_dtoa_r+0x788>
 8009c3c:	9a08      	ldr	r2, [sp, #32]
 8009c3e:	9902      	ldr	r1, [sp, #8]
 8009c40:	e750      	b.n	8009ae4 <_dtoa_r+0x78c>
 8009c42:	f8cd 8008 	str.w	r8, [sp, #8]
 8009c46:	e751      	b.n	8009aec <_dtoa_r+0x794>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	e779      	b.n	8009b40 <_dtoa_r+0x7e8>
 8009c4c:	9b04      	ldr	r3, [sp, #16]
 8009c4e:	e777      	b.n	8009b40 <_dtoa_r+0x7e8>
 8009c50:	2300      	movs	r3, #0
 8009c52:	9308      	str	r3, [sp, #32]
 8009c54:	e779      	b.n	8009b4a <_dtoa_r+0x7f2>
 8009c56:	d093      	beq.n	8009b80 <_dtoa_r+0x828>
 8009c58:	9a00      	ldr	r2, [sp, #0]
 8009c5a:	331c      	adds	r3, #28
 8009c5c:	441a      	add	r2, r3
 8009c5e:	9200      	str	r2, [sp, #0]
 8009c60:	9a06      	ldr	r2, [sp, #24]
 8009c62:	441a      	add	r2, r3
 8009c64:	441e      	add	r6, r3
 8009c66:	9206      	str	r2, [sp, #24]
 8009c68:	e78a      	b.n	8009b80 <_dtoa_r+0x828>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	e7f4      	b.n	8009c58 <_dtoa_r+0x900>
 8009c6e:	9b03      	ldr	r3, [sp, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	46b8      	mov	r8, r7
 8009c74:	dc20      	bgt.n	8009cb8 <_dtoa_r+0x960>
 8009c76:	469b      	mov	fp, r3
 8009c78:	9b07      	ldr	r3, [sp, #28]
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	dd1e      	ble.n	8009cbc <_dtoa_r+0x964>
 8009c7e:	f1bb 0f00 	cmp.w	fp, #0
 8009c82:	f47f adb1 	bne.w	80097e8 <_dtoa_r+0x490>
 8009c86:	4621      	mov	r1, r4
 8009c88:	465b      	mov	r3, fp
 8009c8a:	2205      	movs	r2, #5
 8009c8c:	4648      	mov	r0, r9
 8009c8e:	f000 fa95 	bl	800a1bc <__multadd>
 8009c92:	4601      	mov	r1, r0
 8009c94:	4604      	mov	r4, r0
 8009c96:	9802      	ldr	r0, [sp, #8]
 8009c98:	f000 fca0 	bl	800a5dc <__mcmp>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	f77f ada3 	ble.w	80097e8 <_dtoa_r+0x490>
 8009ca2:	4656      	mov	r6, sl
 8009ca4:	2331      	movs	r3, #49	@ 0x31
 8009ca6:	f806 3b01 	strb.w	r3, [r6], #1
 8009caa:	f108 0801 	add.w	r8, r8, #1
 8009cae:	e59f      	b.n	80097f0 <_dtoa_r+0x498>
 8009cb0:	9c03      	ldr	r4, [sp, #12]
 8009cb2:	46b8      	mov	r8, r7
 8009cb4:	4625      	mov	r5, r4
 8009cb6:	e7f4      	b.n	8009ca2 <_dtoa_r+0x94a>
 8009cb8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f000 8101 	beq.w	8009ec6 <_dtoa_r+0xb6e>
 8009cc4:	2e00      	cmp	r6, #0
 8009cc6:	dd05      	ble.n	8009cd4 <_dtoa_r+0x97c>
 8009cc8:	4629      	mov	r1, r5
 8009cca:	4632      	mov	r2, r6
 8009ccc:	4648      	mov	r0, r9
 8009cce:	f000 fc19 	bl	800a504 <__lshift>
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	9b08      	ldr	r3, [sp, #32]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d05c      	beq.n	8009d94 <_dtoa_r+0xa3c>
 8009cda:	6869      	ldr	r1, [r5, #4]
 8009cdc:	4648      	mov	r0, r9
 8009cde:	f000 fa0b 	bl	800a0f8 <_Balloc>
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	b928      	cbnz	r0, 8009cf2 <_dtoa_r+0x99a>
 8009ce6:	4b82      	ldr	r3, [pc, #520]	@ (8009ef0 <_dtoa_r+0xb98>)
 8009ce8:	4602      	mov	r2, r0
 8009cea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009cee:	f7ff bb4a 	b.w	8009386 <_dtoa_r+0x2e>
 8009cf2:	692a      	ldr	r2, [r5, #16]
 8009cf4:	3202      	adds	r2, #2
 8009cf6:	0092      	lsls	r2, r2, #2
 8009cf8:	f105 010c 	add.w	r1, r5, #12
 8009cfc:	300c      	adds	r0, #12
 8009cfe:	f000 ffa3 	bl	800ac48 <memcpy>
 8009d02:	2201      	movs	r2, #1
 8009d04:	4631      	mov	r1, r6
 8009d06:	4648      	mov	r0, r9
 8009d08:	f000 fbfc 	bl	800a504 <__lshift>
 8009d0c:	f10a 0301 	add.w	r3, sl, #1
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	eb0a 030b 	add.w	r3, sl, fp
 8009d16:	9308      	str	r3, [sp, #32]
 8009d18:	9b04      	ldr	r3, [sp, #16]
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	462f      	mov	r7, r5
 8009d20:	9306      	str	r3, [sp, #24]
 8009d22:	4605      	mov	r5, r0
 8009d24:	9b00      	ldr	r3, [sp, #0]
 8009d26:	9802      	ldr	r0, [sp, #8]
 8009d28:	4621      	mov	r1, r4
 8009d2a:	f103 3bff 	add.w	fp, r3, #4294967295
 8009d2e:	f7ff fa88 	bl	8009242 <quorem>
 8009d32:	4603      	mov	r3, r0
 8009d34:	3330      	adds	r3, #48	@ 0x30
 8009d36:	9003      	str	r0, [sp, #12]
 8009d38:	4639      	mov	r1, r7
 8009d3a:	9802      	ldr	r0, [sp, #8]
 8009d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d3e:	f000 fc4d 	bl	800a5dc <__mcmp>
 8009d42:	462a      	mov	r2, r5
 8009d44:	9004      	str	r0, [sp, #16]
 8009d46:	4621      	mov	r1, r4
 8009d48:	4648      	mov	r0, r9
 8009d4a:	f000 fc63 	bl	800a614 <__mdiff>
 8009d4e:	68c2      	ldr	r2, [r0, #12]
 8009d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d52:	4606      	mov	r6, r0
 8009d54:	bb02      	cbnz	r2, 8009d98 <_dtoa_r+0xa40>
 8009d56:	4601      	mov	r1, r0
 8009d58:	9802      	ldr	r0, [sp, #8]
 8009d5a:	f000 fc3f 	bl	800a5dc <__mcmp>
 8009d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d60:	4602      	mov	r2, r0
 8009d62:	4631      	mov	r1, r6
 8009d64:	4648      	mov	r0, r9
 8009d66:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d68:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d6a:	f000 fa05 	bl	800a178 <_Bfree>
 8009d6e:	9b07      	ldr	r3, [sp, #28]
 8009d70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d72:	9e00      	ldr	r6, [sp, #0]
 8009d74:	ea42 0103 	orr.w	r1, r2, r3
 8009d78:	9b06      	ldr	r3, [sp, #24]
 8009d7a:	4319      	orrs	r1, r3
 8009d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d7e:	d10d      	bne.n	8009d9c <_dtoa_r+0xa44>
 8009d80:	2b39      	cmp	r3, #57	@ 0x39
 8009d82:	d027      	beq.n	8009dd4 <_dtoa_r+0xa7c>
 8009d84:	9a04      	ldr	r2, [sp, #16]
 8009d86:	2a00      	cmp	r2, #0
 8009d88:	dd01      	ble.n	8009d8e <_dtoa_r+0xa36>
 8009d8a:	9b03      	ldr	r3, [sp, #12]
 8009d8c:	3331      	adds	r3, #49	@ 0x31
 8009d8e:	f88b 3000 	strb.w	r3, [fp]
 8009d92:	e52e      	b.n	80097f2 <_dtoa_r+0x49a>
 8009d94:	4628      	mov	r0, r5
 8009d96:	e7b9      	b.n	8009d0c <_dtoa_r+0x9b4>
 8009d98:	2201      	movs	r2, #1
 8009d9a:	e7e2      	b.n	8009d62 <_dtoa_r+0xa0a>
 8009d9c:	9904      	ldr	r1, [sp, #16]
 8009d9e:	2900      	cmp	r1, #0
 8009da0:	db04      	blt.n	8009dac <_dtoa_r+0xa54>
 8009da2:	9807      	ldr	r0, [sp, #28]
 8009da4:	4301      	orrs	r1, r0
 8009da6:	9806      	ldr	r0, [sp, #24]
 8009da8:	4301      	orrs	r1, r0
 8009daa:	d120      	bne.n	8009dee <_dtoa_r+0xa96>
 8009dac:	2a00      	cmp	r2, #0
 8009dae:	ddee      	ble.n	8009d8e <_dtoa_r+0xa36>
 8009db0:	9902      	ldr	r1, [sp, #8]
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	2201      	movs	r2, #1
 8009db6:	4648      	mov	r0, r9
 8009db8:	f000 fba4 	bl	800a504 <__lshift>
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	9002      	str	r0, [sp, #8]
 8009dc0:	f000 fc0c 	bl	800a5dc <__mcmp>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	9b00      	ldr	r3, [sp, #0]
 8009dc8:	dc02      	bgt.n	8009dd0 <_dtoa_r+0xa78>
 8009dca:	d1e0      	bne.n	8009d8e <_dtoa_r+0xa36>
 8009dcc:	07da      	lsls	r2, r3, #31
 8009dce:	d5de      	bpl.n	8009d8e <_dtoa_r+0xa36>
 8009dd0:	2b39      	cmp	r3, #57	@ 0x39
 8009dd2:	d1da      	bne.n	8009d8a <_dtoa_r+0xa32>
 8009dd4:	2339      	movs	r3, #57	@ 0x39
 8009dd6:	f88b 3000 	strb.w	r3, [fp]
 8009dda:	4633      	mov	r3, r6
 8009ddc:	461e      	mov	r6, r3
 8009dde:	3b01      	subs	r3, #1
 8009de0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009de4:	2a39      	cmp	r2, #57	@ 0x39
 8009de6:	d04e      	beq.n	8009e86 <_dtoa_r+0xb2e>
 8009de8:	3201      	adds	r2, #1
 8009dea:	701a      	strb	r2, [r3, #0]
 8009dec:	e501      	b.n	80097f2 <_dtoa_r+0x49a>
 8009dee:	2a00      	cmp	r2, #0
 8009df0:	dd03      	ble.n	8009dfa <_dtoa_r+0xaa2>
 8009df2:	2b39      	cmp	r3, #57	@ 0x39
 8009df4:	d0ee      	beq.n	8009dd4 <_dtoa_r+0xa7c>
 8009df6:	3301      	adds	r3, #1
 8009df8:	e7c9      	b.n	8009d8e <_dtoa_r+0xa36>
 8009dfa:	9a00      	ldr	r2, [sp, #0]
 8009dfc:	9908      	ldr	r1, [sp, #32]
 8009dfe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009e02:	428a      	cmp	r2, r1
 8009e04:	d028      	beq.n	8009e58 <_dtoa_r+0xb00>
 8009e06:	9902      	ldr	r1, [sp, #8]
 8009e08:	2300      	movs	r3, #0
 8009e0a:	220a      	movs	r2, #10
 8009e0c:	4648      	mov	r0, r9
 8009e0e:	f000 f9d5 	bl	800a1bc <__multadd>
 8009e12:	42af      	cmp	r7, r5
 8009e14:	9002      	str	r0, [sp, #8]
 8009e16:	f04f 0300 	mov.w	r3, #0
 8009e1a:	f04f 020a 	mov.w	r2, #10
 8009e1e:	4639      	mov	r1, r7
 8009e20:	4648      	mov	r0, r9
 8009e22:	d107      	bne.n	8009e34 <_dtoa_r+0xadc>
 8009e24:	f000 f9ca 	bl	800a1bc <__multadd>
 8009e28:	4607      	mov	r7, r0
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	9b00      	ldr	r3, [sp, #0]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	e777      	b.n	8009d24 <_dtoa_r+0x9cc>
 8009e34:	f000 f9c2 	bl	800a1bc <__multadd>
 8009e38:	4629      	mov	r1, r5
 8009e3a:	4607      	mov	r7, r0
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	220a      	movs	r2, #10
 8009e40:	4648      	mov	r0, r9
 8009e42:	f000 f9bb 	bl	800a1bc <__multadd>
 8009e46:	4605      	mov	r5, r0
 8009e48:	e7f0      	b.n	8009e2c <_dtoa_r+0xad4>
 8009e4a:	f1bb 0f00 	cmp.w	fp, #0
 8009e4e:	bfcc      	ite	gt
 8009e50:	465e      	movgt	r6, fp
 8009e52:	2601      	movle	r6, #1
 8009e54:	4456      	add	r6, sl
 8009e56:	2700      	movs	r7, #0
 8009e58:	9902      	ldr	r1, [sp, #8]
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	4648      	mov	r0, r9
 8009e60:	f000 fb50 	bl	800a504 <__lshift>
 8009e64:	4621      	mov	r1, r4
 8009e66:	9002      	str	r0, [sp, #8]
 8009e68:	f000 fbb8 	bl	800a5dc <__mcmp>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	dcb4      	bgt.n	8009dda <_dtoa_r+0xa82>
 8009e70:	d102      	bne.n	8009e78 <_dtoa_r+0xb20>
 8009e72:	9b00      	ldr	r3, [sp, #0]
 8009e74:	07db      	lsls	r3, r3, #31
 8009e76:	d4b0      	bmi.n	8009dda <_dtoa_r+0xa82>
 8009e78:	4633      	mov	r3, r6
 8009e7a:	461e      	mov	r6, r3
 8009e7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e80:	2a30      	cmp	r2, #48	@ 0x30
 8009e82:	d0fa      	beq.n	8009e7a <_dtoa_r+0xb22>
 8009e84:	e4b5      	b.n	80097f2 <_dtoa_r+0x49a>
 8009e86:	459a      	cmp	sl, r3
 8009e88:	d1a8      	bne.n	8009ddc <_dtoa_r+0xa84>
 8009e8a:	2331      	movs	r3, #49	@ 0x31
 8009e8c:	f108 0801 	add.w	r8, r8, #1
 8009e90:	f88a 3000 	strb.w	r3, [sl]
 8009e94:	e4ad      	b.n	80097f2 <_dtoa_r+0x49a>
 8009e96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e98:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009ef4 <_dtoa_r+0xb9c>
 8009e9c:	b11b      	cbz	r3, 8009ea6 <_dtoa_r+0xb4e>
 8009e9e:	f10a 0308 	add.w	r3, sl, #8
 8009ea2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	4650      	mov	r0, sl
 8009ea8:	b017      	add	sp, #92	@ 0x5c
 8009eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eae:	9b07      	ldr	r3, [sp, #28]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	f77f ae2e 	ble.w	8009b12 <_dtoa_r+0x7ba>
 8009eb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009eb8:	9308      	str	r3, [sp, #32]
 8009eba:	2001      	movs	r0, #1
 8009ebc:	e64d      	b.n	8009b5a <_dtoa_r+0x802>
 8009ebe:	f1bb 0f00 	cmp.w	fp, #0
 8009ec2:	f77f aed9 	ble.w	8009c78 <_dtoa_r+0x920>
 8009ec6:	4656      	mov	r6, sl
 8009ec8:	9802      	ldr	r0, [sp, #8]
 8009eca:	4621      	mov	r1, r4
 8009ecc:	f7ff f9b9 	bl	8009242 <quorem>
 8009ed0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009ed4:	f806 3b01 	strb.w	r3, [r6], #1
 8009ed8:	eba6 020a 	sub.w	r2, r6, sl
 8009edc:	4593      	cmp	fp, r2
 8009ede:	ddb4      	ble.n	8009e4a <_dtoa_r+0xaf2>
 8009ee0:	9902      	ldr	r1, [sp, #8]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	220a      	movs	r2, #10
 8009ee6:	4648      	mov	r0, r9
 8009ee8:	f000 f968 	bl	800a1bc <__multadd>
 8009eec:	9002      	str	r0, [sp, #8]
 8009eee:	e7eb      	b.n	8009ec8 <_dtoa_r+0xb70>
 8009ef0:	0800b488 	.word	0x0800b488
 8009ef4:	0800b40c 	.word	0x0800b40c

08009ef8 <_free_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	4605      	mov	r5, r0
 8009efc:	2900      	cmp	r1, #0
 8009efe:	d041      	beq.n	8009f84 <_free_r+0x8c>
 8009f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f04:	1f0c      	subs	r4, r1, #4
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	bfb8      	it	lt
 8009f0a:	18e4      	addlt	r4, r4, r3
 8009f0c:	f000 f8e8 	bl	800a0e0 <__malloc_lock>
 8009f10:	4a1d      	ldr	r2, [pc, #116]	@ (8009f88 <_free_r+0x90>)
 8009f12:	6813      	ldr	r3, [r2, #0]
 8009f14:	b933      	cbnz	r3, 8009f24 <_free_r+0x2c>
 8009f16:	6063      	str	r3, [r4, #4]
 8009f18:	6014      	str	r4, [r2, #0]
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f20:	f000 b8e4 	b.w	800a0ec <__malloc_unlock>
 8009f24:	42a3      	cmp	r3, r4
 8009f26:	d908      	bls.n	8009f3a <_free_r+0x42>
 8009f28:	6820      	ldr	r0, [r4, #0]
 8009f2a:	1821      	adds	r1, r4, r0
 8009f2c:	428b      	cmp	r3, r1
 8009f2e:	bf01      	itttt	eq
 8009f30:	6819      	ldreq	r1, [r3, #0]
 8009f32:	685b      	ldreq	r3, [r3, #4]
 8009f34:	1809      	addeq	r1, r1, r0
 8009f36:	6021      	streq	r1, [r4, #0]
 8009f38:	e7ed      	b.n	8009f16 <_free_r+0x1e>
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	b10b      	cbz	r3, 8009f44 <_free_r+0x4c>
 8009f40:	42a3      	cmp	r3, r4
 8009f42:	d9fa      	bls.n	8009f3a <_free_r+0x42>
 8009f44:	6811      	ldr	r1, [r2, #0]
 8009f46:	1850      	adds	r0, r2, r1
 8009f48:	42a0      	cmp	r0, r4
 8009f4a:	d10b      	bne.n	8009f64 <_free_r+0x6c>
 8009f4c:	6820      	ldr	r0, [r4, #0]
 8009f4e:	4401      	add	r1, r0
 8009f50:	1850      	adds	r0, r2, r1
 8009f52:	4283      	cmp	r3, r0
 8009f54:	6011      	str	r1, [r2, #0]
 8009f56:	d1e0      	bne.n	8009f1a <_free_r+0x22>
 8009f58:	6818      	ldr	r0, [r3, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	6053      	str	r3, [r2, #4]
 8009f5e:	4408      	add	r0, r1
 8009f60:	6010      	str	r0, [r2, #0]
 8009f62:	e7da      	b.n	8009f1a <_free_r+0x22>
 8009f64:	d902      	bls.n	8009f6c <_free_r+0x74>
 8009f66:	230c      	movs	r3, #12
 8009f68:	602b      	str	r3, [r5, #0]
 8009f6a:	e7d6      	b.n	8009f1a <_free_r+0x22>
 8009f6c:	6820      	ldr	r0, [r4, #0]
 8009f6e:	1821      	adds	r1, r4, r0
 8009f70:	428b      	cmp	r3, r1
 8009f72:	bf04      	itt	eq
 8009f74:	6819      	ldreq	r1, [r3, #0]
 8009f76:	685b      	ldreq	r3, [r3, #4]
 8009f78:	6063      	str	r3, [r4, #4]
 8009f7a:	bf04      	itt	eq
 8009f7c:	1809      	addeq	r1, r1, r0
 8009f7e:	6021      	streq	r1, [r4, #0]
 8009f80:	6054      	str	r4, [r2, #4]
 8009f82:	e7ca      	b.n	8009f1a <_free_r+0x22>
 8009f84:	bd38      	pop	{r3, r4, r5, pc}
 8009f86:	bf00      	nop
 8009f88:	20000880 	.word	0x20000880

08009f8c <malloc>:
 8009f8c:	4b02      	ldr	r3, [pc, #8]	@ (8009f98 <malloc+0xc>)
 8009f8e:	4601      	mov	r1, r0
 8009f90:	6818      	ldr	r0, [r3, #0]
 8009f92:	f000 b825 	b.w	8009fe0 <_malloc_r>
 8009f96:	bf00      	nop
 8009f98:	20000024 	.word	0x20000024

08009f9c <sbrk_aligned>:
 8009f9c:	b570      	push	{r4, r5, r6, lr}
 8009f9e:	4e0f      	ldr	r6, [pc, #60]	@ (8009fdc <sbrk_aligned+0x40>)
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	6831      	ldr	r1, [r6, #0]
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	b911      	cbnz	r1, 8009fae <sbrk_aligned+0x12>
 8009fa8:	f000 fe3e 	bl	800ac28 <_sbrk_r>
 8009fac:	6030      	str	r0, [r6, #0]
 8009fae:	4621      	mov	r1, r4
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	f000 fe39 	bl	800ac28 <_sbrk_r>
 8009fb6:	1c43      	adds	r3, r0, #1
 8009fb8:	d103      	bne.n	8009fc2 <sbrk_aligned+0x26>
 8009fba:	f04f 34ff 	mov.w	r4, #4294967295
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	bd70      	pop	{r4, r5, r6, pc}
 8009fc2:	1cc4      	adds	r4, r0, #3
 8009fc4:	f024 0403 	bic.w	r4, r4, #3
 8009fc8:	42a0      	cmp	r0, r4
 8009fca:	d0f8      	beq.n	8009fbe <sbrk_aligned+0x22>
 8009fcc:	1a21      	subs	r1, r4, r0
 8009fce:	4628      	mov	r0, r5
 8009fd0:	f000 fe2a 	bl	800ac28 <_sbrk_r>
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	d1f2      	bne.n	8009fbe <sbrk_aligned+0x22>
 8009fd8:	e7ef      	b.n	8009fba <sbrk_aligned+0x1e>
 8009fda:	bf00      	nop
 8009fdc:	2000087c 	.word	0x2000087c

08009fe0 <_malloc_r>:
 8009fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe4:	1ccd      	adds	r5, r1, #3
 8009fe6:	f025 0503 	bic.w	r5, r5, #3
 8009fea:	3508      	adds	r5, #8
 8009fec:	2d0c      	cmp	r5, #12
 8009fee:	bf38      	it	cc
 8009ff0:	250c      	movcc	r5, #12
 8009ff2:	2d00      	cmp	r5, #0
 8009ff4:	4606      	mov	r6, r0
 8009ff6:	db01      	blt.n	8009ffc <_malloc_r+0x1c>
 8009ff8:	42a9      	cmp	r1, r5
 8009ffa:	d904      	bls.n	800a006 <_malloc_r+0x26>
 8009ffc:	230c      	movs	r3, #12
 8009ffe:	6033      	str	r3, [r6, #0]
 800a000:	2000      	movs	r0, #0
 800a002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a006:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0dc <_malloc_r+0xfc>
 800a00a:	f000 f869 	bl	800a0e0 <__malloc_lock>
 800a00e:	f8d8 3000 	ldr.w	r3, [r8]
 800a012:	461c      	mov	r4, r3
 800a014:	bb44      	cbnz	r4, 800a068 <_malloc_r+0x88>
 800a016:	4629      	mov	r1, r5
 800a018:	4630      	mov	r0, r6
 800a01a:	f7ff ffbf 	bl	8009f9c <sbrk_aligned>
 800a01e:	1c43      	adds	r3, r0, #1
 800a020:	4604      	mov	r4, r0
 800a022:	d158      	bne.n	800a0d6 <_malloc_r+0xf6>
 800a024:	f8d8 4000 	ldr.w	r4, [r8]
 800a028:	4627      	mov	r7, r4
 800a02a:	2f00      	cmp	r7, #0
 800a02c:	d143      	bne.n	800a0b6 <_malloc_r+0xd6>
 800a02e:	2c00      	cmp	r4, #0
 800a030:	d04b      	beq.n	800a0ca <_malloc_r+0xea>
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	4639      	mov	r1, r7
 800a036:	4630      	mov	r0, r6
 800a038:	eb04 0903 	add.w	r9, r4, r3
 800a03c:	f000 fdf4 	bl	800ac28 <_sbrk_r>
 800a040:	4581      	cmp	r9, r0
 800a042:	d142      	bne.n	800a0ca <_malloc_r+0xea>
 800a044:	6821      	ldr	r1, [r4, #0]
 800a046:	1a6d      	subs	r5, r5, r1
 800a048:	4629      	mov	r1, r5
 800a04a:	4630      	mov	r0, r6
 800a04c:	f7ff ffa6 	bl	8009f9c <sbrk_aligned>
 800a050:	3001      	adds	r0, #1
 800a052:	d03a      	beq.n	800a0ca <_malloc_r+0xea>
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	442b      	add	r3, r5
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	f8d8 3000 	ldr.w	r3, [r8]
 800a05e:	685a      	ldr	r2, [r3, #4]
 800a060:	bb62      	cbnz	r2, 800a0bc <_malloc_r+0xdc>
 800a062:	f8c8 7000 	str.w	r7, [r8]
 800a066:	e00f      	b.n	800a088 <_malloc_r+0xa8>
 800a068:	6822      	ldr	r2, [r4, #0]
 800a06a:	1b52      	subs	r2, r2, r5
 800a06c:	d420      	bmi.n	800a0b0 <_malloc_r+0xd0>
 800a06e:	2a0b      	cmp	r2, #11
 800a070:	d917      	bls.n	800a0a2 <_malloc_r+0xc2>
 800a072:	1961      	adds	r1, r4, r5
 800a074:	42a3      	cmp	r3, r4
 800a076:	6025      	str	r5, [r4, #0]
 800a078:	bf18      	it	ne
 800a07a:	6059      	strne	r1, [r3, #4]
 800a07c:	6863      	ldr	r3, [r4, #4]
 800a07e:	bf08      	it	eq
 800a080:	f8c8 1000 	streq.w	r1, [r8]
 800a084:	5162      	str	r2, [r4, r5]
 800a086:	604b      	str	r3, [r1, #4]
 800a088:	4630      	mov	r0, r6
 800a08a:	f000 f82f 	bl	800a0ec <__malloc_unlock>
 800a08e:	f104 000b 	add.w	r0, r4, #11
 800a092:	1d23      	adds	r3, r4, #4
 800a094:	f020 0007 	bic.w	r0, r0, #7
 800a098:	1ac2      	subs	r2, r0, r3
 800a09a:	bf1c      	itt	ne
 800a09c:	1a1b      	subne	r3, r3, r0
 800a09e:	50a3      	strne	r3, [r4, r2]
 800a0a0:	e7af      	b.n	800a002 <_malloc_r+0x22>
 800a0a2:	6862      	ldr	r2, [r4, #4]
 800a0a4:	42a3      	cmp	r3, r4
 800a0a6:	bf0c      	ite	eq
 800a0a8:	f8c8 2000 	streq.w	r2, [r8]
 800a0ac:	605a      	strne	r2, [r3, #4]
 800a0ae:	e7eb      	b.n	800a088 <_malloc_r+0xa8>
 800a0b0:	4623      	mov	r3, r4
 800a0b2:	6864      	ldr	r4, [r4, #4]
 800a0b4:	e7ae      	b.n	800a014 <_malloc_r+0x34>
 800a0b6:	463c      	mov	r4, r7
 800a0b8:	687f      	ldr	r7, [r7, #4]
 800a0ba:	e7b6      	b.n	800a02a <_malloc_r+0x4a>
 800a0bc:	461a      	mov	r2, r3
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	42a3      	cmp	r3, r4
 800a0c2:	d1fb      	bne.n	800a0bc <_malloc_r+0xdc>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	6053      	str	r3, [r2, #4]
 800a0c8:	e7de      	b.n	800a088 <_malloc_r+0xa8>
 800a0ca:	230c      	movs	r3, #12
 800a0cc:	6033      	str	r3, [r6, #0]
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f000 f80c 	bl	800a0ec <__malloc_unlock>
 800a0d4:	e794      	b.n	800a000 <_malloc_r+0x20>
 800a0d6:	6005      	str	r5, [r0, #0]
 800a0d8:	e7d6      	b.n	800a088 <_malloc_r+0xa8>
 800a0da:	bf00      	nop
 800a0dc:	20000880 	.word	0x20000880

0800a0e0 <__malloc_lock>:
 800a0e0:	4801      	ldr	r0, [pc, #4]	@ (800a0e8 <__malloc_lock+0x8>)
 800a0e2:	f7ff b8ac 	b.w	800923e <__retarget_lock_acquire_recursive>
 800a0e6:	bf00      	nop
 800a0e8:	20000878 	.word	0x20000878

0800a0ec <__malloc_unlock>:
 800a0ec:	4801      	ldr	r0, [pc, #4]	@ (800a0f4 <__malloc_unlock+0x8>)
 800a0ee:	f7ff b8a7 	b.w	8009240 <__retarget_lock_release_recursive>
 800a0f2:	bf00      	nop
 800a0f4:	20000878 	.word	0x20000878

0800a0f8 <_Balloc>:
 800a0f8:	b570      	push	{r4, r5, r6, lr}
 800a0fa:	69c6      	ldr	r6, [r0, #28]
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	460d      	mov	r5, r1
 800a100:	b976      	cbnz	r6, 800a120 <_Balloc+0x28>
 800a102:	2010      	movs	r0, #16
 800a104:	f7ff ff42 	bl	8009f8c <malloc>
 800a108:	4602      	mov	r2, r0
 800a10a:	61e0      	str	r0, [r4, #28]
 800a10c:	b920      	cbnz	r0, 800a118 <_Balloc+0x20>
 800a10e:	4b18      	ldr	r3, [pc, #96]	@ (800a170 <_Balloc+0x78>)
 800a110:	4818      	ldr	r0, [pc, #96]	@ (800a174 <_Balloc+0x7c>)
 800a112:	216b      	movs	r1, #107	@ 0x6b
 800a114:	f000 fda6 	bl	800ac64 <__assert_func>
 800a118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a11c:	6006      	str	r6, [r0, #0]
 800a11e:	60c6      	str	r6, [r0, #12]
 800a120:	69e6      	ldr	r6, [r4, #28]
 800a122:	68f3      	ldr	r3, [r6, #12]
 800a124:	b183      	cbz	r3, 800a148 <_Balloc+0x50>
 800a126:	69e3      	ldr	r3, [r4, #28]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a12e:	b9b8      	cbnz	r0, 800a160 <_Balloc+0x68>
 800a130:	2101      	movs	r1, #1
 800a132:	fa01 f605 	lsl.w	r6, r1, r5
 800a136:	1d72      	adds	r2, r6, #5
 800a138:	0092      	lsls	r2, r2, #2
 800a13a:	4620      	mov	r0, r4
 800a13c:	f000 fdb0 	bl	800aca0 <_calloc_r>
 800a140:	b160      	cbz	r0, 800a15c <_Balloc+0x64>
 800a142:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a146:	e00e      	b.n	800a166 <_Balloc+0x6e>
 800a148:	2221      	movs	r2, #33	@ 0x21
 800a14a:	2104      	movs	r1, #4
 800a14c:	4620      	mov	r0, r4
 800a14e:	f000 fda7 	bl	800aca0 <_calloc_r>
 800a152:	69e3      	ldr	r3, [r4, #28]
 800a154:	60f0      	str	r0, [r6, #12]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1e4      	bne.n	800a126 <_Balloc+0x2e>
 800a15c:	2000      	movs	r0, #0
 800a15e:	bd70      	pop	{r4, r5, r6, pc}
 800a160:	6802      	ldr	r2, [r0, #0]
 800a162:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a166:	2300      	movs	r3, #0
 800a168:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a16c:	e7f7      	b.n	800a15e <_Balloc+0x66>
 800a16e:	bf00      	nop
 800a170:	0800b419 	.word	0x0800b419
 800a174:	0800b499 	.word	0x0800b499

0800a178 <_Bfree>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	69c6      	ldr	r6, [r0, #28]
 800a17c:	4605      	mov	r5, r0
 800a17e:	460c      	mov	r4, r1
 800a180:	b976      	cbnz	r6, 800a1a0 <_Bfree+0x28>
 800a182:	2010      	movs	r0, #16
 800a184:	f7ff ff02 	bl	8009f8c <malloc>
 800a188:	4602      	mov	r2, r0
 800a18a:	61e8      	str	r0, [r5, #28]
 800a18c:	b920      	cbnz	r0, 800a198 <_Bfree+0x20>
 800a18e:	4b09      	ldr	r3, [pc, #36]	@ (800a1b4 <_Bfree+0x3c>)
 800a190:	4809      	ldr	r0, [pc, #36]	@ (800a1b8 <_Bfree+0x40>)
 800a192:	218f      	movs	r1, #143	@ 0x8f
 800a194:	f000 fd66 	bl	800ac64 <__assert_func>
 800a198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a19c:	6006      	str	r6, [r0, #0]
 800a19e:	60c6      	str	r6, [r0, #12]
 800a1a0:	b13c      	cbz	r4, 800a1b2 <_Bfree+0x3a>
 800a1a2:	69eb      	ldr	r3, [r5, #28]
 800a1a4:	6862      	ldr	r2, [r4, #4]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1ac:	6021      	str	r1, [r4, #0]
 800a1ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1b2:	bd70      	pop	{r4, r5, r6, pc}
 800a1b4:	0800b419 	.word	0x0800b419
 800a1b8:	0800b499 	.word	0x0800b499

0800a1bc <__multadd>:
 800a1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c0:	690d      	ldr	r5, [r1, #16]
 800a1c2:	4607      	mov	r7, r0
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	461e      	mov	r6, r3
 800a1c8:	f101 0c14 	add.w	ip, r1, #20
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	f8dc 3000 	ldr.w	r3, [ip]
 800a1d2:	b299      	uxth	r1, r3
 800a1d4:	fb02 6101 	mla	r1, r2, r1, r6
 800a1d8:	0c1e      	lsrs	r6, r3, #16
 800a1da:	0c0b      	lsrs	r3, r1, #16
 800a1dc:	fb02 3306 	mla	r3, r2, r6, r3
 800a1e0:	b289      	uxth	r1, r1
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1e8:	4285      	cmp	r5, r0
 800a1ea:	f84c 1b04 	str.w	r1, [ip], #4
 800a1ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1f2:	dcec      	bgt.n	800a1ce <__multadd+0x12>
 800a1f4:	b30e      	cbz	r6, 800a23a <__multadd+0x7e>
 800a1f6:	68a3      	ldr	r3, [r4, #8]
 800a1f8:	42ab      	cmp	r3, r5
 800a1fa:	dc19      	bgt.n	800a230 <__multadd+0x74>
 800a1fc:	6861      	ldr	r1, [r4, #4]
 800a1fe:	4638      	mov	r0, r7
 800a200:	3101      	adds	r1, #1
 800a202:	f7ff ff79 	bl	800a0f8 <_Balloc>
 800a206:	4680      	mov	r8, r0
 800a208:	b928      	cbnz	r0, 800a216 <__multadd+0x5a>
 800a20a:	4602      	mov	r2, r0
 800a20c:	4b0c      	ldr	r3, [pc, #48]	@ (800a240 <__multadd+0x84>)
 800a20e:	480d      	ldr	r0, [pc, #52]	@ (800a244 <__multadd+0x88>)
 800a210:	21ba      	movs	r1, #186	@ 0xba
 800a212:	f000 fd27 	bl	800ac64 <__assert_func>
 800a216:	6922      	ldr	r2, [r4, #16]
 800a218:	3202      	adds	r2, #2
 800a21a:	f104 010c 	add.w	r1, r4, #12
 800a21e:	0092      	lsls	r2, r2, #2
 800a220:	300c      	adds	r0, #12
 800a222:	f000 fd11 	bl	800ac48 <memcpy>
 800a226:	4621      	mov	r1, r4
 800a228:	4638      	mov	r0, r7
 800a22a:	f7ff ffa5 	bl	800a178 <_Bfree>
 800a22e:	4644      	mov	r4, r8
 800a230:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a234:	3501      	adds	r5, #1
 800a236:	615e      	str	r6, [r3, #20]
 800a238:	6125      	str	r5, [r4, #16]
 800a23a:	4620      	mov	r0, r4
 800a23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a240:	0800b488 	.word	0x0800b488
 800a244:	0800b499 	.word	0x0800b499

0800a248 <__hi0bits>:
 800a248:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a24c:	4603      	mov	r3, r0
 800a24e:	bf36      	itet	cc
 800a250:	0403      	lslcc	r3, r0, #16
 800a252:	2000      	movcs	r0, #0
 800a254:	2010      	movcc	r0, #16
 800a256:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a25a:	bf3c      	itt	cc
 800a25c:	021b      	lslcc	r3, r3, #8
 800a25e:	3008      	addcc	r0, #8
 800a260:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a264:	bf3c      	itt	cc
 800a266:	011b      	lslcc	r3, r3, #4
 800a268:	3004      	addcc	r0, #4
 800a26a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a26e:	bf3c      	itt	cc
 800a270:	009b      	lslcc	r3, r3, #2
 800a272:	3002      	addcc	r0, #2
 800a274:	2b00      	cmp	r3, #0
 800a276:	db05      	blt.n	800a284 <__hi0bits+0x3c>
 800a278:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a27c:	f100 0001 	add.w	r0, r0, #1
 800a280:	bf08      	it	eq
 800a282:	2020      	moveq	r0, #32
 800a284:	4770      	bx	lr

0800a286 <__lo0bits>:
 800a286:	6803      	ldr	r3, [r0, #0]
 800a288:	4602      	mov	r2, r0
 800a28a:	f013 0007 	ands.w	r0, r3, #7
 800a28e:	d00b      	beq.n	800a2a8 <__lo0bits+0x22>
 800a290:	07d9      	lsls	r1, r3, #31
 800a292:	d421      	bmi.n	800a2d8 <__lo0bits+0x52>
 800a294:	0798      	lsls	r0, r3, #30
 800a296:	bf49      	itett	mi
 800a298:	085b      	lsrmi	r3, r3, #1
 800a29a:	089b      	lsrpl	r3, r3, #2
 800a29c:	2001      	movmi	r0, #1
 800a29e:	6013      	strmi	r3, [r2, #0]
 800a2a0:	bf5c      	itt	pl
 800a2a2:	6013      	strpl	r3, [r2, #0]
 800a2a4:	2002      	movpl	r0, #2
 800a2a6:	4770      	bx	lr
 800a2a8:	b299      	uxth	r1, r3
 800a2aa:	b909      	cbnz	r1, 800a2b0 <__lo0bits+0x2a>
 800a2ac:	0c1b      	lsrs	r3, r3, #16
 800a2ae:	2010      	movs	r0, #16
 800a2b0:	b2d9      	uxtb	r1, r3
 800a2b2:	b909      	cbnz	r1, 800a2b8 <__lo0bits+0x32>
 800a2b4:	3008      	adds	r0, #8
 800a2b6:	0a1b      	lsrs	r3, r3, #8
 800a2b8:	0719      	lsls	r1, r3, #28
 800a2ba:	bf04      	itt	eq
 800a2bc:	091b      	lsreq	r3, r3, #4
 800a2be:	3004      	addeq	r0, #4
 800a2c0:	0799      	lsls	r1, r3, #30
 800a2c2:	bf04      	itt	eq
 800a2c4:	089b      	lsreq	r3, r3, #2
 800a2c6:	3002      	addeq	r0, #2
 800a2c8:	07d9      	lsls	r1, r3, #31
 800a2ca:	d403      	bmi.n	800a2d4 <__lo0bits+0x4e>
 800a2cc:	085b      	lsrs	r3, r3, #1
 800a2ce:	f100 0001 	add.w	r0, r0, #1
 800a2d2:	d003      	beq.n	800a2dc <__lo0bits+0x56>
 800a2d4:	6013      	str	r3, [r2, #0]
 800a2d6:	4770      	bx	lr
 800a2d8:	2000      	movs	r0, #0
 800a2da:	4770      	bx	lr
 800a2dc:	2020      	movs	r0, #32
 800a2de:	4770      	bx	lr

0800a2e0 <__i2b>:
 800a2e0:	b510      	push	{r4, lr}
 800a2e2:	460c      	mov	r4, r1
 800a2e4:	2101      	movs	r1, #1
 800a2e6:	f7ff ff07 	bl	800a0f8 <_Balloc>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	b928      	cbnz	r0, 800a2fa <__i2b+0x1a>
 800a2ee:	4b05      	ldr	r3, [pc, #20]	@ (800a304 <__i2b+0x24>)
 800a2f0:	4805      	ldr	r0, [pc, #20]	@ (800a308 <__i2b+0x28>)
 800a2f2:	f240 1145 	movw	r1, #325	@ 0x145
 800a2f6:	f000 fcb5 	bl	800ac64 <__assert_func>
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	6144      	str	r4, [r0, #20]
 800a2fe:	6103      	str	r3, [r0, #16]
 800a300:	bd10      	pop	{r4, pc}
 800a302:	bf00      	nop
 800a304:	0800b488 	.word	0x0800b488
 800a308:	0800b499 	.word	0x0800b499

0800a30c <__multiply>:
 800a30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a310:	4617      	mov	r7, r2
 800a312:	690a      	ldr	r2, [r1, #16]
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	429a      	cmp	r2, r3
 800a318:	bfa8      	it	ge
 800a31a:	463b      	movge	r3, r7
 800a31c:	4689      	mov	r9, r1
 800a31e:	bfa4      	itt	ge
 800a320:	460f      	movge	r7, r1
 800a322:	4699      	movge	r9, r3
 800a324:	693d      	ldr	r5, [r7, #16]
 800a326:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	6879      	ldr	r1, [r7, #4]
 800a32e:	eb05 060a 	add.w	r6, r5, sl
 800a332:	42b3      	cmp	r3, r6
 800a334:	b085      	sub	sp, #20
 800a336:	bfb8      	it	lt
 800a338:	3101      	addlt	r1, #1
 800a33a:	f7ff fedd 	bl	800a0f8 <_Balloc>
 800a33e:	b930      	cbnz	r0, 800a34e <__multiply+0x42>
 800a340:	4602      	mov	r2, r0
 800a342:	4b41      	ldr	r3, [pc, #260]	@ (800a448 <__multiply+0x13c>)
 800a344:	4841      	ldr	r0, [pc, #260]	@ (800a44c <__multiply+0x140>)
 800a346:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a34a:	f000 fc8b 	bl	800ac64 <__assert_func>
 800a34e:	f100 0414 	add.w	r4, r0, #20
 800a352:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a356:	4623      	mov	r3, r4
 800a358:	2200      	movs	r2, #0
 800a35a:	4573      	cmp	r3, lr
 800a35c:	d320      	bcc.n	800a3a0 <__multiply+0x94>
 800a35e:	f107 0814 	add.w	r8, r7, #20
 800a362:	f109 0114 	add.w	r1, r9, #20
 800a366:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a36a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a36e:	9302      	str	r3, [sp, #8]
 800a370:	1beb      	subs	r3, r5, r7
 800a372:	3b15      	subs	r3, #21
 800a374:	f023 0303 	bic.w	r3, r3, #3
 800a378:	3304      	adds	r3, #4
 800a37a:	3715      	adds	r7, #21
 800a37c:	42bd      	cmp	r5, r7
 800a37e:	bf38      	it	cc
 800a380:	2304      	movcc	r3, #4
 800a382:	9301      	str	r3, [sp, #4]
 800a384:	9b02      	ldr	r3, [sp, #8]
 800a386:	9103      	str	r1, [sp, #12]
 800a388:	428b      	cmp	r3, r1
 800a38a:	d80c      	bhi.n	800a3a6 <__multiply+0x9a>
 800a38c:	2e00      	cmp	r6, #0
 800a38e:	dd03      	ble.n	800a398 <__multiply+0x8c>
 800a390:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a394:	2b00      	cmp	r3, #0
 800a396:	d055      	beq.n	800a444 <__multiply+0x138>
 800a398:	6106      	str	r6, [r0, #16]
 800a39a:	b005      	add	sp, #20
 800a39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a0:	f843 2b04 	str.w	r2, [r3], #4
 800a3a4:	e7d9      	b.n	800a35a <__multiply+0x4e>
 800a3a6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a3aa:	f1ba 0f00 	cmp.w	sl, #0
 800a3ae:	d01f      	beq.n	800a3f0 <__multiply+0xe4>
 800a3b0:	46c4      	mov	ip, r8
 800a3b2:	46a1      	mov	r9, r4
 800a3b4:	2700      	movs	r7, #0
 800a3b6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a3ba:	f8d9 3000 	ldr.w	r3, [r9]
 800a3be:	fa1f fb82 	uxth.w	fp, r2
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a3c8:	443b      	add	r3, r7
 800a3ca:	f8d9 7000 	ldr.w	r7, [r9]
 800a3ce:	0c12      	lsrs	r2, r2, #16
 800a3d0:	0c3f      	lsrs	r7, r7, #16
 800a3d2:	fb0a 7202 	mla	r2, sl, r2, r7
 800a3d6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3e0:	4565      	cmp	r5, ip
 800a3e2:	f849 3b04 	str.w	r3, [r9], #4
 800a3e6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a3ea:	d8e4      	bhi.n	800a3b6 <__multiply+0xaa>
 800a3ec:	9b01      	ldr	r3, [sp, #4]
 800a3ee:	50e7      	str	r7, [r4, r3]
 800a3f0:	9b03      	ldr	r3, [sp, #12]
 800a3f2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a3f6:	3104      	adds	r1, #4
 800a3f8:	f1b9 0f00 	cmp.w	r9, #0
 800a3fc:	d020      	beq.n	800a440 <__multiply+0x134>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	4647      	mov	r7, r8
 800a402:	46a4      	mov	ip, r4
 800a404:	f04f 0a00 	mov.w	sl, #0
 800a408:	f8b7 b000 	ldrh.w	fp, [r7]
 800a40c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a410:	fb09 220b 	mla	r2, r9, fp, r2
 800a414:	4452      	add	r2, sl
 800a416:	b29b      	uxth	r3, r3
 800a418:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a41c:	f84c 3b04 	str.w	r3, [ip], #4
 800a420:	f857 3b04 	ldr.w	r3, [r7], #4
 800a424:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a428:	f8bc 3000 	ldrh.w	r3, [ip]
 800a42c:	fb09 330a 	mla	r3, r9, sl, r3
 800a430:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a434:	42bd      	cmp	r5, r7
 800a436:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a43a:	d8e5      	bhi.n	800a408 <__multiply+0xfc>
 800a43c:	9a01      	ldr	r2, [sp, #4]
 800a43e:	50a3      	str	r3, [r4, r2]
 800a440:	3404      	adds	r4, #4
 800a442:	e79f      	b.n	800a384 <__multiply+0x78>
 800a444:	3e01      	subs	r6, #1
 800a446:	e7a1      	b.n	800a38c <__multiply+0x80>
 800a448:	0800b488 	.word	0x0800b488
 800a44c:	0800b499 	.word	0x0800b499

0800a450 <__pow5mult>:
 800a450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a454:	4615      	mov	r5, r2
 800a456:	f012 0203 	ands.w	r2, r2, #3
 800a45a:	4607      	mov	r7, r0
 800a45c:	460e      	mov	r6, r1
 800a45e:	d007      	beq.n	800a470 <__pow5mult+0x20>
 800a460:	4c25      	ldr	r4, [pc, #148]	@ (800a4f8 <__pow5mult+0xa8>)
 800a462:	3a01      	subs	r2, #1
 800a464:	2300      	movs	r3, #0
 800a466:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a46a:	f7ff fea7 	bl	800a1bc <__multadd>
 800a46e:	4606      	mov	r6, r0
 800a470:	10ad      	asrs	r5, r5, #2
 800a472:	d03d      	beq.n	800a4f0 <__pow5mult+0xa0>
 800a474:	69fc      	ldr	r4, [r7, #28]
 800a476:	b97c      	cbnz	r4, 800a498 <__pow5mult+0x48>
 800a478:	2010      	movs	r0, #16
 800a47a:	f7ff fd87 	bl	8009f8c <malloc>
 800a47e:	4602      	mov	r2, r0
 800a480:	61f8      	str	r0, [r7, #28]
 800a482:	b928      	cbnz	r0, 800a490 <__pow5mult+0x40>
 800a484:	4b1d      	ldr	r3, [pc, #116]	@ (800a4fc <__pow5mult+0xac>)
 800a486:	481e      	ldr	r0, [pc, #120]	@ (800a500 <__pow5mult+0xb0>)
 800a488:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a48c:	f000 fbea 	bl	800ac64 <__assert_func>
 800a490:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a494:	6004      	str	r4, [r0, #0]
 800a496:	60c4      	str	r4, [r0, #12]
 800a498:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a49c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4a0:	b94c      	cbnz	r4, 800a4b6 <__pow5mult+0x66>
 800a4a2:	f240 2171 	movw	r1, #625	@ 0x271
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	f7ff ff1a 	bl	800a2e0 <__i2b>
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	6003      	str	r3, [r0, #0]
 800a4b6:	f04f 0900 	mov.w	r9, #0
 800a4ba:	07eb      	lsls	r3, r5, #31
 800a4bc:	d50a      	bpl.n	800a4d4 <__pow5mult+0x84>
 800a4be:	4631      	mov	r1, r6
 800a4c0:	4622      	mov	r2, r4
 800a4c2:	4638      	mov	r0, r7
 800a4c4:	f7ff ff22 	bl	800a30c <__multiply>
 800a4c8:	4631      	mov	r1, r6
 800a4ca:	4680      	mov	r8, r0
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	f7ff fe53 	bl	800a178 <_Bfree>
 800a4d2:	4646      	mov	r6, r8
 800a4d4:	106d      	asrs	r5, r5, #1
 800a4d6:	d00b      	beq.n	800a4f0 <__pow5mult+0xa0>
 800a4d8:	6820      	ldr	r0, [r4, #0]
 800a4da:	b938      	cbnz	r0, 800a4ec <__pow5mult+0x9c>
 800a4dc:	4622      	mov	r2, r4
 800a4de:	4621      	mov	r1, r4
 800a4e0:	4638      	mov	r0, r7
 800a4e2:	f7ff ff13 	bl	800a30c <__multiply>
 800a4e6:	6020      	str	r0, [r4, #0]
 800a4e8:	f8c0 9000 	str.w	r9, [r0]
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	e7e4      	b.n	800a4ba <__pow5mult+0x6a>
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4f6:	bf00      	nop
 800a4f8:	0800b54c 	.word	0x0800b54c
 800a4fc:	0800b419 	.word	0x0800b419
 800a500:	0800b499 	.word	0x0800b499

0800a504 <__lshift>:
 800a504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a508:	460c      	mov	r4, r1
 800a50a:	6849      	ldr	r1, [r1, #4]
 800a50c:	6923      	ldr	r3, [r4, #16]
 800a50e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a512:	68a3      	ldr	r3, [r4, #8]
 800a514:	4607      	mov	r7, r0
 800a516:	4691      	mov	r9, r2
 800a518:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a51c:	f108 0601 	add.w	r6, r8, #1
 800a520:	42b3      	cmp	r3, r6
 800a522:	db0b      	blt.n	800a53c <__lshift+0x38>
 800a524:	4638      	mov	r0, r7
 800a526:	f7ff fde7 	bl	800a0f8 <_Balloc>
 800a52a:	4605      	mov	r5, r0
 800a52c:	b948      	cbnz	r0, 800a542 <__lshift+0x3e>
 800a52e:	4602      	mov	r2, r0
 800a530:	4b28      	ldr	r3, [pc, #160]	@ (800a5d4 <__lshift+0xd0>)
 800a532:	4829      	ldr	r0, [pc, #164]	@ (800a5d8 <__lshift+0xd4>)
 800a534:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a538:	f000 fb94 	bl	800ac64 <__assert_func>
 800a53c:	3101      	adds	r1, #1
 800a53e:	005b      	lsls	r3, r3, #1
 800a540:	e7ee      	b.n	800a520 <__lshift+0x1c>
 800a542:	2300      	movs	r3, #0
 800a544:	f100 0114 	add.w	r1, r0, #20
 800a548:	f100 0210 	add.w	r2, r0, #16
 800a54c:	4618      	mov	r0, r3
 800a54e:	4553      	cmp	r3, sl
 800a550:	db33      	blt.n	800a5ba <__lshift+0xb6>
 800a552:	6920      	ldr	r0, [r4, #16]
 800a554:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a558:	f104 0314 	add.w	r3, r4, #20
 800a55c:	f019 091f 	ands.w	r9, r9, #31
 800a560:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a564:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a568:	d02b      	beq.n	800a5c2 <__lshift+0xbe>
 800a56a:	f1c9 0e20 	rsb	lr, r9, #32
 800a56e:	468a      	mov	sl, r1
 800a570:	2200      	movs	r2, #0
 800a572:	6818      	ldr	r0, [r3, #0]
 800a574:	fa00 f009 	lsl.w	r0, r0, r9
 800a578:	4310      	orrs	r0, r2
 800a57a:	f84a 0b04 	str.w	r0, [sl], #4
 800a57e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a582:	459c      	cmp	ip, r3
 800a584:	fa22 f20e 	lsr.w	r2, r2, lr
 800a588:	d8f3      	bhi.n	800a572 <__lshift+0x6e>
 800a58a:	ebac 0304 	sub.w	r3, ip, r4
 800a58e:	3b15      	subs	r3, #21
 800a590:	f023 0303 	bic.w	r3, r3, #3
 800a594:	3304      	adds	r3, #4
 800a596:	f104 0015 	add.w	r0, r4, #21
 800a59a:	4560      	cmp	r0, ip
 800a59c:	bf88      	it	hi
 800a59e:	2304      	movhi	r3, #4
 800a5a0:	50ca      	str	r2, [r1, r3]
 800a5a2:	b10a      	cbz	r2, 800a5a8 <__lshift+0xa4>
 800a5a4:	f108 0602 	add.w	r6, r8, #2
 800a5a8:	3e01      	subs	r6, #1
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	612e      	str	r6, [r5, #16]
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	f7ff fde2 	bl	800a178 <_Bfree>
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5be:	3301      	adds	r3, #1
 800a5c0:	e7c5      	b.n	800a54e <__lshift+0x4a>
 800a5c2:	3904      	subs	r1, #4
 800a5c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5cc:	459c      	cmp	ip, r3
 800a5ce:	d8f9      	bhi.n	800a5c4 <__lshift+0xc0>
 800a5d0:	e7ea      	b.n	800a5a8 <__lshift+0xa4>
 800a5d2:	bf00      	nop
 800a5d4:	0800b488 	.word	0x0800b488
 800a5d8:	0800b499 	.word	0x0800b499

0800a5dc <__mcmp>:
 800a5dc:	690a      	ldr	r2, [r1, #16]
 800a5de:	4603      	mov	r3, r0
 800a5e0:	6900      	ldr	r0, [r0, #16]
 800a5e2:	1a80      	subs	r0, r0, r2
 800a5e4:	b530      	push	{r4, r5, lr}
 800a5e6:	d10e      	bne.n	800a606 <__mcmp+0x2a>
 800a5e8:	3314      	adds	r3, #20
 800a5ea:	3114      	adds	r1, #20
 800a5ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a5f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a5f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5fc:	4295      	cmp	r5, r2
 800a5fe:	d003      	beq.n	800a608 <__mcmp+0x2c>
 800a600:	d205      	bcs.n	800a60e <__mcmp+0x32>
 800a602:	f04f 30ff 	mov.w	r0, #4294967295
 800a606:	bd30      	pop	{r4, r5, pc}
 800a608:	42a3      	cmp	r3, r4
 800a60a:	d3f3      	bcc.n	800a5f4 <__mcmp+0x18>
 800a60c:	e7fb      	b.n	800a606 <__mcmp+0x2a>
 800a60e:	2001      	movs	r0, #1
 800a610:	e7f9      	b.n	800a606 <__mcmp+0x2a>
	...

0800a614 <__mdiff>:
 800a614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a618:	4689      	mov	r9, r1
 800a61a:	4606      	mov	r6, r0
 800a61c:	4611      	mov	r1, r2
 800a61e:	4648      	mov	r0, r9
 800a620:	4614      	mov	r4, r2
 800a622:	f7ff ffdb 	bl	800a5dc <__mcmp>
 800a626:	1e05      	subs	r5, r0, #0
 800a628:	d112      	bne.n	800a650 <__mdiff+0x3c>
 800a62a:	4629      	mov	r1, r5
 800a62c:	4630      	mov	r0, r6
 800a62e:	f7ff fd63 	bl	800a0f8 <_Balloc>
 800a632:	4602      	mov	r2, r0
 800a634:	b928      	cbnz	r0, 800a642 <__mdiff+0x2e>
 800a636:	4b3f      	ldr	r3, [pc, #252]	@ (800a734 <__mdiff+0x120>)
 800a638:	f240 2137 	movw	r1, #567	@ 0x237
 800a63c:	483e      	ldr	r0, [pc, #248]	@ (800a738 <__mdiff+0x124>)
 800a63e:	f000 fb11 	bl	800ac64 <__assert_func>
 800a642:	2301      	movs	r3, #1
 800a644:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a648:	4610      	mov	r0, r2
 800a64a:	b003      	add	sp, #12
 800a64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a650:	bfbc      	itt	lt
 800a652:	464b      	movlt	r3, r9
 800a654:	46a1      	movlt	r9, r4
 800a656:	4630      	mov	r0, r6
 800a658:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a65c:	bfba      	itte	lt
 800a65e:	461c      	movlt	r4, r3
 800a660:	2501      	movlt	r5, #1
 800a662:	2500      	movge	r5, #0
 800a664:	f7ff fd48 	bl	800a0f8 <_Balloc>
 800a668:	4602      	mov	r2, r0
 800a66a:	b918      	cbnz	r0, 800a674 <__mdiff+0x60>
 800a66c:	4b31      	ldr	r3, [pc, #196]	@ (800a734 <__mdiff+0x120>)
 800a66e:	f240 2145 	movw	r1, #581	@ 0x245
 800a672:	e7e3      	b.n	800a63c <__mdiff+0x28>
 800a674:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a678:	6926      	ldr	r6, [r4, #16]
 800a67a:	60c5      	str	r5, [r0, #12]
 800a67c:	f109 0310 	add.w	r3, r9, #16
 800a680:	f109 0514 	add.w	r5, r9, #20
 800a684:	f104 0e14 	add.w	lr, r4, #20
 800a688:	f100 0b14 	add.w	fp, r0, #20
 800a68c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a690:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	46d9      	mov	r9, fp
 800a698:	f04f 0c00 	mov.w	ip, #0
 800a69c:	9b01      	ldr	r3, [sp, #4]
 800a69e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a6a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	fa1f f38a 	uxth.w	r3, sl
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	b283      	uxth	r3, r0
 800a6b0:	1acb      	subs	r3, r1, r3
 800a6b2:	0c00      	lsrs	r0, r0, #16
 800a6b4:	4463      	add	r3, ip
 800a6b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a6ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a6c4:	4576      	cmp	r6, lr
 800a6c6:	f849 3b04 	str.w	r3, [r9], #4
 800a6ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6ce:	d8e5      	bhi.n	800a69c <__mdiff+0x88>
 800a6d0:	1b33      	subs	r3, r6, r4
 800a6d2:	3b15      	subs	r3, #21
 800a6d4:	f023 0303 	bic.w	r3, r3, #3
 800a6d8:	3415      	adds	r4, #21
 800a6da:	3304      	adds	r3, #4
 800a6dc:	42a6      	cmp	r6, r4
 800a6de:	bf38      	it	cc
 800a6e0:	2304      	movcc	r3, #4
 800a6e2:	441d      	add	r5, r3
 800a6e4:	445b      	add	r3, fp
 800a6e6:	461e      	mov	r6, r3
 800a6e8:	462c      	mov	r4, r5
 800a6ea:	4544      	cmp	r4, r8
 800a6ec:	d30e      	bcc.n	800a70c <__mdiff+0xf8>
 800a6ee:	f108 0103 	add.w	r1, r8, #3
 800a6f2:	1b49      	subs	r1, r1, r5
 800a6f4:	f021 0103 	bic.w	r1, r1, #3
 800a6f8:	3d03      	subs	r5, #3
 800a6fa:	45a8      	cmp	r8, r5
 800a6fc:	bf38      	it	cc
 800a6fe:	2100      	movcc	r1, #0
 800a700:	440b      	add	r3, r1
 800a702:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a706:	b191      	cbz	r1, 800a72e <__mdiff+0x11a>
 800a708:	6117      	str	r7, [r2, #16]
 800a70a:	e79d      	b.n	800a648 <__mdiff+0x34>
 800a70c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a710:	46e6      	mov	lr, ip
 800a712:	0c08      	lsrs	r0, r1, #16
 800a714:	fa1c fc81 	uxtah	ip, ip, r1
 800a718:	4471      	add	r1, lr
 800a71a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a71e:	b289      	uxth	r1, r1
 800a720:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a724:	f846 1b04 	str.w	r1, [r6], #4
 800a728:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a72c:	e7dd      	b.n	800a6ea <__mdiff+0xd6>
 800a72e:	3f01      	subs	r7, #1
 800a730:	e7e7      	b.n	800a702 <__mdiff+0xee>
 800a732:	bf00      	nop
 800a734:	0800b488 	.word	0x0800b488
 800a738:	0800b499 	.word	0x0800b499

0800a73c <__d2b>:
 800a73c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a740:	460f      	mov	r7, r1
 800a742:	2101      	movs	r1, #1
 800a744:	ec59 8b10 	vmov	r8, r9, d0
 800a748:	4616      	mov	r6, r2
 800a74a:	f7ff fcd5 	bl	800a0f8 <_Balloc>
 800a74e:	4604      	mov	r4, r0
 800a750:	b930      	cbnz	r0, 800a760 <__d2b+0x24>
 800a752:	4602      	mov	r2, r0
 800a754:	4b23      	ldr	r3, [pc, #140]	@ (800a7e4 <__d2b+0xa8>)
 800a756:	4824      	ldr	r0, [pc, #144]	@ (800a7e8 <__d2b+0xac>)
 800a758:	f240 310f 	movw	r1, #783	@ 0x30f
 800a75c:	f000 fa82 	bl	800ac64 <__assert_func>
 800a760:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a764:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a768:	b10d      	cbz	r5, 800a76e <__d2b+0x32>
 800a76a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a76e:	9301      	str	r3, [sp, #4]
 800a770:	f1b8 0300 	subs.w	r3, r8, #0
 800a774:	d023      	beq.n	800a7be <__d2b+0x82>
 800a776:	4668      	mov	r0, sp
 800a778:	9300      	str	r3, [sp, #0]
 800a77a:	f7ff fd84 	bl	800a286 <__lo0bits>
 800a77e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a782:	b1d0      	cbz	r0, 800a7ba <__d2b+0x7e>
 800a784:	f1c0 0320 	rsb	r3, r0, #32
 800a788:	fa02 f303 	lsl.w	r3, r2, r3
 800a78c:	430b      	orrs	r3, r1
 800a78e:	40c2      	lsrs	r2, r0
 800a790:	6163      	str	r3, [r4, #20]
 800a792:	9201      	str	r2, [sp, #4]
 800a794:	9b01      	ldr	r3, [sp, #4]
 800a796:	61a3      	str	r3, [r4, #24]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	bf0c      	ite	eq
 800a79c:	2201      	moveq	r2, #1
 800a79e:	2202      	movne	r2, #2
 800a7a0:	6122      	str	r2, [r4, #16]
 800a7a2:	b1a5      	cbz	r5, 800a7ce <__d2b+0x92>
 800a7a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a7a8:	4405      	add	r5, r0
 800a7aa:	603d      	str	r5, [r7, #0]
 800a7ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a7b0:	6030      	str	r0, [r6, #0]
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	b003      	add	sp, #12
 800a7b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7ba:	6161      	str	r1, [r4, #20]
 800a7bc:	e7ea      	b.n	800a794 <__d2b+0x58>
 800a7be:	a801      	add	r0, sp, #4
 800a7c0:	f7ff fd61 	bl	800a286 <__lo0bits>
 800a7c4:	9b01      	ldr	r3, [sp, #4]
 800a7c6:	6163      	str	r3, [r4, #20]
 800a7c8:	3020      	adds	r0, #32
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	e7e8      	b.n	800a7a0 <__d2b+0x64>
 800a7ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a7d6:	6038      	str	r0, [r7, #0]
 800a7d8:	6918      	ldr	r0, [r3, #16]
 800a7da:	f7ff fd35 	bl	800a248 <__hi0bits>
 800a7de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7e2:	e7e5      	b.n	800a7b0 <__d2b+0x74>
 800a7e4:	0800b488 	.word	0x0800b488
 800a7e8:	0800b499 	.word	0x0800b499

0800a7ec <__ssputs_r>:
 800a7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f0:	688e      	ldr	r6, [r1, #8]
 800a7f2:	461f      	mov	r7, r3
 800a7f4:	42be      	cmp	r6, r7
 800a7f6:	680b      	ldr	r3, [r1, #0]
 800a7f8:	4682      	mov	sl, r0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	4690      	mov	r8, r2
 800a7fe:	d82d      	bhi.n	800a85c <__ssputs_r+0x70>
 800a800:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a804:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a808:	d026      	beq.n	800a858 <__ssputs_r+0x6c>
 800a80a:	6965      	ldr	r5, [r4, #20]
 800a80c:	6909      	ldr	r1, [r1, #16]
 800a80e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a812:	eba3 0901 	sub.w	r9, r3, r1
 800a816:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a81a:	1c7b      	adds	r3, r7, #1
 800a81c:	444b      	add	r3, r9
 800a81e:	106d      	asrs	r5, r5, #1
 800a820:	429d      	cmp	r5, r3
 800a822:	bf38      	it	cc
 800a824:	461d      	movcc	r5, r3
 800a826:	0553      	lsls	r3, r2, #21
 800a828:	d527      	bpl.n	800a87a <__ssputs_r+0x8e>
 800a82a:	4629      	mov	r1, r5
 800a82c:	f7ff fbd8 	bl	8009fe0 <_malloc_r>
 800a830:	4606      	mov	r6, r0
 800a832:	b360      	cbz	r0, 800a88e <__ssputs_r+0xa2>
 800a834:	6921      	ldr	r1, [r4, #16]
 800a836:	464a      	mov	r2, r9
 800a838:	f000 fa06 	bl	800ac48 <memcpy>
 800a83c:	89a3      	ldrh	r3, [r4, #12]
 800a83e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a846:	81a3      	strh	r3, [r4, #12]
 800a848:	6126      	str	r6, [r4, #16]
 800a84a:	6165      	str	r5, [r4, #20]
 800a84c:	444e      	add	r6, r9
 800a84e:	eba5 0509 	sub.w	r5, r5, r9
 800a852:	6026      	str	r6, [r4, #0]
 800a854:	60a5      	str	r5, [r4, #8]
 800a856:	463e      	mov	r6, r7
 800a858:	42be      	cmp	r6, r7
 800a85a:	d900      	bls.n	800a85e <__ssputs_r+0x72>
 800a85c:	463e      	mov	r6, r7
 800a85e:	6820      	ldr	r0, [r4, #0]
 800a860:	4632      	mov	r2, r6
 800a862:	4641      	mov	r1, r8
 800a864:	f000 f9c6 	bl	800abf4 <memmove>
 800a868:	68a3      	ldr	r3, [r4, #8]
 800a86a:	1b9b      	subs	r3, r3, r6
 800a86c:	60a3      	str	r3, [r4, #8]
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	4433      	add	r3, r6
 800a872:	6023      	str	r3, [r4, #0]
 800a874:	2000      	movs	r0, #0
 800a876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a87a:	462a      	mov	r2, r5
 800a87c:	f000 fa36 	bl	800acec <_realloc_r>
 800a880:	4606      	mov	r6, r0
 800a882:	2800      	cmp	r0, #0
 800a884:	d1e0      	bne.n	800a848 <__ssputs_r+0x5c>
 800a886:	6921      	ldr	r1, [r4, #16]
 800a888:	4650      	mov	r0, sl
 800a88a:	f7ff fb35 	bl	8009ef8 <_free_r>
 800a88e:	230c      	movs	r3, #12
 800a890:	f8ca 3000 	str.w	r3, [sl]
 800a894:	89a3      	ldrh	r3, [r4, #12]
 800a896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a89a:	81a3      	strh	r3, [r4, #12]
 800a89c:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a0:	e7e9      	b.n	800a876 <__ssputs_r+0x8a>
	...

0800a8a4 <_svfiprintf_r>:
 800a8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	4698      	mov	r8, r3
 800a8aa:	898b      	ldrh	r3, [r1, #12]
 800a8ac:	061b      	lsls	r3, r3, #24
 800a8ae:	b09d      	sub	sp, #116	@ 0x74
 800a8b0:	4607      	mov	r7, r0
 800a8b2:	460d      	mov	r5, r1
 800a8b4:	4614      	mov	r4, r2
 800a8b6:	d510      	bpl.n	800a8da <_svfiprintf_r+0x36>
 800a8b8:	690b      	ldr	r3, [r1, #16]
 800a8ba:	b973      	cbnz	r3, 800a8da <_svfiprintf_r+0x36>
 800a8bc:	2140      	movs	r1, #64	@ 0x40
 800a8be:	f7ff fb8f 	bl	8009fe0 <_malloc_r>
 800a8c2:	6028      	str	r0, [r5, #0]
 800a8c4:	6128      	str	r0, [r5, #16]
 800a8c6:	b930      	cbnz	r0, 800a8d6 <_svfiprintf_r+0x32>
 800a8c8:	230c      	movs	r3, #12
 800a8ca:	603b      	str	r3, [r7, #0]
 800a8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d0:	b01d      	add	sp, #116	@ 0x74
 800a8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d6:	2340      	movs	r3, #64	@ 0x40
 800a8d8:	616b      	str	r3, [r5, #20]
 800a8da:	2300      	movs	r3, #0
 800a8dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8de:	2320      	movs	r3, #32
 800a8e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8e8:	2330      	movs	r3, #48	@ 0x30
 800a8ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aa88 <_svfiprintf_r+0x1e4>
 800a8ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8f2:	f04f 0901 	mov.w	r9, #1
 800a8f6:	4623      	mov	r3, r4
 800a8f8:	469a      	mov	sl, r3
 800a8fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8fe:	b10a      	cbz	r2, 800a904 <_svfiprintf_r+0x60>
 800a900:	2a25      	cmp	r2, #37	@ 0x25
 800a902:	d1f9      	bne.n	800a8f8 <_svfiprintf_r+0x54>
 800a904:	ebba 0b04 	subs.w	fp, sl, r4
 800a908:	d00b      	beq.n	800a922 <_svfiprintf_r+0x7e>
 800a90a:	465b      	mov	r3, fp
 800a90c:	4622      	mov	r2, r4
 800a90e:	4629      	mov	r1, r5
 800a910:	4638      	mov	r0, r7
 800a912:	f7ff ff6b 	bl	800a7ec <__ssputs_r>
 800a916:	3001      	adds	r0, #1
 800a918:	f000 80a7 	beq.w	800aa6a <_svfiprintf_r+0x1c6>
 800a91c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a91e:	445a      	add	r2, fp
 800a920:	9209      	str	r2, [sp, #36]	@ 0x24
 800a922:	f89a 3000 	ldrb.w	r3, [sl]
 800a926:	2b00      	cmp	r3, #0
 800a928:	f000 809f 	beq.w	800aa6a <_svfiprintf_r+0x1c6>
 800a92c:	2300      	movs	r3, #0
 800a92e:	f04f 32ff 	mov.w	r2, #4294967295
 800a932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a936:	f10a 0a01 	add.w	sl, sl, #1
 800a93a:	9304      	str	r3, [sp, #16]
 800a93c:	9307      	str	r3, [sp, #28]
 800a93e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a942:	931a      	str	r3, [sp, #104]	@ 0x68
 800a944:	4654      	mov	r4, sl
 800a946:	2205      	movs	r2, #5
 800a948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a94c:	484e      	ldr	r0, [pc, #312]	@ (800aa88 <_svfiprintf_r+0x1e4>)
 800a94e:	f7f5 fc5f 	bl	8000210 <memchr>
 800a952:	9a04      	ldr	r2, [sp, #16]
 800a954:	b9d8      	cbnz	r0, 800a98e <_svfiprintf_r+0xea>
 800a956:	06d0      	lsls	r0, r2, #27
 800a958:	bf44      	itt	mi
 800a95a:	2320      	movmi	r3, #32
 800a95c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a960:	0711      	lsls	r1, r2, #28
 800a962:	bf44      	itt	mi
 800a964:	232b      	movmi	r3, #43	@ 0x2b
 800a966:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a96a:	f89a 3000 	ldrb.w	r3, [sl]
 800a96e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a970:	d015      	beq.n	800a99e <_svfiprintf_r+0xfa>
 800a972:	9a07      	ldr	r2, [sp, #28]
 800a974:	4654      	mov	r4, sl
 800a976:	2000      	movs	r0, #0
 800a978:	f04f 0c0a 	mov.w	ip, #10
 800a97c:	4621      	mov	r1, r4
 800a97e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a982:	3b30      	subs	r3, #48	@ 0x30
 800a984:	2b09      	cmp	r3, #9
 800a986:	d94b      	bls.n	800aa20 <_svfiprintf_r+0x17c>
 800a988:	b1b0      	cbz	r0, 800a9b8 <_svfiprintf_r+0x114>
 800a98a:	9207      	str	r2, [sp, #28]
 800a98c:	e014      	b.n	800a9b8 <_svfiprintf_r+0x114>
 800a98e:	eba0 0308 	sub.w	r3, r0, r8
 800a992:	fa09 f303 	lsl.w	r3, r9, r3
 800a996:	4313      	orrs	r3, r2
 800a998:	9304      	str	r3, [sp, #16]
 800a99a:	46a2      	mov	sl, r4
 800a99c:	e7d2      	b.n	800a944 <_svfiprintf_r+0xa0>
 800a99e:	9b03      	ldr	r3, [sp, #12]
 800a9a0:	1d19      	adds	r1, r3, #4
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	9103      	str	r1, [sp, #12]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	bfbb      	ittet	lt
 800a9aa:	425b      	neglt	r3, r3
 800a9ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a9b0:	9307      	strge	r3, [sp, #28]
 800a9b2:	9307      	strlt	r3, [sp, #28]
 800a9b4:	bfb8      	it	lt
 800a9b6:	9204      	strlt	r2, [sp, #16]
 800a9b8:	7823      	ldrb	r3, [r4, #0]
 800a9ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9bc:	d10a      	bne.n	800a9d4 <_svfiprintf_r+0x130>
 800a9be:	7863      	ldrb	r3, [r4, #1]
 800a9c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9c2:	d132      	bne.n	800aa2a <_svfiprintf_r+0x186>
 800a9c4:	9b03      	ldr	r3, [sp, #12]
 800a9c6:	1d1a      	adds	r2, r3, #4
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	9203      	str	r2, [sp, #12]
 800a9cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9d0:	3402      	adds	r4, #2
 800a9d2:	9305      	str	r3, [sp, #20]
 800a9d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aa98 <_svfiprintf_r+0x1f4>
 800a9d8:	7821      	ldrb	r1, [r4, #0]
 800a9da:	2203      	movs	r2, #3
 800a9dc:	4650      	mov	r0, sl
 800a9de:	f7f5 fc17 	bl	8000210 <memchr>
 800a9e2:	b138      	cbz	r0, 800a9f4 <_svfiprintf_r+0x150>
 800a9e4:	9b04      	ldr	r3, [sp, #16]
 800a9e6:	eba0 000a 	sub.w	r0, r0, sl
 800a9ea:	2240      	movs	r2, #64	@ 0x40
 800a9ec:	4082      	lsls	r2, r0
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	3401      	adds	r4, #1
 800a9f2:	9304      	str	r3, [sp, #16]
 800a9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9f8:	4824      	ldr	r0, [pc, #144]	@ (800aa8c <_svfiprintf_r+0x1e8>)
 800a9fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9fe:	2206      	movs	r2, #6
 800aa00:	f7f5 fc06 	bl	8000210 <memchr>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d036      	beq.n	800aa76 <_svfiprintf_r+0x1d2>
 800aa08:	4b21      	ldr	r3, [pc, #132]	@ (800aa90 <_svfiprintf_r+0x1ec>)
 800aa0a:	bb1b      	cbnz	r3, 800aa54 <_svfiprintf_r+0x1b0>
 800aa0c:	9b03      	ldr	r3, [sp, #12]
 800aa0e:	3307      	adds	r3, #7
 800aa10:	f023 0307 	bic.w	r3, r3, #7
 800aa14:	3308      	adds	r3, #8
 800aa16:	9303      	str	r3, [sp, #12]
 800aa18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa1a:	4433      	add	r3, r6
 800aa1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa1e:	e76a      	b.n	800a8f6 <_svfiprintf_r+0x52>
 800aa20:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa24:	460c      	mov	r4, r1
 800aa26:	2001      	movs	r0, #1
 800aa28:	e7a8      	b.n	800a97c <_svfiprintf_r+0xd8>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	3401      	adds	r4, #1
 800aa2e:	9305      	str	r3, [sp, #20]
 800aa30:	4619      	mov	r1, r3
 800aa32:	f04f 0c0a 	mov.w	ip, #10
 800aa36:	4620      	mov	r0, r4
 800aa38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa3c:	3a30      	subs	r2, #48	@ 0x30
 800aa3e:	2a09      	cmp	r2, #9
 800aa40:	d903      	bls.n	800aa4a <_svfiprintf_r+0x1a6>
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d0c6      	beq.n	800a9d4 <_svfiprintf_r+0x130>
 800aa46:	9105      	str	r1, [sp, #20]
 800aa48:	e7c4      	b.n	800a9d4 <_svfiprintf_r+0x130>
 800aa4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa4e:	4604      	mov	r4, r0
 800aa50:	2301      	movs	r3, #1
 800aa52:	e7f0      	b.n	800aa36 <_svfiprintf_r+0x192>
 800aa54:	ab03      	add	r3, sp, #12
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	462a      	mov	r2, r5
 800aa5a:	4b0e      	ldr	r3, [pc, #56]	@ (800aa94 <_svfiprintf_r+0x1f0>)
 800aa5c:	a904      	add	r1, sp, #16
 800aa5e:	4638      	mov	r0, r7
 800aa60:	f7fd fe7e 	bl	8008760 <_printf_float>
 800aa64:	1c42      	adds	r2, r0, #1
 800aa66:	4606      	mov	r6, r0
 800aa68:	d1d6      	bne.n	800aa18 <_svfiprintf_r+0x174>
 800aa6a:	89ab      	ldrh	r3, [r5, #12]
 800aa6c:	065b      	lsls	r3, r3, #25
 800aa6e:	f53f af2d 	bmi.w	800a8cc <_svfiprintf_r+0x28>
 800aa72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa74:	e72c      	b.n	800a8d0 <_svfiprintf_r+0x2c>
 800aa76:	ab03      	add	r3, sp, #12
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	462a      	mov	r2, r5
 800aa7c:	4b05      	ldr	r3, [pc, #20]	@ (800aa94 <_svfiprintf_r+0x1f0>)
 800aa7e:	a904      	add	r1, sp, #16
 800aa80:	4638      	mov	r0, r7
 800aa82:	f7fe f905 	bl	8008c90 <_printf_i>
 800aa86:	e7ed      	b.n	800aa64 <_svfiprintf_r+0x1c0>
 800aa88:	0800b4f2 	.word	0x0800b4f2
 800aa8c:	0800b4fc 	.word	0x0800b4fc
 800aa90:	08008761 	.word	0x08008761
 800aa94:	0800a7ed 	.word	0x0800a7ed
 800aa98:	0800b4f8 	.word	0x0800b4f8

0800aa9c <__sflush_r>:
 800aa9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aaa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa4:	0716      	lsls	r6, r2, #28
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	460c      	mov	r4, r1
 800aaaa:	d454      	bmi.n	800ab56 <__sflush_r+0xba>
 800aaac:	684b      	ldr	r3, [r1, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	dc02      	bgt.n	800aab8 <__sflush_r+0x1c>
 800aab2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	dd48      	ble.n	800ab4a <__sflush_r+0xae>
 800aab8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aaba:	2e00      	cmp	r6, #0
 800aabc:	d045      	beq.n	800ab4a <__sflush_r+0xae>
 800aabe:	2300      	movs	r3, #0
 800aac0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aac4:	682f      	ldr	r7, [r5, #0]
 800aac6:	6a21      	ldr	r1, [r4, #32]
 800aac8:	602b      	str	r3, [r5, #0]
 800aaca:	d030      	beq.n	800ab2e <__sflush_r+0x92>
 800aacc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aace:	89a3      	ldrh	r3, [r4, #12]
 800aad0:	0759      	lsls	r1, r3, #29
 800aad2:	d505      	bpl.n	800aae0 <__sflush_r+0x44>
 800aad4:	6863      	ldr	r3, [r4, #4]
 800aad6:	1ad2      	subs	r2, r2, r3
 800aad8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aada:	b10b      	cbz	r3, 800aae0 <__sflush_r+0x44>
 800aadc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aade:	1ad2      	subs	r2, r2, r3
 800aae0:	2300      	movs	r3, #0
 800aae2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aae4:	6a21      	ldr	r1, [r4, #32]
 800aae6:	4628      	mov	r0, r5
 800aae8:	47b0      	blx	r6
 800aaea:	1c43      	adds	r3, r0, #1
 800aaec:	89a3      	ldrh	r3, [r4, #12]
 800aaee:	d106      	bne.n	800aafe <__sflush_r+0x62>
 800aaf0:	6829      	ldr	r1, [r5, #0]
 800aaf2:	291d      	cmp	r1, #29
 800aaf4:	d82b      	bhi.n	800ab4e <__sflush_r+0xb2>
 800aaf6:	4a2a      	ldr	r2, [pc, #168]	@ (800aba0 <__sflush_r+0x104>)
 800aaf8:	40ca      	lsrs	r2, r1
 800aafa:	07d6      	lsls	r6, r2, #31
 800aafc:	d527      	bpl.n	800ab4e <__sflush_r+0xb2>
 800aafe:	2200      	movs	r2, #0
 800ab00:	6062      	str	r2, [r4, #4]
 800ab02:	04d9      	lsls	r1, r3, #19
 800ab04:	6922      	ldr	r2, [r4, #16]
 800ab06:	6022      	str	r2, [r4, #0]
 800ab08:	d504      	bpl.n	800ab14 <__sflush_r+0x78>
 800ab0a:	1c42      	adds	r2, r0, #1
 800ab0c:	d101      	bne.n	800ab12 <__sflush_r+0x76>
 800ab0e:	682b      	ldr	r3, [r5, #0]
 800ab10:	b903      	cbnz	r3, 800ab14 <__sflush_r+0x78>
 800ab12:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab16:	602f      	str	r7, [r5, #0]
 800ab18:	b1b9      	cbz	r1, 800ab4a <__sflush_r+0xae>
 800ab1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab1e:	4299      	cmp	r1, r3
 800ab20:	d002      	beq.n	800ab28 <__sflush_r+0x8c>
 800ab22:	4628      	mov	r0, r5
 800ab24:	f7ff f9e8 	bl	8009ef8 <_free_r>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab2c:	e00d      	b.n	800ab4a <__sflush_r+0xae>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	4628      	mov	r0, r5
 800ab32:	47b0      	blx	r6
 800ab34:	4602      	mov	r2, r0
 800ab36:	1c50      	adds	r0, r2, #1
 800ab38:	d1c9      	bne.n	800aace <__sflush_r+0x32>
 800ab3a:	682b      	ldr	r3, [r5, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d0c6      	beq.n	800aace <__sflush_r+0x32>
 800ab40:	2b1d      	cmp	r3, #29
 800ab42:	d001      	beq.n	800ab48 <__sflush_r+0xac>
 800ab44:	2b16      	cmp	r3, #22
 800ab46:	d11e      	bne.n	800ab86 <__sflush_r+0xea>
 800ab48:	602f      	str	r7, [r5, #0]
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	e022      	b.n	800ab94 <__sflush_r+0xf8>
 800ab4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab52:	b21b      	sxth	r3, r3
 800ab54:	e01b      	b.n	800ab8e <__sflush_r+0xf2>
 800ab56:	690f      	ldr	r7, [r1, #16]
 800ab58:	2f00      	cmp	r7, #0
 800ab5a:	d0f6      	beq.n	800ab4a <__sflush_r+0xae>
 800ab5c:	0793      	lsls	r3, r2, #30
 800ab5e:	680e      	ldr	r6, [r1, #0]
 800ab60:	bf08      	it	eq
 800ab62:	694b      	ldreq	r3, [r1, #20]
 800ab64:	600f      	str	r7, [r1, #0]
 800ab66:	bf18      	it	ne
 800ab68:	2300      	movne	r3, #0
 800ab6a:	eba6 0807 	sub.w	r8, r6, r7
 800ab6e:	608b      	str	r3, [r1, #8]
 800ab70:	f1b8 0f00 	cmp.w	r8, #0
 800ab74:	dde9      	ble.n	800ab4a <__sflush_r+0xae>
 800ab76:	6a21      	ldr	r1, [r4, #32]
 800ab78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab7a:	4643      	mov	r3, r8
 800ab7c:	463a      	mov	r2, r7
 800ab7e:	4628      	mov	r0, r5
 800ab80:	47b0      	blx	r6
 800ab82:	2800      	cmp	r0, #0
 800ab84:	dc08      	bgt.n	800ab98 <__sflush_r+0xfc>
 800ab86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab8e:	81a3      	strh	r3, [r4, #12]
 800ab90:	f04f 30ff 	mov.w	r0, #4294967295
 800ab94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab98:	4407      	add	r7, r0
 800ab9a:	eba8 0800 	sub.w	r8, r8, r0
 800ab9e:	e7e7      	b.n	800ab70 <__sflush_r+0xd4>
 800aba0:	20400001 	.word	0x20400001

0800aba4 <_fflush_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	690b      	ldr	r3, [r1, #16]
 800aba8:	4605      	mov	r5, r0
 800abaa:	460c      	mov	r4, r1
 800abac:	b913      	cbnz	r3, 800abb4 <_fflush_r+0x10>
 800abae:	2500      	movs	r5, #0
 800abb0:	4628      	mov	r0, r5
 800abb2:	bd38      	pop	{r3, r4, r5, pc}
 800abb4:	b118      	cbz	r0, 800abbe <_fflush_r+0x1a>
 800abb6:	6a03      	ldr	r3, [r0, #32]
 800abb8:	b90b      	cbnz	r3, 800abbe <_fflush_r+0x1a>
 800abba:	f7fe fa13 	bl	8008fe4 <__sinit>
 800abbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d0f3      	beq.n	800abae <_fflush_r+0xa>
 800abc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800abc8:	07d0      	lsls	r0, r2, #31
 800abca:	d404      	bmi.n	800abd6 <_fflush_r+0x32>
 800abcc:	0599      	lsls	r1, r3, #22
 800abce:	d402      	bmi.n	800abd6 <_fflush_r+0x32>
 800abd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abd2:	f7fe fb34 	bl	800923e <__retarget_lock_acquire_recursive>
 800abd6:	4628      	mov	r0, r5
 800abd8:	4621      	mov	r1, r4
 800abda:	f7ff ff5f 	bl	800aa9c <__sflush_r>
 800abde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abe0:	07da      	lsls	r2, r3, #31
 800abe2:	4605      	mov	r5, r0
 800abe4:	d4e4      	bmi.n	800abb0 <_fflush_r+0xc>
 800abe6:	89a3      	ldrh	r3, [r4, #12]
 800abe8:	059b      	lsls	r3, r3, #22
 800abea:	d4e1      	bmi.n	800abb0 <_fflush_r+0xc>
 800abec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abee:	f7fe fb27 	bl	8009240 <__retarget_lock_release_recursive>
 800abf2:	e7dd      	b.n	800abb0 <_fflush_r+0xc>

0800abf4 <memmove>:
 800abf4:	4288      	cmp	r0, r1
 800abf6:	b510      	push	{r4, lr}
 800abf8:	eb01 0402 	add.w	r4, r1, r2
 800abfc:	d902      	bls.n	800ac04 <memmove+0x10>
 800abfe:	4284      	cmp	r4, r0
 800ac00:	4623      	mov	r3, r4
 800ac02:	d807      	bhi.n	800ac14 <memmove+0x20>
 800ac04:	1e43      	subs	r3, r0, #1
 800ac06:	42a1      	cmp	r1, r4
 800ac08:	d008      	beq.n	800ac1c <memmove+0x28>
 800ac0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac12:	e7f8      	b.n	800ac06 <memmove+0x12>
 800ac14:	4402      	add	r2, r0
 800ac16:	4601      	mov	r1, r0
 800ac18:	428a      	cmp	r2, r1
 800ac1a:	d100      	bne.n	800ac1e <memmove+0x2a>
 800ac1c:	bd10      	pop	{r4, pc}
 800ac1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac26:	e7f7      	b.n	800ac18 <memmove+0x24>

0800ac28 <_sbrk_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4d06      	ldr	r5, [pc, #24]	@ (800ac44 <_sbrk_r+0x1c>)
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	4604      	mov	r4, r0
 800ac30:	4608      	mov	r0, r1
 800ac32:	602b      	str	r3, [r5, #0]
 800ac34:	f7f7 fe64 	bl	8002900 <_sbrk>
 800ac38:	1c43      	adds	r3, r0, #1
 800ac3a:	d102      	bne.n	800ac42 <_sbrk_r+0x1a>
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	b103      	cbz	r3, 800ac42 <_sbrk_r+0x1a>
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	bd38      	pop	{r3, r4, r5, pc}
 800ac44:	20000874 	.word	0x20000874

0800ac48 <memcpy>:
 800ac48:	440a      	add	r2, r1
 800ac4a:	4291      	cmp	r1, r2
 800ac4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac50:	d100      	bne.n	800ac54 <memcpy+0xc>
 800ac52:	4770      	bx	lr
 800ac54:	b510      	push	{r4, lr}
 800ac56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac5e:	4291      	cmp	r1, r2
 800ac60:	d1f9      	bne.n	800ac56 <memcpy+0xe>
 800ac62:	bd10      	pop	{r4, pc}

0800ac64 <__assert_func>:
 800ac64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac66:	4614      	mov	r4, r2
 800ac68:	461a      	mov	r2, r3
 800ac6a:	4b09      	ldr	r3, [pc, #36]	@ (800ac90 <__assert_func+0x2c>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4605      	mov	r5, r0
 800ac70:	68d8      	ldr	r0, [r3, #12]
 800ac72:	b14c      	cbz	r4, 800ac88 <__assert_func+0x24>
 800ac74:	4b07      	ldr	r3, [pc, #28]	@ (800ac94 <__assert_func+0x30>)
 800ac76:	9100      	str	r1, [sp, #0]
 800ac78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac7c:	4906      	ldr	r1, [pc, #24]	@ (800ac98 <__assert_func+0x34>)
 800ac7e:	462b      	mov	r3, r5
 800ac80:	f000 f870 	bl	800ad64 <fiprintf>
 800ac84:	f000 f880 	bl	800ad88 <abort>
 800ac88:	4b04      	ldr	r3, [pc, #16]	@ (800ac9c <__assert_func+0x38>)
 800ac8a:	461c      	mov	r4, r3
 800ac8c:	e7f3      	b.n	800ac76 <__assert_func+0x12>
 800ac8e:	bf00      	nop
 800ac90:	20000024 	.word	0x20000024
 800ac94:	0800b50d 	.word	0x0800b50d
 800ac98:	0800b51a 	.word	0x0800b51a
 800ac9c:	0800b548 	.word	0x0800b548

0800aca0 <_calloc_r>:
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	fba1 5402 	umull	r5, r4, r1, r2
 800aca6:	b934      	cbnz	r4, 800acb6 <_calloc_r+0x16>
 800aca8:	4629      	mov	r1, r5
 800acaa:	f7ff f999 	bl	8009fe0 <_malloc_r>
 800acae:	4606      	mov	r6, r0
 800acb0:	b928      	cbnz	r0, 800acbe <_calloc_r+0x1e>
 800acb2:	4630      	mov	r0, r6
 800acb4:	bd70      	pop	{r4, r5, r6, pc}
 800acb6:	220c      	movs	r2, #12
 800acb8:	6002      	str	r2, [r0, #0]
 800acba:	2600      	movs	r6, #0
 800acbc:	e7f9      	b.n	800acb2 <_calloc_r+0x12>
 800acbe:	462a      	mov	r2, r5
 800acc0:	4621      	mov	r1, r4
 800acc2:	f7fe fa3e 	bl	8009142 <memset>
 800acc6:	e7f4      	b.n	800acb2 <_calloc_r+0x12>

0800acc8 <__ascii_mbtowc>:
 800acc8:	b082      	sub	sp, #8
 800acca:	b901      	cbnz	r1, 800acce <__ascii_mbtowc+0x6>
 800accc:	a901      	add	r1, sp, #4
 800acce:	b142      	cbz	r2, 800ace2 <__ascii_mbtowc+0x1a>
 800acd0:	b14b      	cbz	r3, 800ace6 <__ascii_mbtowc+0x1e>
 800acd2:	7813      	ldrb	r3, [r2, #0]
 800acd4:	600b      	str	r3, [r1, #0]
 800acd6:	7812      	ldrb	r2, [r2, #0]
 800acd8:	1e10      	subs	r0, r2, #0
 800acda:	bf18      	it	ne
 800acdc:	2001      	movne	r0, #1
 800acde:	b002      	add	sp, #8
 800ace0:	4770      	bx	lr
 800ace2:	4610      	mov	r0, r2
 800ace4:	e7fb      	b.n	800acde <__ascii_mbtowc+0x16>
 800ace6:	f06f 0001 	mvn.w	r0, #1
 800acea:	e7f8      	b.n	800acde <__ascii_mbtowc+0x16>

0800acec <_realloc_r>:
 800acec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf0:	4607      	mov	r7, r0
 800acf2:	4614      	mov	r4, r2
 800acf4:	460d      	mov	r5, r1
 800acf6:	b921      	cbnz	r1, 800ad02 <_realloc_r+0x16>
 800acf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acfc:	4611      	mov	r1, r2
 800acfe:	f7ff b96f 	b.w	8009fe0 <_malloc_r>
 800ad02:	b92a      	cbnz	r2, 800ad10 <_realloc_r+0x24>
 800ad04:	f7ff f8f8 	bl	8009ef8 <_free_r>
 800ad08:	4625      	mov	r5, r4
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad10:	f000 f841 	bl	800ad96 <_malloc_usable_size_r>
 800ad14:	4284      	cmp	r4, r0
 800ad16:	4606      	mov	r6, r0
 800ad18:	d802      	bhi.n	800ad20 <_realloc_r+0x34>
 800ad1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad1e:	d8f4      	bhi.n	800ad0a <_realloc_r+0x1e>
 800ad20:	4621      	mov	r1, r4
 800ad22:	4638      	mov	r0, r7
 800ad24:	f7ff f95c 	bl	8009fe0 <_malloc_r>
 800ad28:	4680      	mov	r8, r0
 800ad2a:	b908      	cbnz	r0, 800ad30 <_realloc_r+0x44>
 800ad2c:	4645      	mov	r5, r8
 800ad2e:	e7ec      	b.n	800ad0a <_realloc_r+0x1e>
 800ad30:	42b4      	cmp	r4, r6
 800ad32:	4622      	mov	r2, r4
 800ad34:	4629      	mov	r1, r5
 800ad36:	bf28      	it	cs
 800ad38:	4632      	movcs	r2, r6
 800ad3a:	f7ff ff85 	bl	800ac48 <memcpy>
 800ad3e:	4629      	mov	r1, r5
 800ad40:	4638      	mov	r0, r7
 800ad42:	f7ff f8d9 	bl	8009ef8 <_free_r>
 800ad46:	e7f1      	b.n	800ad2c <_realloc_r+0x40>

0800ad48 <__ascii_wctomb>:
 800ad48:	4603      	mov	r3, r0
 800ad4a:	4608      	mov	r0, r1
 800ad4c:	b141      	cbz	r1, 800ad60 <__ascii_wctomb+0x18>
 800ad4e:	2aff      	cmp	r2, #255	@ 0xff
 800ad50:	d904      	bls.n	800ad5c <__ascii_wctomb+0x14>
 800ad52:	228a      	movs	r2, #138	@ 0x8a
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	f04f 30ff 	mov.w	r0, #4294967295
 800ad5a:	4770      	bx	lr
 800ad5c:	700a      	strb	r2, [r1, #0]
 800ad5e:	2001      	movs	r0, #1
 800ad60:	4770      	bx	lr
	...

0800ad64 <fiprintf>:
 800ad64:	b40e      	push	{r1, r2, r3}
 800ad66:	b503      	push	{r0, r1, lr}
 800ad68:	4601      	mov	r1, r0
 800ad6a:	ab03      	add	r3, sp, #12
 800ad6c:	4805      	ldr	r0, [pc, #20]	@ (800ad84 <fiprintf+0x20>)
 800ad6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad72:	6800      	ldr	r0, [r0, #0]
 800ad74:	9301      	str	r3, [sp, #4]
 800ad76:	f000 f83f 	bl	800adf8 <_vfiprintf_r>
 800ad7a:	b002      	add	sp, #8
 800ad7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad80:	b003      	add	sp, #12
 800ad82:	4770      	bx	lr
 800ad84:	20000024 	.word	0x20000024

0800ad88 <abort>:
 800ad88:	b508      	push	{r3, lr}
 800ad8a:	2006      	movs	r0, #6
 800ad8c:	f000 fa08 	bl	800b1a0 <raise>
 800ad90:	2001      	movs	r0, #1
 800ad92:	f7f7 fd3d 	bl	8002810 <_exit>

0800ad96 <_malloc_usable_size_r>:
 800ad96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad9a:	1f18      	subs	r0, r3, #4
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	bfbc      	itt	lt
 800ada0:	580b      	ldrlt	r3, [r1, r0]
 800ada2:	18c0      	addlt	r0, r0, r3
 800ada4:	4770      	bx	lr

0800ada6 <__sfputc_r>:
 800ada6:	6893      	ldr	r3, [r2, #8]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	2b00      	cmp	r3, #0
 800adac:	b410      	push	{r4}
 800adae:	6093      	str	r3, [r2, #8]
 800adb0:	da08      	bge.n	800adc4 <__sfputc_r+0x1e>
 800adb2:	6994      	ldr	r4, [r2, #24]
 800adb4:	42a3      	cmp	r3, r4
 800adb6:	db01      	blt.n	800adbc <__sfputc_r+0x16>
 800adb8:	290a      	cmp	r1, #10
 800adba:	d103      	bne.n	800adc4 <__sfputc_r+0x1e>
 800adbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adc0:	f000 b932 	b.w	800b028 <__swbuf_r>
 800adc4:	6813      	ldr	r3, [r2, #0]
 800adc6:	1c58      	adds	r0, r3, #1
 800adc8:	6010      	str	r0, [r2, #0]
 800adca:	7019      	strb	r1, [r3, #0]
 800adcc:	4608      	mov	r0, r1
 800adce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <__sfputs_r>:
 800add4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add6:	4606      	mov	r6, r0
 800add8:	460f      	mov	r7, r1
 800adda:	4614      	mov	r4, r2
 800addc:	18d5      	adds	r5, r2, r3
 800adde:	42ac      	cmp	r4, r5
 800ade0:	d101      	bne.n	800ade6 <__sfputs_r+0x12>
 800ade2:	2000      	movs	r0, #0
 800ade4:	e007      	b.n	800adf6 <__sfputs_r+0x22>
 800ade6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adea:	463a      	mov	r2, r7
 800adec:	4630      	mov	r0, r6
 800adee:	f7ff ffda 	bl	800ada6 <__sfputc_r>
 800adf2:	1c43      	adds	r3, r0, #1
 800adf4:	d1f3      	bne.n	800adde <__sfputs_r+0xa>
 800adf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800adf8 <_vfiprintf_r>:
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	460d      	mov	r5, r1
 800adfe:	b09d      	sub	sp, #116	@ 0x74
 800ae00:	4614      	mov	r4, r2
 800ae02:	4698      	mov	r8, r3
 800ae04:	4606      	mov	r6, r0
 800ae06:	b118      	cbz	r0, 800ae10 <_vfiprintf_r+0x18>
 800ae08:	6a03      	ldr	r3, [r0, #32]
 800ae0a:	b90b      	cbnz	r3, 800ae10 <_vfiprintf_r+0x18>
 800ae0c:	f7fe f8ea 	bl	8008fe4 <__sinit>
 800ae10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae12:	07d9      	lsls	r1, r3, #31
 800ae14:	d405      	bmi.n	800ae22 <_vfiprintf_r+0x2a>
 800ae16:	89ab      	ldrh	r3, [r5, #12]
 800ae18:	059a      	lsls	r2, r3, #22
 800ae1a:	d402      	bmi.n	800ae22 <_vfiprintf_r+0x2a>
 800ae1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae1e:	f7fe fa0e 	bl	800923e <__retarget_lock_acquire_recursive>
 800ae22:	89ab      	ldrh	r3, [r5, #12]
 800ae24:	071b      	lsls	r3, r3, #28
 800ae26:	d501      	bpl.n	800ae2c <_vfiprintf_r+0x34>
 800ae28:	692b      	ldr	r3, [r5, #16]
 800ae2a:	b99b      	cbnz	r3, 800ae54 <_vfiprintf_r+0x5c>
 800ae2c:	4629      	mov	r1, r5
 800ae2e:	4630      	mov	r0, r6
 800ae30:	f000 f938 	bl	800b0a4 <__swsetup_r>
 800ae34:	b170      	cbz	r0, 800ae54 <_vfiprintf_r+0x5c>
 800ae36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae38:	07dc      	lsls	r4, r3, #31
 800ae3a:	d504      	bpl.n	800ae46 <_vfiprintf_r+0x4e>
 800ae3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae40:	b01d      	add	sp, #116	@ 0x74
 800ae42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae46:	89ab      	ldrh	r3, [r5, #12]
 800ae48:	0598      	lsls	r0, r3, #22
 800ae4a:	d4f7      	bmi.n	800ae3c <_vfiprintf_r+0x44>
 800ae4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae4e:	f7fe f9f7 	bl	8009240 <__retarget_lock_release_recursive>
 800ae52:	e7f3      	b.n	800ae3c <_vfiprintf_r+0x44>
 800ae54:	2300      	movs	r3, #0
 800ae56:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae58:	2320      	movs	r3, #32
 800ae5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae62:	2330      	movs	r3, #48	@ 0x30
 800ae64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b014 <_vfiprintf_r+0x21c>
 800ae68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae6c:	f04f 0901 	mov.w	r9, #1
 800ae70:	4623      	mov	r3, r4
 800ae72:	469a      	mov	sl, r3
 800ae74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae78:	b10a      	cbz	r2, 800ae7e <_vfiprintf_r+0x86>
 800ae7a:	2a25      	cmp	r2, #37	@ 0x25
 800ae7c:	d1f9      	bne.n	800ae72 <_vfiprintf_r+0x7a>
 800ae7e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae82:	d00b      	beq.n	800ae9c <_vfiprintf_r+0xa4>
 800ae84:	465b      	mov	r3, fp
 800ae86:	4622      	mov	r2, r4
 800ae88:	4629      	mov	r1, r5
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	f7ff ffa2 	bl	800add4 <__sfputs_r>
 800ae90:	3001      	adds	r0, #1
 800ae92:	f000 80a7 	beq.w	800afe4 <_vfiprintf_r+0x1ec>
 800ae96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae98:	445a      	add	r2, fp
 800ae9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae9c:	f89a 3000 	ldrb.w	r3, [sl]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f000 809f 	beq.w	800afe4 <_vfiprintf_r+0x1ec>
 800aea6:	2300      	movs	r3, #0
 800aea8:	f04f 32ff 	mov.w	r2, #4294967295
 800aeac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeb0:	f10a 0a01 	add.w	sl, sl, #1
 800aeb4:	9304      	str	r3, [sp, #16]
 800aeb6:	9307      	str	r3, [sp, #28]
 800aeb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aebc:	931a      	str	r3, [sp, #104]	@ 0x68
 800aebe:	4654      	mov	r4, sl
 800aec0:	2205      	movs	r2, #5
 800aec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec6:	4853      	ldr	r0, [pc, #332]	@ (800b014 <_vfiprintf_r+0x21c>)
 800aec8:	f7f5 f9a2 	bl	8000210 <memchr>
 800aecc:	9a04      	ldr	r2, [sp, #16]
 800aece:	b9d8      	cbnz	r0, 800af08 <_vfiprintf_r+0x110>
 800aed0:	06d1      	lsls	r1, r2, #27
 800aed2:	bf44      	itt	mi
 800aed4:	2320      	movmi	r3, #32
 800aed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeda:	0713      	lsls	r3, r2, #28
 800aedc:	bf44      	itt	mi
 800aede:	232b      	movmi	r3, #43	@ 0x2b
 800aee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aee4:	f89a 3000 	ldrb.w	r3, [sl]
 800aee8:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeea:	d015      	beq.n	800af18 <_vfiprintf_r+0x120>
 800aeec:	9a07      	ldr	r2, [sp, #28]
 800aeee:	4654      	mov	r4, sl
 800aef0:	2000      	movs	r0, #0
 800aef2:	f04f 0c0a 	mov.w	ip, #10
 800aef6:	4621      	mov	r1, r4
 800aef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aefc:	3b30      	subs	r3, #48	@ 0x30
 800aefe:	2b09      	cmp	r3, #9
 800af00:	d94b      	bls.n	800af9a <_vfiprintf_r+0x1a2>
 800af02:	b1b0      	cbz	r0, 800af32 <_vfiprintf_r+0x13a>
 800af04:	9207      	str	r2, [sp, #28]
 800af06:	e014      	b.n	800af32 <_vfiprintf_r+0x13a>
 800af08:	eba0 0308 	sub.w	r3, r0, r8
 800af0c:	fa09 f303 	lsl.w	r3, r9, r3
 800af10:	4313      	orrs	r3, r2
 800af12:	9304      	str	r3, [sp, #16]
 800af14:	46a2      	mov	sl, r4
 800af16:	e7d2      	b.n	800aebe <_vfiprintf_r+0xc6>
 800af18:	9b03      	ldr	r3, [sp, #12]
 800af1a:	1d19      	adds	r1, r3, #4
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	9103      	str	r1, [sp, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	bfbb      	ittet	lt
 800af24:	425b      	neglt	r3, r3
 800af26:	f042 0202 	orrlt.w	r2, r2, #2
 800af2a:	9307      	strge	r3, [sp, #28]
 800af2c:	9307      	strlt	r3, [sp, #28]
 800af2e:	bfb8      	it	lt
 800af30:	9204      	strlt	r2, [sp, #16]
 800af32:	7823      	ldrb	r3, [r4, #0]
 800af34:	2b2e      	cmp	r3, #46	@ 0x2e
 800af36:	d10a      	bne.n	800af4e <_vfiprintf_r+0x156>
 800af38:	7863      	ldrb	r3, [r4, #1]
 800af3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800af3c:	d132      	bne.n	800afa4 <_vfiprintf_r+0x1ac>
 800af3e:	9b03      	ldr	r3, [sp, #12]
 800af40:	1d1a      	adds	r2, r3, #4
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	9203      	str	r2, [sp, #12]
 800af46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af4a:	3402      	adds	r4, #2
 800af4c:	9305      	str	r3, [sp, #20]
 800af4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b024 <_vfiprintf_r+0x22c>
 800af52:	7821      	ldrb	r1, [r4, #0]
 800af54:	2203      	movs	r2, #3
 800af56:	4650      	mov	r0, sl
 800af58:	f7f5 f95a 	bl	8000210 <memchr>
 800af5c:	b138      	cbz	r0, 800af6e <_vfiprintf_r+0x176>
 800af5e:	9b04      	ldr	r3, [sp, #16]
 800af60:	eba0 000a 	sub.w	r0, r0, sl
 800af64:	2240      	movs	r2, #64	@ 0x40
 800af66:	4082      	lsls	r2, r0
 800af68:	4313      	orrs	r3, r2
 800af6a:	3401      	adds	r4, #1
 800af6c:	9304      	str	r3, [sp, #16]
 800af6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af72:	4829      	ldr	r0, [pc, #164]	@ (800b018 <_vfiprintf_r+0x220>)
 800af74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af78:	2206      	movs	r2, #6
 800af7a:	f7f5 f949 	bl	8000210 <memchr>
 800af7e:	2800      	cmp	r0, #0
 800af80:	d03f      	beq.n	800b002 <_vfiprintf_r+0x20a>
 800af82:	4b26      	ldr	r3, [pc, #152]	@ (800b01c <_vfiprintf_r+0x224>)
 800af84:	bb1b      	cbnz	r3, 800afce <_vfiprintf_r+0x1d6>
 800af86:	9b03      	ldr	r3, [sp, #12]
 800af88:	3307      	adds	r3, #7
 800af8a:	f023 0307 	bic.w	r3, r3, #7
 800af8e:	3308      	adds	r3, #8
 800af90:	9303      	str	r3, [sp, #12]
 800af92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af94:	443b      	add	r3, r7
 800af96:	9309      	str	r3, [sp, #36]	@ 0x24
 800af98:	e76a      	b.n	800ae70 <_vfiprintf_r+0x78>
 800af9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800af9e:	460c      	mov	r4, r1
 800afa0:	2001      	movs	r0, #1
 800afa2:	e7a8      	b.n	800aef6 <_vfiprintf_r+0xfe>
 800afa4:	2300      	movs	r3, #0
 800afa6:	3401      	adds	r4, #1
 800afa8:	9305      	str	r3, [sp, #20]
 800afaa:	4619      	mov	r1, r3
 800afac:	f04f 0c0a 	mov.w	ip, #10
 800afb0:	4620      	mov	r0, r4
 800afb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afb6:	3a30      	subs	r2, #48	@ 0x30
 800afb8:	2a09      	cmp	r2, #9
 800afba:	d903      	bls.n	800afc4 <_vfiprintf_r+0x1cc>
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d0c6      	beq.n	800af4e <_vfiprintf_r+0x156>
 800afc0:	9105      	str	r1, [sp, #20]
 800afc2:	e7c4      	b.n	800af4e <_vfiprintf_r+0x156>
 800afc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800afc8:	4604      	mov	r4, r0
 800afca:	2301      	movs	r3, #1
 800afcc:	e7f0      	b.n	800afb0 <_vfiprintf_r+0x1b8>
 800afce:	ab03      	add	r3, sp, #12
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	462a      	mov	r2, r5
 800afd4:	4b12      	ldr	r3, [pc, #72]	@ (800b020 <_vfiprintf_r+0x228>)
 800afd6:	a904      	add	r1, sp, #16
 800afd8:	4630      	mov	r0, r6
 800afda:	f7fd fbc1 	bl	8008760 <_printf_float>
 800afde:	4607      	mov	r7, r0
 800afe0:	1c78      	adds	r0, r7, #1
 800afe2:	d1d6      	bne.n	800af92 <_vfiprintf_r+0x19a>
 800afe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afe6:	07d9      	lsls	r1, r3, #31
 800afe8:	d405      	bmi.n	800aff6 <_vfiprintf_r+0x1fe>
 800afea:	89ab      	ldrh	r3, [r5, #12]
 800afec:	059a      	lsls	r2, r3, #22
 800afee:	d402      	bmi.n	800aff6 <_vfiprintf_r+0x1fe>
 800aff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aff2:	f7fe f925 	bl	8009240 <__retarget_lock_release_recursive>
 800aff6:	89ab      	ldrh	r3, [r5, #12]
 800aff8:	065b      	lsls	r3, r3, #25
 800affa:	f53f af1f 	bmi.w	800ae3c <_vfiprintf_r+0x44>
 800affe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b000:	e71e      	b.n	800ae40 <_vfiprintf_r+0x48>
 800b002:	ab03      	add	r3, sp, #12
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	462a      	mov	r2, r5
 800b008:	4b05      	ldr	r3, [pc, #20]	@ (800b020 <_vfiprintf_r+0x228>)
 800b00a:	a904      	add	r1, sp, #16
 800b00c:	4630      	mov	r0, r6
 800b00e:	f7fd fe3f 	bl	8008c90 <_printf_i>
 800b012:	e7e4      	b.n	800afde <_vfiprintf_r+0x1e6>
 800b014:	0800b4f2 	.word	0x0800b4f2
 800b018:	0800b4fc 	.word	0x0800b4fc
 800b01c:	08008761 	.word	0x08008761
 800b020:	0800add5 	.word	0x0800add5
 800b024:	0800b4f8 	.word	0x0800b4f8

0800b028 <__swbuf_r>:
 800b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02a:	460e      	mov	r6, r1
 800b02c:	4614      	mov	r4, r2
 800b02e:	4605      	mov	r5, r0
 800b030:	b118      	cbz	r0, 800b03a <__swbuf_r+0x12>
 800b032:	6a03      	ldr	r3, [r0, #32]
 800b034:	b90b      	cbnz	r3, 800b03a <__swbuf_r+0x12>
 800b036:	f7fd ffd5 	bl	8008fe4 <__sinit>
 800b03a:	69a3      	ldr	r3, [r4, #24]
 800b03c:	60a3      	str	r3, [r4, #8]
 800b03e:	89a3      	ldrh	r3, [r4, #12]
 800b040:	071a      	lsls	r2, r3, #28
 800b042:	d501      	bpl.n	800b048 <__swbuf_r+0x20>
 800b044:	6923      	ldr	r3, [r4, #16]
 800b046:	b943      	cbnz	r3, 800b05a <__swbuf_r+0x32>
 800b048:	4621      	mov	r1, r4
 800b04a:	4628      	mov	r0, r5
 800b04c:	f000 f82a 	bl	800b0a4 <__swsetup_r>
 800b050:	b118      	cbz	r0, 800b05a <__swbuf_r+0x32>
 800b052:	f04f 37ff 	mov.w	r7, #4294967295
 800b056:	4638      	mov	r0, r7
 800b058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	6922      	ldr	r2, [r4, #16]
 800b05e:	1a98      	subs	r0, r3, r2
 800b060:	6963      	ldr	r3, [r4, #20]
 800b062:	b2f6      	uxtb	r6, r6
 800b064:	4283      	cmp	r3, r0
 800b066:	4637      	mov	r7, r6
 800b068:	dc05      	bgt.n	800b076 <__swbuf_r+0x4e>
 800b06a:	4621      	mov	r1, r4
 800b06c:	4628      	mov	r0, r5
 800b06e:	f7ff fd99 	bl	800aba4 <_fflush_r>
 800b072:	2800      	cmp	r0, #0
 800b074:	d1ed      	bne.n	800b052 <__swbuf_r+0x2a>
 800b076:	68a3      	ldr	r3, [r4, #8]
 800b078:	3b01      	subs	r3, #1
 800b07a:	60a3      	str	r3, [r4, #8]
 800b07c:	6823      	ldr	r3, [r4, #0]
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	6022      	str	r2, [r4, #0]
 800b082:	701e      	strb	r6, [r3, #0]
 800b084:	6962      	ldr	r2, [r4, #20]
 800b086:	1c43      	adds	r3, r0, #1
 800b088:	429a      	cmp	r2, r3
 800b08a:	d004      	beq.n	800b096 <__swbuf_r+0x6e>
 800b08c:	89a3      	ldrh	r3, [r4, #12]
 800b08e:	07db      	lsls	r3, r3, #31
 800b090:	d5e1      	bpl.n	800b056 <__swbuf_r+0x2e>
 800b092:	2e0a      	cmp	r6, #10
 800b094:	d1df      	bne.n	800b056 <__swbuf_r+0x2e>
 800b096:	4621      	mov	r1, r4
 800b098:	4628      	mov	r0, r5
 800b09a:	f7ff fd83 	bl	800aba4 <_fflush_r>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d0d9      	beq.n	800b056 <__swbuf_r+0x2e>
 800b0a2:	e7d6      	b.n	800b052 <__swbuf_r+0x2a>

0800b0a4 <__swsetup_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4b29      	ldr	r3, [pc, #164]	@ (800b14c <__swsetup_r+0xa8>)
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	6818      	ldr	r0, [r3, #0]
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	b118      	cbz	r0, 800b0b8 <__swsetup_r+0x14>
 800b0b0:	6a03      	ldr	r3, [r0, #32]
 800b0b2:	b90b      	cbnz	r3, 800b0b8 <__swsetup_r+0x14>
 800b0b4:	f7fd ff96 	bl	8008fe4 <__sinit>
 800b0b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0bc:	0719      	lsls	r1, r3, #28
 800b0be:	d422      	bmi.n	800b106 <__swsetup_r+0x62>
 800b0c0:	06da      	lsls	r2, r3, #27
 800b0c2:	d407      	bmi.n	800b0d4 <__swsetup_r+0x30>
 800b0c4:	2209      	movs	r2, #9
 800b0c6:	602a      	str	r2, [r5, #0]
 800b0c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0cc:	81a3      	strh	r3, [r4, #12]
 800b0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d2:	e033      	b.n	800b13c <__swsetup_r+0x98>
 800b0d4:	0758      	lsls	r0, r3, #29
 800b0d6:	d512      	bpl.n	800b0fe <__swsetup_r+0x5a>
 800b0d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0da:	b141      	cbz	r1, 800b0ee <__swsetup_r+0x4a>
 800b0dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0e0:	4299      	cmp	r1, r3
 800b0e2:	d002      	beq.n	800b0ea <__swsetup_r+0x46>
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	f7fe ff07 	bl	8009ef8 <_free_r>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0ee:	89a3      	ldrh	r3, [r4, #12]
 800b0f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0f4:	81a3      	strh	r3, [r4, #12]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	6063      	str	r3, [r4, #4]
 800b0fa:	6923      	ldr	r3, [r4, #16]
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	f043 0308 	orr.w	r3, r3, #8
 800b104:	81a3      	strh	r3, [r4, #12]
 800b106:	6923      	ldr	r3, [r4, #16]
 800b108:	b94b      	cbnz	r3, 800b11e <__swsetup_r+0x7a>
 800b10a:	89a3      	ldrh	r3, [r4, #12]
 800b10c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b114:	d003      	beq.n	800b11e <__swsetup_r+0x7a>
 800b116:	4621      	mov	r1, r4
 800b118:	4628      	mov	r0, r5
 800b11a:	f000 f883 	bl	800b224 <__smakebuf_r>
 800b11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b122:	f013 0201 	ands.w	r2, r3, #1
 800b126:	d00a      	beq.n	800b13e <__swsetup_r+0x9a>
 800b128:	2200      	movs	r2, #0
 800b12a:	60a2      	str	r2, [r4, #8]
 800b12c:	6962      	ldr	r2, [r4, #20]
 800b12e:	4252      	negs	r2, r2
 800b130:	61a2      	str	r2, [r4, #24]
 800b132:	6922      	ldr	r2, [r4, #16]
 800b134:	b942      	cbnz	r2, 800b148 <__swsetup_r+0xa4>
 800b136:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b13a:	d1c5      	bne.n	800b0c8 <__swsetup_r+0x24>
 800b13c:	bd38      	pop	{r3, r4, r5, pc}
 800b13e:	0799      	lsls	r1, r3, #30
 800b140:	bf58      	it	pl
 800b142:	6962      	ldrpl	r2, [r4, #20]
 800b144:	60a2      	str	r2, [r4, #8]
 800b146:	e7f4      	b.n	800b132 <__swsetup_r+0x8e>
 800b148:	2000      	movs	r0, #0
 800b14a:	e7f7      	b.n	800b13c <__swsetup_r+0x98>
 800b14c:	20000024 	.word	0x20000024

0800b150 <_raise_r>:
 800b150:	291f      	cmp	r1, #31
 800b152:	b538      	push	{r3, r4, r5, lr}
 800b154:	4605      	mov	r5, r0
 800b156:	460c      	mov	r4, r1
 800b158:	d904      	bls.n	800b164 <_raise_r+0x14>
 800b15a:	2316      	movs	r3, #22
 800b15c:	6003      	str	r3, [r0, #0]
 800b15e:	f04f 30ff 	mov.w	r0, #4294967295
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b166:	b112      	cbz	r2, 800b16e <_raise_r+0x1e>
 800b168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b16c:	b94b      	cbnz	r3, 800b182 <_raise_r+0x32>
 800b16e:	4628      	mov	r0, r5
 800b170:	f000 f830 	bl	800b1d4 <_getpid_r>
 800b174:	4622      	mov	r2, r4
 800b176:	4601      	mov	r1, r0
 800b178:	4628      	mov	r0, r5
 800b17a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b17e:	f000 b817 	b.w	800b1b0 <_kill_r>
 800b182:	2b01      	cmp	r3, #1
 800b184:	d00a      	beq.n	800b19c <_raise_r+0x4c>
 800b186:	1c59      	adds	r1, r3, #1
 800b188:	d103      	bne.n	800b192 <_raise_r+0x42>
 800b18a:	2316      	movs	r3, #22
 800b18c:	6003      	str	r3, [r0, #0]
 800b18e:	2001      	movs	r0, #1
 800b190:	e7e7      	b.n	800b162 <_raise_r+0x12>
 800b192:	2100      	movs	r1, #0
 800b194:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b198:	4620      	mov	r0, r4
 800b19a:	4798      	blx	r3
 800b19c:	2000      	movs	r0, #0
 800b19e:	e7e0      	b.n	800b162 <_raise_r+0x12>

0800b1a0 <raise>:
 800b1a0:	4b02      	ldr	r3, [pc, #8]	@ (800b1ac <raise+0xc>)
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	6818      	ldr	r0, [r3, #0]
 800b1a6:	f7ff bfd3 	b.w	800b150 <_raise_r>
 800b1aa:	bf00      	nop
 800b1ac:	20000024 	.word	0x20000024

0800b1b0 <_kill_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	4d07      	ldr	r5, [pc, #28]	@ (800b1d0 <_kill_r+0x20>)
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	4608      	mov	r0, r1
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	602b      	str	r3, [r5, #0]
 800b1be:	f7f7 fb17 	bl	80027f0 <_kill>
 800b1c2:	1c43      	adds	r3, r0, #1
 800b1c4:	d102      	bne.n	800b1cc <_kill_r+0x1c>
 800b1c6:	682b      	ldr	r3, [r5, #0]
 800b1c8:	b103      	cbz	r3, 800b1cc <_kill_r+0x1c>
 800b1ca:	6023      	str	r3, [r4, #0]
 800b1cc:	bd38      	pop	{r3, r4, r5, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20000874 	.word	0x20000874

0800b1d4 <_getpid_r>:
 800b1d4:	f7f7 bb04 	b.w	80027e0 <_getpid>

0800b1d8 <__swhatbuf_r>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	460c      	mov	r4, r1
 800b1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e0:	2900      	cmp	r1, #0
 800b1e2:	b096      	sub	sp, #88	@ 0x58
 800b1e4:	4615      	mov	r5, r2
 800b1e6:	461e      	mov	r6, r3
 800b1e8:	da0d      	bge.n	800b206 <__swhatbuf_r+0x2e>
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b1f0:	f04f 0100 	mov.w	r1, #0
 800b1f4:	bf14      	ite	ne
 800b1f6:	2340      	movne	r3, #64	@ 0x40
 800b1f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	6031      	str	r1, [r6, #0]
 800b200:	602b      	str	r3, [r5, #0]
 800b202:	b016      	add	sp, #88	@ 0x58
 800b204:	bd70      	pop	{r4, r5, r6, pc}
 800b206:	466a      	mov	r2, sp
 800b208:	f000 f848 	bl	800b29c <_fstat_r>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	dbec      	blt.n	800b1ea <__swhatbuf_r+0x12>
 800b210:	9901      	ldr	r1, [sp, #4]
 800b212:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b216:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b21a:	4259      	negs	r1, r3
 800b21c:	4159      	adcs	r1, r3
 800b21e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b222:	e7eb      	b.n	800b1fc <__swhatbuf_r+0x24>

0800b224 <__smakebuf_r>:
 800b224:	898b      	ldrh	r3, [r1, #12]
 800b226:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b228:	079d      	lsls	r5, r3, #30
 800b22a:	4606      	mov	r6, r0
 800b22c:	460c      	mov	r4, r1
 800b22e:	d507      	bpl.n	800b240 <__smakebuf_r+0x1c>
 800b230:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	6123      	str	r3, [r4, #16]
 800b238:	2301      	movs	r3, #1
 800b23a:	6163      	str	r3, [r4, #20]
 800b23c:	b003      	add	sp, #12
 800b23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b240:	ab01      	add	r3, sp, #4
 800b242:	466a      	mov	r2, sp
 800b244:	f7ff ffc8 	bl	800b1d8 <__swhatbuf_r>
 800b248:	9f00      	ldr	r7, [sp, #0]
 800b24a:	4605      	mov	r5, r0
 800b24c:	4639      	mov	r1, r7
 800b24e:	4630      	mov	r0, r6
 800b250:	f7fe fec6 	bl	8009fe0 <_malloc_r>
 800b254:	b948      	cbnz	r0, 800b26a <__smakebuf_r+0x46>
 800b256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b25a:	059a      	lsls	r2, r3, #22
 800b25c:	d4ee      	bmi.n	800b23c <__smakebuf_r+0x18>
 800b25e:	f023 0303 	bic.w	r3, r3, #3
 800b262:	f043 0302 	orr.w	r3, r3, #2
 800b266:	81a3      	strh	r3, [r4, #12]
 800b268:	e7e2      	b.n	800b230 <__smakebuf_r+0xc>
 800b26a:	89a3      	ldrh	r3, [r4, #12]
 800b26c:	6020      	str	r0, [r4, #0]
 800b26e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b272:	81a3      	strh	r3, [r4, #12]
 800b274:	9b01      	ldr	r3, [sp, #4]
 800b276:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b27a:	b15b      	cbz	r3, 800b294 <__smakebuf_r+0x70>
 800b27c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b280:	4630      	mov	r0, r6
 800b282:	f000 f81d 	bl	800b2c0 <_isatty_r>
 800b286:	b128      	cbz	r0, 800b294 <__smakebuf_r+0x70>
 800b288:	89a3      	ldrh	r3, [r4, #12]
 800b28a:	f023 0303 	bic.w	r3, r3, #3
 800b28e:	f043 0301 	orr.w	r3, r3, #1
 800b292:	81a3      	strh	r3, [r4, #12]
 800b294:	89a3      	ldrh	r3, [r4, #12]
 800b296:	431d      	orrs	r5, r3
 800b298:	81a5      	strh	r5, [r4, #12]
 800b29a:	e7cf      	b.n	800b23c <__smakebuf_r+0x18>

0800b29c <_fstat_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	4d07      	ldr	r5, [pc, #28]	@ (800b2bc <_fstat_r+0x20>)
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	4608      	mov	r0, r1
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	602b      	str	r3, [r5, #0]
 800b2aa:	f7f7 fb01 	bl	80028b0 <_fstat>
 800b2ae:	1c43      	adds	r3, r0, #1
 800b2b0:	d102      	bne.n	800b2b8 <_fstat_r+0x1c>
 800b2b2:	682b      	ldr	r3, [r5, #0]
 800b2b4:	b103      	cbz	r3, 800b2b8 <_fstat_r+0x1c>
 800b2b6:	6023      	str	r3, [r4, #0]
 800b2b8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20000874 	.word	0x20000874

0800b2c0 <_isatty_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	4d06      	ldr	r5, [pc, #24]	@ (800b2dc <_isatty_r+0x1c>)
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	4608      	mov	r0, r1
 800b2ca:	602b      	str	r3, [r5, #0]
 800b2cc:	f7f7 fb00 	bl	80028d0 <_isatty>
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	d102      	bne.n	800b2da <_isatty_r+0x1a>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	b103      	cbz	r3, 800b2da <_isatty_r+0x1a>
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	bd38      	pop	{r3, r4, r5, pc}
 800b2dc:	20000874 	.word	0x20000874

0800b2e0 <_init>:
 800b2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e2:	bf00      	nop
 800b2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2e6:	bc08      	pop	{r3}
 800b2e8:	469e      	mov	lr, r3
 800b2ea:	4770      	bx	lr

0800b2ec <_fini>:
 800b2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ee:	bf00      	nop
 800b2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f2:	bc08      	pop	{r3}
 800b2f4:	469e      	mov	lr, r3
 800b2f6:	4770      	bx	lr
